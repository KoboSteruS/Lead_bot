"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏ telegram_file_id –≤ —Ç–∞–±–ª–∏—Ü—É lead_magnets.
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from sqlalchemy import text
from app.core.database import engine
from loguru import logger


async def add_telegram_file_id_column():
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–ª–æ–Ω–∫—É telegram_file_id –≤ —Ç–∞–±–ª–∏—Ü—É lead_magnets."""
    try:
        async with engine.begin() as conn:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∫–æ–ª–æ–Ω–∫–∞
            result = await conn.execute(text("PRAGMA table_info(lead_magnets)"))
            columns = [row[1] for row in result.fetchall()]
            
            if 'telegram_file_id' in columns:
                logger.info("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ telegram_file_id —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ lead_magnets")
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É
            await conn.execute(text(
                "ALTER TABLE lead_magnets ADD COLUMN telegram_file_id TEXT"
            ))
            
            logger.success("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ telegram_file_id —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É lead_magnets")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏: {e}")
        raise


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    logger.info("üîÑ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ telegram_file_id –≤ lead_magnets...")
    
    try:
        await add_telegram_file_id_column()
        logger.success("üéâ –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        sys.exit(1)
    
    finally:
        await engine.dispose()


if __name__ == "__main__":
    asyncio.run(main())

