"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç—Ä–∏–ø–≤–∞–π–µ—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.

–°–æ–∑–¥–∞–µ—Ç –±–∞–∑–æ–≤—ã–π —Ç—Ä–∏–ø–≤–∞–π–µ—Ä "30 –¥–Ω–µ–π –ø–æ –∫–Ω–∏–≥–µ –ù–∞–ø–æ–ª–µ–æ–Ω–∞ –•–∏–ª–ª–∞" –∑–∞ 9‚Ç¨.
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from loguru import logger
from app.core.database import get_db_session
from app.services.product_service import ProductService
from app.models.product import ProductType


async def create_default_tripwire():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∏–ø–≤–∞–π–µ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."""
    
    # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç—Ä–∏–ø–≤–∞–π–µ—Ä–∞
    tripwire_data = {
        "name": "30 –¥–Ω–µ–π –ø–æ –∫–Ω–∏–≥–µ –ù–∞–ø–æ–ª–µ–æ–Ω–∞ –•–∏–ª–ª–∞",
        "description": "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é 13 –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ —É—Å–ø–µ—Ö–∞ –∏–∑ –∫–Ω–∏–≥–∏ ¬´–î—É–º–∞–π –∏ –±–æ–≥–∞—Ç–µ–π¬ª",
        "type": ProductType.TRIPWIRE,
        "price": 900,  # 9‚Ç¨ –≤ —Ü–µ–Ω—Ç–∞—Ö
        "currency": "EUR",
        "payment_url": "https://your-payment-domain.com/pay/tripwire",
        "offer_text": (
            "üöÄ <b>30 –¥–Ω–µ–π –ø–æ –∫–Ω–∏–≥–µ –ù–∞–ø–æ–ª–µ–æ–Ω–∞ –•–∏–ª–ª–∞</b>\n\n"
            "üìö <b>–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:</b>\n"
            "‚Ä¢ 30 –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å\n"
            "‚Ä¢ –ü–æ—à–∞–≥–æ–≤–æ–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ 13 –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ —É—Å–ø–µ—Ö–∞\n"
            "‚Ä¢ –°–∏—Å—Ç–µ–º—É –æ—Ç—á—ë—Ç–Ω–æ—Å—Ç–∏ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—è\n"
            "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫—É –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—é\n"
            "‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É —á–∞—Ç—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n\n"
            "üéØ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞ 30 –¥–Ω–µ–π:</b>\n"
            "‚Ä¢ –°–æ–∑–¥–∞–¥–∏—Ç–µ —á—ë—Ç–∫–∏–π –ø–ª–∞–Ω –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–π\n"
            "‚Ä¢ –†–∞–∑–æ–≤—å—ë—Ç–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É –∏ —Å–∏–ª—É –≤–æ–ª–∏\n"
            "‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç–µ –º—ã—à–ª–µ–Ω–∏–µ –Ω–∞ —É—Å–ø–µ—Ö\n"
            "‚Ä¢ –ó–∞–ª–æ–∂–∏—Ç–µ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç –¥–ª—è –∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π\n\n"
            "üí∞ <b>–¶–µ–Ω–∞: 9‚Ç¨</b>\n"
            "–≠—Ç–æ –º–µ–Ω—å—à–µ, —á–µ–º —á–∞—à–∫–∞ –∫–æ—Ñ–µ –≤ –¥–µ–Ω—å.\n"
            "–ù–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –≤–∞—à—É –∂–∏–∑–Ω—å –Ω–∞–≤—Å–µ–≥–¥–∞.\n\n"
            "–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?"
        ),
        "is_active": True,
        "sort_order": 1
    }
    
    # –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ñ—Ñ–µ—Ä–∞
    offer_data = {
        "name": "–û—Å–Ω–æ–≤–Ω–æ–π –æ—Ñ—Ñ–µ—Ä - 30 –¥–Ω–µ–π –ø–æ –•–∏–ª–ª—É",
        "text": (
            "üöÄ <b>30 –¥–Ω–µ–π –ø–æ –∫–Ω–∏–≥–µ –ù–∞–ø–æ–ª–µ–æ–Ω–∞ –•–∏–ª–ª–∞</b>\n\n"
            "üìö <b>–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:</b>\n"
            "‚Ä¢ 30 –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å\n"
            "‚Ä¢ –ü–æ—à–∞–≥–æ–≤–æ–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ 13 –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ —É—Å–ø–µ—Ö–∞\n"
            "‚Ä¢ –°–∏—Å—Ç–µ–º—É –æ—Ç—á—ë—Ç–Ω–æ—Å—Ç–∏ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—è\n"
            "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫—É –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—é\n"
            "‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É —á–∞—Ç—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n\n"
            "üéØ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞ 30 –¥–Ω–µ–π:</b>\n"
            "‚Ä¢ –°–æ–∑–¥–∞–¥–∏—Ç–µ —á—ë—Ç–∫–∏–π –ø–ª–∞–Ω –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–π\n"
            "‚Ä¢ –†–∞–∑–æ–≤—å—ë—Ç–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É –∏ —Å–∏–ª—É –≤–æ–ª–∏\n"
            "‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç–µ –º—ã—à–ª–µ–Ω–∏–µ –Ω–∞ —É—Å–ø–µ—Ö\n"
            "‚Ä¢ –ó–∞–ª–æ–∂–∏—Ç–µ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç –¥–ª—è –∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π\n\n"
            "üí∞ <b>–¶–µ–Ω–∞: 9‚Ç¨</b>\n"
            "–≠—Ç–æ –º–µ–Ω—å—à–µ, —á–µ–º —á–∞—à–∫–∞ –∫–æ—Ñ–µ –≤ –¥–µ–Ω—å.\n"
            "–ù–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –≤–∞—à—É –∂–∏–∑–Ω—å –Ω–∞–≤—Å–µ–≥–¥–∞.\n\n"
            "–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?"
        ),
        "price": 900,  # 9‚Ç¨ –≤ —Ü–µ–Ω—Ç–∞—Ö
        "is_active": True
    }
    
    try:
        async with get_db_session() as session:
            product_service = ProductService(session)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç—Ä–∏–ø–≤–∞–π–µ—Ä
            existing_tripwire = await product_service.get_active_product_by_type(ProductType.TRIPWIRE)
            
            if not existing_tripwire:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç—Ä–∏–ø–≤–∞–π–µ—Ä
                tripwire = await product_service.create_product(tripwire_data)
                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç—Ä–∏–ø–≤–∞–π–µ—Ä: {tripwire.name}")
                
                # –°–æ–∑–¥–∞–µ–º –æ—Ñ—Ñ–µ—Ä –¥–ª—è —Ç—Ä–∏–ø–≤–∞–π–µ—Ä–∞
                offer_data["product_id"] = tripwire.id.hex
                offer = await product_service.create_offer(offer_data)
                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –æ—Ñ—Ñ–µ—Ä: {offer.name}")
                
            else:
                logger.info(f"‚ö†Ô∏è –¢—Ä–∏–ø–≤–∞–π–µ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {existing_tripwire.name}")
            
            logger.info("üéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–∏–ø–≤–∞–π–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∏–ø–≤–∞–π–µ—Ä–∞: {e}")
        raise


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    try:
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Ç—Ä–∏–ø–≤–∞–π–µ—Ä–∞...")
        await create_default_tripwire()
        logger.info("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logger.remove()
    logger.add(
        sys.stdout,
        level="INFO",
        format="<green>{time:YYYY-MM-DD HH:mm:ss}</green> | <level>{level: <8}</level> | <cyan>{name}</cyan>:<cyan>{function}</cyan>:<cyan>{line}</cyan> - <level>{message}</level>"
    )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
    asyncio.run(main())
