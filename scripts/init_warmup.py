"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è –ø—Ä–æ–≥—Ä–µ–≤–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.

–°–æ–∑–¥–∞–µ—Ç –±–∞–∑–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –ø—Ä–æ–≥—Ä–µ–≤–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ "–û–°–ù–û–í–ê P U T –ò".
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from loguru import logger
from app.core.database import get_db_session
from app.services.warmup_service import WarmupService
from app.models.warmup import WarmupMessageType


async def create_default_warmup_scenario():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è –ø—Ä–æ–≥—Ä–µ–≤–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."""
    
    try:
        async with get_db_session() as session:
            warmup_service = WarmupService(session)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
            existing_scenario = await warmup_service.get_active_scenario()
            
            if not existing_scenario:
                # –°–æ–∑–¥–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π –ø—Ä–æ–≥—Ä–µ–≤–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                scenario = await warmup_service.create_default_scenario()
                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω —Å—Ü–µ–Ω–∞—Ä–∏–π –ø—Ä–æ–≥—Ä–µ–≤–∞: {scenario.name}")
            else:
                logger.info(f"‚ö†Ô∏è –°—Ü–µ–Ω–∞—Ä–∏–π –ø—Ä–æ–≥—Ä–µ–≤–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {existing_scenario.name}")
            
            logger.info("üéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è –ø—Ä–æ–≥—Ä–µ–≤–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è –ø—Ä–æ–≥—Ä–µ–≤–∞: {e}")
        raise


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    try:
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å—Ü–µ–Ω–∞—Ä–∏—è –ø—Ä–æ–≥—Ä–µ–≤–∞...")
        await create_default_warmup_scenario()
        logger.info("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logger.remove()
    logger.add(
        sys.stdout,
        level="INFO",
        format="<green>{time:YYYY-MM-DD HH:mm:ss}</green> | <level>{level: <8}</level> | <cyan>{name}</cyan>:<cyan>{function}</cyan>:<cyan>{line}</cyan> - <level>{message}</level>"
    )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
    asyncio.run(main())
