#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏.

–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram.
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from loguru import logger
from scripts.weekly_analytics import WeeklyAnalytics
from config.settings import settings


async def test_analytics():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏."""
    try:
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...")
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        analytics = WeeklyAnalytics(settings.BOT_TOKEN)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–∏–æ–¥
        analytics._get_week_period()
        logger.info(f"üìÖ –ü–µ—Ä–∏–æ–¥: {analytics.week_start.strftime('%d.%m.%Y')} - {analytics.week_end.strftime('%d.%m.%Y')}")
        
        # –°–æ–±–∏—Ä–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
        user_data = await analytics.get_user_analytics()
        lead_magnet_data = await analytics.get_lead_magnet_analytics()
        warmup_data = await analytics.get_warmup_analytics()
        mailing_data = await analytics.get_mailing_analytics()
        product_data = await analytics.get_product_analytics()
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        logger.info("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        logger.info(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {user_data}")
        logger.info(f"üéÅ –õ–∏–¥-–º–∞–≥–Ω–∏—Ç—ã: {lead_magnet_data}")
        logger.info(f"üî• –ü—Ä–æ–≥—Ä–µ–≤: {warmup_data}")
        logger.info(f"üì¢ –†–∞—Å—Å—ã–ª–∫–∏: {mailing_data}")
        logger.info(f"üí∞ –ü—Ä–æ–¥—É–∫—Ç—ã: {product_data}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç
        full_analytics = {
            "users": user_data,
            "lead_magnets": lead_magnet_data,
            "warmup": warmup_data,
            "mailings": mailing_data,
            "products": product_data,
            "overall_conversion": 0,
            "arpu": 0,
            "ltv": 0
        }
        
        # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
        if user_data.get("new_users_week", 0) > 0:
            full_analytics["overall_conversion"] = round(
                (product_data.get("sales_week", 0) / user_data["new_users_week"]) * 100, 2
            )
        
        if user_data.get("total_users", 0) > 0:
            full_analytics["arpu"] = round(product_data.get("revenue_week", 0) / user_data["total_users"], 2)
        
        full_analytics["ltv"] = full_analytics["arpu"] * 3
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = analytics.format_analytics_report(full_analytics)
        
        print("\n" + "="*50)
        print("üìä –¢–ï–°–¢–û–í–´–ô –û–¢–ß–ï–¢ –ê–ù–ê–õ–ò–¢–ò–ö–ò")
        print("="*50)
        print(report)
        print("="*50)
        
        logger.info("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    try:
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        logger.remove()
        logger.add(
            sys.stdout,
            level="INFO",
            format="<green>{time:HH:mm:ss}</green> | <level>{level: <8}</level> | <level>{message}</level>",
            colorize=True
        )
        
        success = await test_analytics()
        
        if success:
            logger.info("üéâ –¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")
        else:
            logger.error("‚ùå –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏")
        
        return success
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False


if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1)
