#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π –∏ –ª–æ–≥–∞–º–∏.

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç:
1. –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è –ª–æ–≥–æ–≤
2. –ü—Ä–æ–≤–µ—Ä–∫—É —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –ø—Ä–æ–≥—Ä–µ–≤–∞
3. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from loguru import logger
from app.core.database import get_db_session
from app.services.warmup_service import WarmupService
from app.services.lead_magnet_service import LeadMagnetService
from app.services.user_service import UserService
from config.settings import settings


async def fix_logging():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
    logger.info("üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è...")
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤
    log_dir = os.path.dirname(settings.LOG_FILE)
    if log_dir:
        os.makedirs(log_dir, exist_ok=True)
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è –ª–æ–≥–æ–≤: {log_dir}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å
    try:
        test_file = os.path.join(log_dir, "test.log")
        with open(test_file, "w") as f:
            f.write("test")
        os.remove(test_file)
        logger.info("‚úÖ –ü—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ –ø–∞–ø–∫—É –ª–æ–≥–æ–≤: OK")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ø–∞–ø–∫—É –ª–æ–≥–æ–≤: {e}")


async def check_warmup_scenarios():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ –ø—Ä–æ–≥—Ä–µ–≤–∞."""
    logger.info("üî• –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ –ø—Ä–æ–≥—Ä–µ–≤–∞...")
    
    try:
        async with get_db_session() as session:
            warmup_service = WarmupService(session)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
            active_scenario = await warmup_service.get_active_scenario()
            
            if not active_scenario:
                logger.warning("‚ö†Ô∏è –ê–∫—Ç–∏–≤–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –ø—Ä–æ–≥—Ä–µ–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
                # –°–æ–∑–¥–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                scenario = await warmup_service.create_default_scenario()
                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω —Å—Ü–µ–Ω–∞—Ä–∏–π –ø—Ä–æ–≥—Ä–µ–≤–∞: {scenario.name}")
            else:
                logger.info(f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –Ω–∞–π–¥–µ–Ω: {active_scenario.name}")
                logger.info(f"   –°–æ–æ–±—â–µ–Ω–∏–π –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏: {len(active_scenario.messages)}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = await warmup_service.get_warmup_stats()
            logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ–≤–∞: {stats}")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –ø—Ä–æ–≥—Ä–µ–≤–∞: {e}")


async def check_lead_magnets():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–¥-–º–∞–≥–Ω–∏—Ç—ã."""
    logger.info("üéÅ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–¥-–º–∞–≥–Ω–∏—Ç—ã...")
    
    try:
        async with get_db_session() as session:
            lead_magnet_service = LeadMagnetService(session)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ª–∏–¥-–º–∞–≥–Ω–∏—Ç—ã
            active_magnets = await lead_magnet_service.get_active_lead_magnets()
            
            if not active_magnets:
                logger.warning("‚ö†Ô∏è –ê–∫—Ç–∏–≤–Ω—ã–µ –ª–∏–¥-–º–∞–≥–Ω–∏—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
                # –°–æ–∑–¥–∞–µ–º –ª–∏–¥-–º–∞–≥–Ω–∏—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                default_magnet = await lead_magnet_service.create_default_lead_magnet()
                if default_magnet:
                    logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –ª–∏–¥-–º–∞–≥–Ω–∏—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {default_magnet.name}")
                else:
                    logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ª–∏–¥-–º–∞–≥–Ω–∏—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            else:
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–æ–≤: {len(active_magnets)}")
                for magnet in active_magnets:
                    logger.info(f"   - {magnet.name}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = await lead_magnet_service.get_lead_magnet_stats()
            logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–æ–≤: {stats}")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–æ–≤: {e}")


async def check_users():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    logger.info("üë• –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    
    try:
        async with get_db_session() as session:
            user_service = UserService(session)
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users = await user_service.get_all_users()
            logger.info(f"‚úÖ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = await user_service.get_user_statistics()
            logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats}")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ –ª–æ–≥–æ–≤...")
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        await fix_logging()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã
        await check_warmup_scenarios()
        await check_lead_magnets()
        await check_users()
        
        logger.info("üéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise


if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å–∫—Ä–∏–ø—Ç–∞
    logger.remove()
    logger.add(
        sys.stdout,
        level="INFO",
        format="<green>{time:HH:mm:ss}</green> | <level>{level: <8}</level> | <level>{message}</level>",
        colorize=True
    )
    
    asyncio.run(main())
