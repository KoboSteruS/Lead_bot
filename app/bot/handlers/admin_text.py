"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.

–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ—Ä–º–∞—Ö —Å–æ–∑–¥–∞–Ω–∏—è –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
"""

from telegram import Update
from telegram.ext import ContextTypes, MessageHandler, filters
from loguru import logger

from app.services import LeadMagnetService
from app.core.database import get_database


async def admin_text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏."""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏–¥ –º–∞–≥–Ω–∏—Ç–∞, —Å—Ü–µ–Ω–∞—Ä–∏—è –ø—Ä–æ–≥—Ä–µ–≤–∞, —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è
        if ('creating_lead_magnet' not in context.user_data and 
            'creating_warmup_scenario' not in context.user_data and
            'creating_message_template' not in context.user_data and
            'editing_warmup_scenario' not in context.user_data):
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
        if hasattr(update.message, '_admin_processed'):
            return
        
        text = update.message.text.strip()
        
        if not text:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç.")
            return
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ª–∏–¥ –º–∞–≥–Ω–∏—Ç–∞
        if 'creating_lead_magnet' in context.user_data:
            creating_data = context.user_data['creating_lead_magnet']
            current_step = creating_data.get('step', 'name')
            
            if current_step == 'name':
                await _handle_lead_magnet_name_input(update, context, text)
            elif current_step == 'description':
                await _handle_lead_magnet_description_input(update, context, text)
            elif current_step == 'file_url':
                await _handle_lead_magnet_file_url_input(update, context, text)
            elif current_step == 'message':
                await _handle_lead_magnet_message_input(update, context, text)
            else:
                await update.message.reply_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —à–∞–≥ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏–¥ –º–∞–≥–Ω–∏—Ç–∞.")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è –ø—Ä–æ–≥—Ä–µ–≤–∞
        elif 'creating_warmup_scenario' in context.user_data:
            creating_data = context.user_data['creating_warmup_scenario']
            current_step = creating_data.get('step', 'name')
            
            if current_step == 'name':
                await _handle_warmup_scenario_name_input(update, context, text)
            elif current_step == 'description':
                await _handle_warmup_scenario_description_input(update, context, text)
            else:
                await update.message.reply_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —à–∞–≥ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è –ø—Ä–æ–≥—Ä–µ–≤–∞.")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
        elif 'creating_message_template' in context.user_data:
            creating_data = context.user_data['creating_message_template']
            current_step = creating_data.get('step', 'name')
            
            if current_step == 'name':
                await _handle_message_template_name_input(update, context, text)
            elif current_step == 'content':
                await _handle_message_template_content_input(update, context, text)
            elif current_step == 'category':
                await _handle_message_template_category_input(update, context, text)
            else:
                await update.message.reply_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —à–∞–≥ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞.")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è –ø—Ä–æ–≥—Ä–µ–≤–∞
        elif 'editing_warmup_scenario' in context.user_data:
            editing_data = context.user_data['editing_warmup_scenario']
            edit_type = editing_data.get('type', 'name')
            
            if edit_type == 'name':
                await _handle_warmup_edit_name_input(update, context, text)
            elif edit_type == 'description':
                await _handle_warmup_edit_desc_input(update, context, text)
            else:
                await update.message.reply_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è.")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")


async def _handle_lead_magnet_name_input(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ª–∏–¥ –º–∞–≥–Ω–∏—Ç–∞."""
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
        context.user_data['creating_lead_magnet']['name'] = text
        context.user_data['creating_lead_magnet']['step'] = 'description'
        
        await update.message.reply_text(
            f"‚úÖ <b>–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:</b> {text}\n\n"
            "üìù <b>–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –û–ø–∏—Å–∞–Ω–∏–µ</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ª–∏–¥ –º–∞–≥–Ω–∏—Ç–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞.",
            parse_mode='HTML'
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        
        keyboard = [
            [InlineKeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="admin_lead_magnet_create_file_url")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞–∑–≤–∞–Ω–∏—é", callback_data="admin_lead_magnet_create_name")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="admin_content_leadmagnets")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "üí° <b>–ß—Ç–æ –≤–∫–ª—é—á–∏—Ç—å –≤ –æ–ø–∏—Å–∞–Ω–∏–µ:</b>\n"
            "‚Ä¢ –ß—Ç–æ –ø–æ–ª—É—á–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å\n"
            "‚Ä¢ –ö–∞–∫ —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –≤ —Ä–∞–∑–≤–∏—Ç–∏–∏\n"
            "‚Ä¢ –§–æ—Ä–º–∞—Ç –∏ –æ–±—ä–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞\n"
            "‚Ä¢ –í—Ä–µ–º—è –Ω–∞ –∏–∑—É—á–µ–Ω–∏–µ",
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∑–≤–∞–Ω–∏—è: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è.")


async def _handle_lead_magnet_description_input(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ª–∏–¥ –º–∞–≥–Ω–∏—Ç–∞."""
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        context.user_data['creating_lead_magnet']['description'] = text
        context.user_data['creating_lead_magnet']['step'] = 'file_url'
        
        await update.message.reply_text(
            f"‚úÖ <b>–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ</b>\n\n"
            "üîó <b>–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞.",
            parse_mode='HTML'
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        
        keyboard = [
            [InlineKeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data="admin_lead_magnet_create_message")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –æ–ø–∏—Å–∞–Ω–∏—é", callback_data="admin_lead_magnet_create_description")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="admin_content_leadmagnets")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "üí° <b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å—Å—ã–ª–∫–∞–º:</b>\n"
            "‚Ä¢ –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—É–±–ª–∏—á–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ–π\n"
            "‚Ä¢ –î–ª—è Google Drive: –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –¥–æ—Å—Ç—É–ø '–ö—Ç–æ —É–≥–æ–¥–Ω–æ —Å —Å—Å—ã–ª–∫–æ–π'\n"
            "‚Ä¢ –î–ª—è PDF: —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏",
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–∏—Å–∞–Ω–∏—è: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è.")


async def _handle_lead_magnet_file_url_input(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–∞–π–ª –ª–∏–¥ –º–∞–≥–Ω–∏—Ç–∞."""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É
        if not (text.startswith('http://') or text.startswith('https://')):
            await update.message.reply_text(
                "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏</b>\n\n"
                "–°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–≥.",
                parse_mode='HTML'
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É
        context.user_data['creating_lead_magnet']['file_url'] = text
        context.user_data['creating_lead_magnet']['step'] = 'message'
        
        await update.message.reply_text(
            f"‚úÖ <b>–°—Å—ã–ª–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞</b>\n\n"
            "üí¨ <b>–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω –ø—Ä–∏ –≤—ã–¥–∞—á–µ –ª–∏–¥ –º–∞–≥–Ω–∏—Ç–∞.",
            parse_mode='HTML'
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        
        keyboard = [
            [InlineKeyboardButton("‚è≠Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω", callback_data="admin_lead_magnet_create_confirm")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å—Å—ã–ª–∫–µ", callback_data="admin_lead_magnet_create_file_url")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="admin_content_leadmagnets")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "üí° <b>–ß—Ç–æ –≤–∫–ª—é—á–∏—Ç—å –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>\n"
            "‚Ä¢ –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å\n"
            "‚Ä¢ –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏\n"
            "‚Ä¢ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é\n"
            "‚Ä¢ –ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é",
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Å—ã–ª–∫–∏: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏.")


async def _handle_lead_magnet_message_input(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ª–∏–¥ –º–∞–≥–Ω–∏—Ç–∞."""
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        context.user_data['creating_lead_magnet']['message_text'] = text
        context.user_data['creating_lead_magnet']['step'] = 'confirm'
        
        await update.message.reply_text(
            "‚úÖ <b>–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω</b>\n\n"
            "üéØ <b>–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã!</b>\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ª–∏–¥ –º–∞–≥–Ω–∏—Ç–∞.",
            parse_mode='HTML'
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="admin_lead_magnet_create_confirm")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é", callback_data="admin_lead_magnet_create_message")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="admin_content_leadmagnets")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "üìã <b>–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:</b> –ü—Ä–æ—Å–º–æ—Ç—Ä –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö",
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è.")


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –ø—Ä–æ–≥—Ä–µ–≤–∞

async def _handle_warmup_scenario_name_input(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è –ø—Ä–æ–≥—Ä–µ–≤–∞."""
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
        context.user_data['creating_warmup_scenario']['name'] = text
        context.user_data['creating_warmup_scenario']['step'] = 'description'
        
        await update.message.reply_text(
            f"‚úÖ <b>–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:</b> {text}\n\n"
            "üìù <b>–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –û–ø–∏—Å–∞–Ω–∏–µ</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞.",
            parse_mode='HTML'
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        
        keyboard = [
            [InlineKeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="admin_warmup_create_scenario_final")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞–∑–≤–∞–Ω–∏—é", callback_data="admin_warmup_create_scenario")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="admin_content_warmup")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "üí° <b>–ß—Ç–æ –≤–∫–ª—é—á–∏—Ç—å –≤ –æ–ø–∏—Å–∞–Ω–∏–µ:</b>\n"
            "‚Ä¢ –¶–µ–ª—å –∏ –∑–∞–¥–∞—á–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è\n"
            "‚Ä¢ –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è\n"
            "‚Ä¢ –û–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n"
            "‚Ä¢ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –Ω—é–∞–Ω—Å—ã",
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è.")


async def _handle_warmup_scenario_description_input(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è –ø—Ä–æ–≥—Ä–µ–≤–∞."""
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        context.user_data['creating_warmup_scenario']['description'] = text
        
        await update.message.reply_text(
            "‚úÖ <b>–û–ø–∏—Å–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ</b>\n\n"
            "üéØ <b>–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã!</b>\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π –ø—Ä–æ–≥—Ä–µ–≤–∞.",
            parse_mode='HTML'
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –°–æ–∑–¥–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π", callback_data="admin_warmup_create_scenario_final")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –æ–ø–∏—Å–∞–Ω–∏—é", callback_data="admin_warmup_create_scenario")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="admin_content_warmup")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "üìã <b>–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:</b> –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è —Å –±–∞–∑–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏",
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–∏—Å–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è.")


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤

async def _handle_message_template_name_input(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞."""
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
        context.user_data['creating_message_template']['name'] = text
        context.user_data['creating_message_template']['step'] = 'category'
        
        await update.message.reply_text(
            f"‚úÖ <b>–ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:</b> {text}\n\n"
            "üìù <b>–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –ö–∞—Ç–µ–≥–æ—Ä–∏—è</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —à–∞–±–ª–æ–Ω–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.",
            parse_mode='HTML'
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        
        keyboard = [
            [InlineKeyboardButton("üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ", callback_data="admin_messages_category_welcome")],
            [InlineKeyboardButton("‚ùå –û—à–∏–±–∫–∞", callback_data="admin_messages_category_error")],
            [InlineKeyboardButton("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", callback_data="admin_messages_category_notification")],
            [InlineKeyboardButton("üìù –°–∏—Å—Ç–µ–º–Ω–æ–µ", callback_data="admin_messages_category_system")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞–∑–≤–∞–Ω–∏—é", callback_data="admin_messages_create")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="admin_content_messages")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "üí° <b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</b>\n"
            "‚Ä¢ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ - –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            "‚Ä¢ –û—à–∏–±–∫–∞ - –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –æ—à–∏–±–æ–∫\n"
            "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ - –¥–ª—è –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π\n"
            "‚Ä¢ –°–∏—Å—Ç–µ–º–Ω–æ–µ - –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π",
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞.")


async def _handle_message_template_category_input(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞."""
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        context.user_data['creating_message_template']['category'] = text
        context.user_data['creating_message_template']['step'] = 'content'
        
        await update.message.reply_text(
            f"‚úÖ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:</b> {text}\n\n"
            "üìù <b>–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —à–∞–±–ª–æ–Ω–∞</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞. –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML-—Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.",
            parse_mode='HTML'
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        
        keyboard = [
            [InlineKeyboardButton("üí° –ü—Ä–∏–º–µ—Ä—ã HTML", callback_data="admin_messages_html_examples")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="admin_messages_create")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="admin_content_messages")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "üí° <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ HTML-—Ç–µ–≥–∏:</b>\n"
            "‚Ä¢ <b>–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç</b>\n"
            "‚Ä¢ <i>–∫—É—Ä—Å–∏–≤</i>\n"
            "‚Ä¢ <code>–º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π</code>\n"
            "‚Ä¢ <pre>–±–ª–æ–∫ –∫–æ–¥–∞</pre>\n"
            "‚Ä¢ <a href='—Å—Å—ã–ª–∫–∞'>—Å—Å—ã–ª–∫–∞</a>",
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —à–∞–±–ª–æ–Ω–∞: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —à–∞–±–ª–æ–Ω–∞.")


async def _handle_message_template_content_input(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞."""
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        context.user_data['creating_message_template']['content'] = text
        
        await update.message.reply_text(
            "‚úÖ <b>–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —à–∞–±–ª–æ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ</b>\n\n"
            "üéØ <b>–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã!</b>\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π —à–∞–±–ª–æ–Ω.",
            parse_mode='HTML'
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –°–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω", callback_data="admin_messages_create_final")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É", callback_data="admin_messages_create")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="admin_content_messages")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "üìã <b>–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:</b> –°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏",
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —à–∞–±–ª–æ–Ω–∞: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —à–∞–±–ª–æ–Ω–∞.")


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –ø—Ä–æ–≥—Ä–µ–≤–∞

async def _handle_warmup_edit_name_input(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è –ø—Ä–æ–≥—Ä–µ–≤–∞."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        editing_data = context.user_data.get('editing_warmup_scenario', {})
        short_id = editing_data.get('short_id', '')
        
        if not short_id:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        editing_data['new_name'] = text
        editing_data['step'] = 'confirm'
        
        await update.message.reply_text(
            f"‚úÖ <b>–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:</b> {text}\n\n"
            "üéØ <b>–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:</b> –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è.",
            parse_mode='HTML'
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ", callback_data=f"admin_warmup_edit_name_confirm_{short_id}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é", callback_data=f"admin_warmup_scenario_{short_id}")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "üìã <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è</b>",
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è")


async def _handle_warmup_edit_desc_input(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è –ø—Ä–æ–≥—Ä–µ–≤–∞."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        editing_data = context.user_data.get('editing_warmup_scenario', {})
        short_id = editing_data.get('short_id', '')
        
        if not short_id:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        editing_data['new_description'] = text
        editing_data['step'] = 'confirm'
        
        await update.message.reply_text(
            "‚úÖ <b>–ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ</b>\n\n"
            "üéØ <b>–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:</b> –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è.",
            parse_mode='HTML'
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ", callback_data=f"admin_warmup_edit_desc_confirm_{short_id}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é", callback_data=f"admin_warmup_scenario_{short_id}")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "üìã <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è</b>",
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è")


# –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
admin_text = MessageHandler(filters.TEXT & ~filters.COMMAND, admin_text_handler)
