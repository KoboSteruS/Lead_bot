"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞–º–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.

–°–æ–¥–µ—Ä–∂–∏—Ç –ª–æ–≥–∏–∫—É —Å–æ–∑–¥–∞–Ω–∏—è, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤.
"""

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from loguru import logger

from app.core.database import get_db_session
from app.services.dialog_service import DialogService
from app.schemas.dialog import DialogCreate, DialogQuestionCreate, DialogAnswerCreate
from app.bot.utils.admin_check import is_admin


async def admin_dialogs_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–î–∏–∞–ª–æ–≥–∏' –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""
    query = update.callback_query
    await query.answer()
    
    if not await is_admin(query.from_user.id):
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    try:
        async with get_db_session() as session:
            dialog_service = DialogService(session)
            dialogs = await dialog_service.get_all_dialogs()
            stats = await dialog_service.get_dialog_stats()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_text = (
                "üí¨ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞–º–∏</b>\n\n"
                f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
                f"‚Ä¢ –í—Å–µ–≥–æ –¥–∏–∞–ª–æ–≥–æ–≤: {stats['total_dialogs']}\n"
                f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active_dialogs']}\n"
                f"‚Ä¢ –í–æ–ø—Ä–æ—Å–æ–≤: {stats['total_questions']}\n"
                f"‚Ä¢ –û—Ç–≤–µ—Ç–æ–≤: {stats['total_answers']}\n\n"
                f"üìã <b>–î–∏–∞–ª–æ–≥–∏:</b>\n"
            )
            
            if dialogs:
                for i, dialog in enumerate(dialogs[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                    status_emoji = "‚úÖ" if dialog.status == "active" else "‚ùå"
                    message_text += f"{i}. {status_emoji} {dialog.name}\n"
                
                if len(dialogs) > 10:
                    message_text += f"... –∏ –µ—â–µ {len(dialogs) - 10} –¥–∏–∞–ª–æ–≥–æ–≤\n"
            else:
                message_text += "–î–∏–∞–ª–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n"
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = [
                [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –¥–∏–∞–ª–æ–≥", callback_data="create_dialog")],
                [InlineKeyboardButton("üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_dialog_select")],
                [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data="delete_dialog_select")],
                [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="dialog_stats")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            try:
                await query.edit_message_text(
                    message_text,
                    parse_mode="HTML",
                    reply_markup=reply_markup
                )
            except Exception as edit_error:
                if "Message is not modified" in str(edit_error):
                    await query.answer("–î–∏–∞–ª–æ–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
                else:
                    raise edit_error
                    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤")


async def create_dialog_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞."""
    query = update.callback_query
    await query.answer()
    
    if not await is_admin(query.from_user.id):
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
    context.user_data['action'] = 'creating_dialog'
    context.user_data['dialog_data'] = {
        'questions': [],
        'current_question': None
    }
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_dialogs")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üí¨ <b>–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞</b>\n\n"
        "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞:",
        parse_mode="HTML",
        reply_markup=reply_markup
    )


async def edit_dialog_select_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    query = update.callback_query
    await query.answer()
    
    if not await is_admin(query.from_user.id):
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    try:
        async with get_db_session() as session:
            dialog_service = DialogService(session)
            dialogs = await dialog_service.get_all_dialogs()
            
            if not dialogs:
                await query.edit_message_text(
                    "‚ùå –î–∏–∞–ª–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_dialogs")]])
                )
                return
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–∏–∞–ª–æ–≥–∞–º–∏
            keyboard = []
            for dialog in dialogs[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                status_emoji = "‚úÖ" if dialog.status == "active" else "‚ùå"
                button_text = f"{status_emoji} {dialog.name[:30]}"
                keyboard.append([InlineKeyboardButton(
                    button_text,
                    callback_data=f"edit_dialog_{str(dialog.id)[:8]}"
                )])
            
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_dialogs")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "üìù <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ª–æ–≥ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</b>",
                parse_mode="HTML",
                reply_markup=reply_markup
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤")


async def edit_dialog_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞."""
    query = update.callback_query
    await query.answer()
    
    if not await is_admin(query.from_user.id):
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –¥–∏–∞–ª–æ–≥–∞ –∏–∑ callback_data
    dialog_id = query.data.replace("edit_dialog_", "")
    
    try:
        async with get_db_session() as session:
            dialog_service = DialogService(session)
            dialog = await dialog_service.get_dialog_by_id(dialog_id)
            
            if not dialog:
                await query.edit_message_text(
                    "‚ùå –î–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_dialogs")]])
                )
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–∏–∞–ª–æ–≥–µ
            message_text = (
                f"üìù <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞</b>\n\n"
                f"üìã <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {dialog.name}\n"
                f"üìÑ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {dialog.description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                f"üîÑ <b>–°—Ç–∞—Ç—É—Å:</b> {dialog.status}\n"
                f"üìä <b>–í–æ–ø—Ä–æ—Å–æ–≤:</b> {len(dialog.questions)}\n\n"
                f"üìù <b>–í–æ–ø—Ä–æ—Å—ã:</b>\n"
            )
            
            for i, question in enumerate(dialog.questions[:5], 1):
                message_text += f"{i}. {question.question_text[:50]}...\n"
            
            if len(dialog.questions) > 5:
                message_text += f"... –∏ –µ—â–µ {len(dialog.questions) - 5} –≤–æ–ø—Ä–æ—Å–æ–≤\n"
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = [
                [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_dialog_name_{dialog_id}")],
                [InlineKeyboardButton("üìÑ –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_dialog_desc_{dialog_id}")],
                [InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"edit_dialog_status_{dialog_id}")],
                [InlineKeyboardButton("‚ùì –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞–º–∏", callback_data=f"manage_questions_{dialog_id}")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="edit_dialog_select")]
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            try:
                await query.edit_message_text(
                    message_text,
                    parse_mode="HTML",
                    reply_markup=reply_markup
                )
            except Exception as edit_error:
                if "Message is not modified" in str(edit_error):
                    await query.answer("–î–∏–∞–ª–æ–≥ –æ–±–Ω–æ–≤–ª–µ–Ω")
                else:
                    raise edit_error
                    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞")


async def delete_dialog_select_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."""
    query = update.callback_query
    await query.answer()
    
    if not await is_admin(query.from_user.id):
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    try:
        async with get_db_session() as session:
            dialog_service = DialogService(session)
            dialogs = await dialog_service.get_all_dialogs()
            
            if not dialogs:
                await query.edit_message_text(
                    "‚ùå –î–∏–∞–ª–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_dialogs")]])
                )
                return
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–∏–∞–ª–æ–≥–∞–º–∏
            keyboard = []
            for dialog in dialogs[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                status_emoji = "‚úÖ" if dialog.status == "active" else "‚ùå"
                button_text = f"{status_emoji} {dialog.name[:30]}"
                keyboard.append([InlineKeyboardButton(
                    button_text,
                    callback_data=f"delete_dialog_{str(dialog.id)[:8]}"
                )])
            
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_dialogs")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "üóëÔ∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ª–æ–≥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:</b>",
                parse_mode="HTML",
                reply_markup=reply_markup
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤")


async def confirm_delete_dialog_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞."""
    query = update.callback_query
    await query.answer()
    
    if not await is_admin(query.from_user.id):
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –¥–∏–∞–ª–æ–≥–∞ –∏–∑ callback_data
    dialog_id = query.data.replace("delete_dialog_", "")
    
    try:
        async with get_db_session() as session:
            dialog_service = DialogService(session)
            dialog = await dialog_service.get_dialog_by_id(dialog_id)
            
            if not dialog:
                await query.edit_message_text(
                    "‚ùå –î–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_dialogs")]])
                )
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            message_text = (
                f"üóëÔ∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n"
                f"üìã <b>–î–∏–∞–ª–æ–≥:</b> {dialog.name}\n"
                f"üìä <b>–í–æ–ø—Ä–æ—Å–æ–≤:</b> {len(dialog.questions)}\n"
                f"üìä <b>–û—Ç–≤–µ—Ç–æ–≤:</b> {sum(len(q.answers) for q in dialog.questions)}\n\n"
                f"‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï!</b> –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.\n"
                f"–í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –Ω–∞–≤—Å–µ–≥–¥–∞.\n\n"
                f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –¥–∏–∞–ª–æ–≥?"
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            keyboard = [
                [InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_dialog_{dialog_id}")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_dialogs")]
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                message_text,
                parse_mode="HTML",
                reply_markup=reply_markup
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è")


async def execute_delete_dialog_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞."""
    query = update.callback_query
    await query.answer()
    
    if not await is_admin(query.from_user.id):
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –¥–∏–∞–ª–æ–≥–∞ –∏–∑ callback_data
    dialog_id = query.data.replace("confirm_delete_dialog_", "")
    
    try:
        async with get_db_session() as session:
            dialog_service = DialogService(session)
            dialog = await dialog_service.get_dialog_by_id(dialog_id)
            
            if not dialog:
                await query.edit_message_text(
                    "‚ùå –î–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_dialogs")]])
                )
                return
            
            dialog_name = dialog.name
            
            # –£–¥–∞–ª—è–µ–º –¥–∏–∞–ª–æ–≥
            success = await dialog_service.delete_dialog(dialog_id)
            
            if success:
                await query.edit_message_text(
                    f"‚úÖ –î–∏–∞–ª–æ–≥ '{dialog_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ö –¥–∏–∞–ª–æ–≥–∞–º", callback_data="admin_dialogs")]])
                )
                logger.info(f"–ê–¥–º–∏–Ω {query.from_user.id} —É–¥–∞–ª–∏–ª –¥–∏–∞–ª–æ–≥: {dialog_name}")
            else:
                await query.edit_message_text(
                    "‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_dialogs")]])
                )
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞")


async def dialog_stats_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤."""
    query = update.callback_query
    await query.answer()
    
    if not await is_admin(query.from_user.id):
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    try:
        async with get_db_session() as session:
            dialog_service = DialogService(session)
            stats = await dialog_service.get_dialog_stats()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
            message_text = (
                "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤</b>\n\n"
                f"üí¨ <b>–î–∏–∞–ª–æ–≥–∏:</b>\n"
                f"‚Ä¢ –í—Å–µ–≥–æ: {stats['total_dialogs']}\n"
                f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active_dialogs']}\n"
                f"‚Ä¢ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {stats['total_dialogs'] - stats['active_dialogs']}\n\n"
                f"‚ùì <b>–í–æ–ø—Ä–æ—Å—ã:</b>\n"
                f"‚Ä¢ –í—Å–µ–≥–æ: {stats['total_questions']}\n"
                f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active_questions']}\n"
                f"‚Ä¢ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {stats['total_questions'] - stats['active_questions']}\n\n"
                f"üí¨ <b>–û—Ç–≤–µ—Ç—ã:</b>\n"
                f"‚Ä¢ –í—Å–µ–≥–æ: {stats['total_answers']}\n"
                f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active_answers']}\n"
                f"‚Ä¢ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {stats['total_answers'] - stats['active_answers']}\n\n"
                f"üìà <b>–°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>\n"
                f"‚Ä¢ –í–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ –¥–∏–∞–ª–æ–≥: {stats['total_questions'] / max(stats['total_dialogs'], 1):.1f}\n"
                f"‚Ä¢ –û—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å: {stats['total_answers'] / max(stats['total_questions'], 1):.1f}"
            )
            
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_dialogs")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                message_text,
                parse_mode="HTML",
                reply_markup=reply_markup
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


# –°–æ–∑–¥–∞–Ω–∏–µ callback handlers
from telegram.ext import CallbackQueryHandler

admin_dialogs_callback = CallbackQueryHandler(admin_dialogs_handler, pattern="^admin_dialogs$")
create_dialog_callback = CallbackQueryHandler(create_dialog_handler, pattern="^create_dialog$")
edit_dialog_select_callback = CallbackQueryHandler(edit_dialog_select_handler, pattern="^edit_dialog_select$")
edit_dialog_callback = CallbackQueryHandler(edit_dialog_handler, pattern="^edit_dialog_")
delete_dialog_select_callback = CallbackQueryHandler(delete_dialog_select_handler, pattern="^delete_dialog_select$")
confirm_delete_dialog_callback = CallbackQueryHandler(confirm_delete_dialog_handler, pattern="^delete_dialog_")
execute_delete_dialog_callback = CallbackQueryHandler(execute_delete_dialog_handler, pattern="^confirm_delete_dialog_")
dialog_stats_callback = CallbackQueryHandler(dialog_stats_handler, pattern="^dialog_stats$")
