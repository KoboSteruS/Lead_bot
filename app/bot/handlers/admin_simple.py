"""
–ü—Ä–æ—Å—Ç–∞—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è LeadBot.

–°–æ–¥–µ—Ä–∂–∏—Ç –±–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è.
"""

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CommandHandler, CallbackQueryHandler
from loguru import logger
import asyncio

from app.core.database import get_db_session
from app.services import UserService, LeadMagnetService, WarmupService, ProductService
from app.models.lead_magnet import LeadMagnetType
from config.settings import settings


async def admin_command_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin.
    
    Args:
        update: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    user = update.effective_user
    
    if not user:
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    if str(user.id) not in str(settings.ADMIN_IDS):
        await update.message.reply_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            parse_mode="HTML"
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω—Å–∫—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = [
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")],
        [InlineKeyboardButton("üéÅ –õ–∏–¥-–º–∞–≥–Ω–∏—Ç—ã", callback_data="admin_lead_magnets")],
        [InlineKeyboardButton("üí∞ –¢—Ä–∏–ø–≤–∞–π–µ—Ä—ã", callback_data="admin_products")],
        [InlineKeyboardButton("üî• –ü—Ä–æ–≥—Ä–µ–≤", callback_data="admin_warmup")],
        [InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∏", callback_data="admin_mailings")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üë®‚Äçüíº <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å LeadBot</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        parse_mode="HTML",
        reply_markup=reply_markup
    )
    
    logger.info(f"–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –æ—Ç–∫—Ä—ã—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user.id}")


async def admin_stats_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    query = update.callback_query
    await query.answer()
    
    try:
        async with get_db_session() as session:
            user_service = UserService(session)
            lead_magnet_service = LeadMagnetService(session)
            warmup_service = WarmupService(session)
            product_service = ProductService(session)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            total_users = len(await user_service.get_all_users())
            active_lead_magnets = len(await lead_magnet_service.get_active_lead_magnets())
            active_warmups = len(await warmup_service.get_active_warmup_users())
            warmup_stats = await warmup_service.get_warmup_stats()
            
            stats_text = (
                "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ LeadBot</b>\n\n"
                f"üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b> {total_users}\n"
                f"üéÅ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ª–∏–¥-–º–∞–≥–Ω–∏—Ç—ã:</b> {active_lead_magnets}\n"
                f"üî• <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–≥—Ä–µ–≤—ã:</b> {active_warmups}\n"
                f"üìà <b>–í—Å–µ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –ø—Ä–æ–≥—Ä–µ–≤–∞:</b> {warmup_stats.get('total_scenarios', 0)}\n"
                f"üìù <b>–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–æ–≥—Ä–µ–≤–∞:</b> {warmup_stats.get('total_messages', 0)}\n"
            )
            
            keyboard = [
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_stats")],
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                stats_text,
                parse_mode="HTML",
                reply_markup=reply_markup
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
            parse_mode="HTML"
        )


async def admin_users_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    query = update.callback_query
    await query.answer()
    
    try:
        async with get_db_session() as session:
            user_service = UserService(session)
            
            users = await user_service.get_all_users()
            
            users_text = f"üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ({len(users)}):</b>\n\n"
            
            for user in users[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 10
                status = user.status.value if hasattr(user.status, 'value') else user.status
                users_text += (
                    f"‚Ä¢ {user.full_name} (@{user.username or '–Ω–µ—Ç'})\n"
                    f"  ID: {user.telegram_id}\n"
                    f"  –°—Ç–∞—Ç—É—Å: {status}\n\n"
                )
            
            if len(users) > 10:
                users_text += f"... –∏ –µ—â–µ {len(users) - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
            
            keyboard = [
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_users")],
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                users_text,
                parse_mode="HTML",
                reply_markup=reply_markup
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            parse_mode="HTML"
        )


async def admin_lead_magnets_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–æ–≤."""
    query = update.callback_query
    await query.answer()
    
    try:
        async with get_db_session() as session:
            lead_magnet_service = LeadMagnetService(session)
            
            magnets = await lead_magnet_service.get_all_lead_magnets()
            
            magnets_text = f"üéÅ <b>–õ–∏–¥-–º–∞–≥–Ω–∏—Ç—ã ({len(magnets)}):</b>\n\n"
            
            keyboard = []
            
            for magnet in magnets:
                status = "‚úÖ" if magnet.is_active else "‚ùå"
                magnet_type = magnet.type.value if hasattr(magnet.type, 'value') else magnet.type
                magnets_text += (
                    f"{status} <b>{magnet.name}</b>\n"
                    f"   –¢–∏–ø: {magnet_type}\n\n"
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞
                keyboard.append([
                    InlineKeyboardButton(
                        f"‚úèÔ∏è {magnet.name[:20]}...", 
                        callback_data=f"edit_magnet_{str(magnet.id)[:8]}"
                    ),
                    InlineKeyboardButton(
                        "üóëÔ∏è", 
                        callback_data=f"delete_magnet_{str(magnet.id)[:8]}"
                    )
                ])
            
            keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ª–∏–¥-–º–∞–≥–Ω–∏—Ç", callback_data="add_lead_magnet")])
            keyboard.append([InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –≤—ã–¥–∞—á–∏", callback_data="reset_all_lead_magnets")])
            keyboard.append([InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_lead_magnets")])
            keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                magnets_text,
                parse_mode="HTML",
                reply_markup=reply_markup
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–æ–≤: {e}")
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–æ–≤",
            parse_mode="HTML"
        )


async def admin_products_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤."""
    query = update.callback_query
    await query.answer()
    
    try:
        async with get_db_session() as session:
            product_service = ProductService(session)
            
            products = await product_service.get_all_products()
            
            products_text = f"üí∞ <b>–ü—Ä–æ–¥—É–∫—Ç—ã ({len(products)}):</b>\n\n"
            
            keyboard = []
            
            for product in products:
                status = "‚úÖ" if product.is_active else "‚ùå"
                product_type = product.type.value if hasattr(product.type, 'value') else product.type
                products_text += (
                    f"{status} <b>{product.name}</b>\n"
                    f"   –¢–∏–ø: {product_type}\n"
                    f"   –¶–µ–Ω–∞: {product.price/100} {product.currency}\n\n"
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
                keyboard.append([
                    InlineKeyboardButton(
                        f"‚úèÔ∏è {product.name[:20]}...", 
                        callback_data=f"edit_product_{str(product.id)[:8]}"
                    ),
                    InlineKeyboardButton(
                        "üóëÔ∏è", 
                        callback_data=f"delete_product_{str(product.id)[:8]}"
                    )
                ])
            
            keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç", callback_data="add_product")])
            keyboard.append([InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_products")])
            keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                products_text,
                parse_mode="HTML",
                reply_markup=reply_markup
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {e}")
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤",
            parse_mode="HTML"
        )


async def admin_warmup_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≥—Ä–µ–≤–∞."""
    query = update.callback_query
    await query.answer()
    
    try:
        async with get_db_session() as session:
            warmup_service = WarmupService(session)
            
            scenarios = await warmup_service.get_all_scenarios()
            active_users = await warmup_service.get_active_warmup_users()
            
            warmup_text = f"üî• <b>–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥—Ä–µ–≤–∞</b>\n\n"
            warmup_text += f"üìã <b>–°—Ü–µ–Ω–∞—Ä–∏–µ–≤:</b> {len(scenarios)}\n"
            warmup_text += f"üë• <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–≥—Ä–µ–≤–æ–≤:</b> {len(active_users)}\n\n"
            
            keyboard = []
            
            for scenario in scenarios[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                status = "‚úÖ" if scenario.is_active else "‚ùå"
                warmup_text += (
                    f"{status} <b>{scenario.name}</b>\n"
                    f"   –°–æ–æ–±—â–µ–Ω–∏–π: {len(scenario.messages)}\n\n"
                )
                
                # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å—Ü–µ–Ω–∞—Ä–∏—è
                keyboard.append([
                    InlineKeyboardButton(
                        f"üìù {scenario.name[:25]}...", 
                        callback_data=f"view_scenario_{str(scenario.id)[:8]}"
                    )
                ])
            
            keyboard.append([InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π", callback_data="add_scenario")])
            keyboard.append([InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_warmup")])
            keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                warmup_text,
                parse_mode="HTML",
                reply_markup=reply_markup
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–≥—Ä–µ–≤–µ: {e}")
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–≥—Ä–µ–≤–µ",
            parse_mode="HTML"
        )


async def admin_back_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥."""
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")],
        [InlineKeyboardButton("üéÅ –õ–∏–¥-–º–∞–≥–Ω–∏—Ç—ã", callback_data="admin_lead_magnets")],
        [InlineKeyboardButton("üí∞ –¢—Ä–∏–ø–≤–∞–π–µ—Ä—ã", callback_data="admin_products")],
        [InlineKeyboardButton("üî• –ü—Ä–æ–≥—Ä–µ–≤", callback_data="admin_warmup")],
        [InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∏", callback_data="admin_mailings")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üë®‚Äçüíº <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å LeadBot</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        parse_mode="HTML",
        reply_markup=reply_markup
    )


async def view_scenario_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è –ø—Ä–æ–≥—Ä–µ–≤–∞."""
    query = update.callback_query
    await query.answer()
    
    scenario_id = query.data.split("_")[-1]
    
    try:
        async with get_db_session() as session:
            warmup_service = WarmupService(session)
            scenario = await warmup_service.get_scenario_by_id(scenario_id)
            
            if not scenario:
                await query.edit_message_text("‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if scenario.is_active else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
            
            scenario_text = f"üî• <b>–°—Ü–µ–Ω–∞—Ä–∏–π: {scenario.name}</b>\n\n"
            scenario_text += f"<b>–°—Ç–∞—Ç—É—Å:</b> {status}\n"
            scenario_text += f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {scenario.description or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\n"
            scenario_text += f"<b>–°–æ–æ–±—â–µ–Ω–∏–π:</b> {len(scenario.messages)}\n\n"
            
            scenario_text += "<b>üìã –°–æ–æ–±—â–µ–Ω–∏—è:</b>\n\n"
            
            for i, msg in enumerate(scenario.messages[:5], 1):
                msg_type = msg.message_type.value if hasattr(msg.message_type, 'value') else msg.message_type
                scenario_text += f"{i}. {msg.title} ({msg_type})\n"
                scenario_text += f"   ‚è± –ó–∞–¥–µ—Ä–∂–∫–∞: {msg.delay_hours}—á\n\n"
            
            if len(scenario.messages) > 5:
                scenario_text += f"... –∏ –µ—â–µ {len(scenario.messages) - 5} —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"
            
            keyboard = [
                [
                    InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_scenario_{scenario_id}"),
                    InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_scenario_{scenario_id}")
                ],
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_warmup")]
            ]
            
            await query.edit_message_text(
                scenario_text,
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è")


async def add_scenario_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è."""
    query = update.callback_query
    await query.answer()
    
    context.user_data['creating_scenario'] = True
    
    await query.edit_message_text(
        "‚ûï <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è –ø—Ä–æ–≥—Ä–µ–≤–∞</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è:",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_warmup")
        ]])
    )


async def edit_scenario_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è."""
    query = update.callback_query
    await query.answer()
    
    scenario_id = query.data.split("_")[-1]
    
    try:
        async with get_db_session() as session:
            warmup_service = WarmupService(session)
            scenario = await warmup_service.get_scenario_by_id(scenario_id)
            
            if not scenario:
                await query.edit_message_text("‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            keyboard = [
                [InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_scenario_name_{scenario_id}")],
                [InlineKeyboardButton("üìÑ –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_scenario_desc_{scenario_id}")],
                [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data=f"add_scenario_msg_{scenario_id}")],
                [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π", callback_data=f"list_scenario_msgs_{scenario_id}")],
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"view_scenario_{scenario_id}")]
            ]
            
            await query.edit_message_text(
                f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è</b>\n\n"
                f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {scenario.name}\n"
                f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {scenario.description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                f"<b>–°–æ–æ–±—â–µ–Ω–∏–π:</b> {len(scenario.messages)}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è")


async def edit_scenario_name_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è."""
    query = update.callback_query
    await query.answer()
    
    scenario_id = query.data.split("_")[-1]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞
    context.user_data['action'] = 'edit_scenario_name'
    context.user_data['scenario_id'] = scenario_id
    
    await query.edit_message_text(
        "üìù <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è:",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"edit_scenario_{scenario_id}")
        ]])
    )


async def edit_scenario_desc_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è."""
    query = update.callback_query
    await query.answer()
    
    scenario_id = query.data.split("_")[-1]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞
    context.user_data['action'] = 'edit_scenario_description'
    context.user_data['scenario_id'] = scenario_id
    
    await query.edit_message_text(
        "üìÑ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è:",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"edit_scenario_{scenario_id}")
        ]])
    )


async def list_scenario_msgs_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å—Ü–µ–Ω–∞—Ä–∏—è."""
    query = update.callback_query
    await query.answer()
    
    scenario_id = query.data.split("_")[-1]
    
    try:
        async with get_db_session() as session:
            warmup_service = WarmupService(session)
            scenario = await warmup_service.get_scenario_by_id(scenario_id)
            
            if not scenario:
                await query.edit_message_text("‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            if not scenario.messages:
                await query.edit_message_text(
                    "üìã <b>–°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π</b>\n\n"
                    "–í —Å—Ü–µ–Ω–∞—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π.\n"
                    "–ù–∞–∂–º–∏—Ç–µ '–î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ' –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è.",
                    parse_mode="HTML",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"edit_scenario_{scenario_id}")
                    ]])
                )
                return
            
            messages_text = f"üìã <b>–°–æ–æ–±—â–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è: {scenario.name}</b>\n\n"
            keyboard = []
            
            for msg in sorted(scenario.messages, key=lambda x: x.order):
                msg_type = msg.message_type.value if hasattr(msg.message_type, 'value') else msg.message_type
                msg_text_short = msg.text[:50] + "..." if len(msg.text) > 50 else msg.text
                
                messages_text += (
                    f"<b>{msg.order}.</b> {msg_type}\n"
                    f"   –ó–∞–¥–µ—Ä–∂–∫–∞: {msg.delay_hours}—á\n"
                    f"   –¢–µ–∫—Å—Ç: {msg_text_short}\n\n"
                )
                
                msg_id_short = str(msg.id)[:8]
                keyboard.append([
                    InlineKeyboardButton(
                        f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å {msg.order}", 
                        callback_data=f"edit_msg_{msg_id_short}"
                    ),
                    InlineKeyboardButton(
                        f"üóë –£–¥–∞–ª–∏—Ç—å {msg.order}", 
                        callback_data=f"delete_msg_{msg_id_short}"
                    )
                ])
            
            keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"edit_scenario_{scenario_id}")])
            
            await query.edit_message_text(
                messages_text,
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–ø–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π")


async def add_scenario_msg_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å—Ü–µ–Ω–∞—Ä–∏–π."""
    query = update.callback_query
    await query.answer()
    
    scenario_id = query.data.split("_")[-1]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    context.user_data['action'] = 'add_scenario_message_step1'
    context.user_data['scenario_id'] = scenario_id
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
    message_types = [
        ("üéâ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ", "welcome"),
        ("‚ö†Ô∏è –ë–æ–ª–µ–≤–∞—è —Ç–æ—á–∫–∞", "pain_point"),
        ("‚ú® –†–µ—à–µ–Ω–∏–µ", "solution"),
        ("‚≠ê –°–æ—Ü–∏–∞–ª—å–Ω–æ–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ", "social_proof"),
        ("üéÅ –û—Ñ—Ñ–µ—Ä", "offer"),
        ("üìû –î–æ–∂–∏–º", "follow_up")
    ]
    
    keyboard = [
        [InlineKeyboardButton(name, callback_data=f"msg_type_{msg_type}")]
        for name, msg_type in message_types
    ]
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"edit_scenario_{scenario_id}")])
    
    await query.edit_message_text(
        "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è</b>\n\n"
        "–®–∞–≥ 1 –∏–∑ 4: –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è:",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def msg_type_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    query = update.callback_query
    await query.answer()
    
    msg_type = query.data.split("_")[-1]
    scenario_id = context.user_data.get('scenario_id')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
    context.user_data['message_type'] = msg_type
    context.user_data['action'] = 'add_scenario_message_step2'
    
    await query.edit_message_text(
        "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è</b>\n\n"
        f"–¢–∏–ø: {msg_type}\n\n"
        "–®–∞–≥ 2 –∏–∑ 4: –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"edit_scenario_{scenario_id}")
        ]])
    )


async def delete_scenario_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è."""
    query = update.callback_query
    await query.answer()
    
    scenario_id = query.data.split("_")[-1]
    
    try:
        async with get_db_session() as session:
            warmup_service = WarmupService(session)
            scenario = await warmup_service.get_scenario_by_id(scenario_id)
            
            if not scenario:
                await query.edit_message_text("‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            await query.edit_message_text(
                f"‚ùì <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n"
                f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π <b>{scenario.name}</b>?\n\n"
                f"‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([
                    [
                        InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_scenario_{scenario_id}"),
                        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"view_scenario_{scenario_id}")
                    ]
                ])
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è")


async def confirm_delete_scenario_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è."""
    query = update.callback_query
    await query.answer()
    
    scenario_id = query.data.split("_")[-1]
    
    try:
        async with get_db_session() as session:
            warmup_service = WarmupService(session)
            success = await warmup_service.delete_scenario(scenario_id)
            
            if success:
                await query.edit_message_text(
                    "‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω",
                    parse_mode="HTML",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_warmup")
                    ]])
                )
            else:
                await query.edit_message_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π",
                    parse_mode="HTML",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_warmup")
                    ]])
                )
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è")


async def edit_product_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞."""
    query = update.callback_query
    await query.answer()
    
    product_id = query.data.split("_")[-1]
    
    try:
        async with get_db_session() as session:
            product_service = ProductService(session)
            product = await product_service.get_product_by_id(product_id)
            
            if not product:
                await query.edit_message_text("‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            product_type = product.type.value if hasattr(product.type, 'value') else product.type
            
            keyboard = [
                [InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_product_name_{product_id}")],
                [InlineKeyboardButton("üìÑ –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_product_desc_{product_id}")],
                [InlineKeyboardButton("üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É", callback_data=f"edit_product_price_{product_id}")],
                [InlineKeyboardButton("üîó –ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data=f"edit_product_url_{product_id}")],
                [InlineKeyboardButton("üìã –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –æ—Ñ—Ñ–µ—Ä–∞", callback_data=f"edit_product_offer_{product_id}")],
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_products")]
            ]
            
            await query.edit_message_text(
                f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞</b>\n\n"
                f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {product.name}\n"
                f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {product.description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                f"<b>–¢–∏–ø:</b> {product_type}\n"
                f"<b>–¶–µ–Ω–∞:</b> {product.price/100} {product.currency}\n"
                f"<b>–°—Å—ã–ª–∫–∞:</b> {product.payment_url or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
                f"<b>–°—Ç–∞—Ç—É—Å:</b> {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if product.is_active else '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∞")


async def edit_product_name_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞."""
    query = update.callback_query
    await query.answer()
    
    product_id = query.data.split("_")[-1]
    
    context.user_data['action'] = 'edit_product_name'
    context.user_data['product_id'] = product_id
    
    await query.edit_message_text(
        "üìù <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"edit_product_{product_id}")
        ]])
    )


async def edit_product_desc_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞."""
    query = update.callback_query
    await query.answer()
    
    product_id = query.data.split("_")[-1]
    
    context.user_data['action'] = 'edit_product_description'
    context.user_data['product_id'] = product_id
    
    await query.edit_message_text(
        "üìÑ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"edit_product_{product_id}")
        ]])
    )


async def edit_product_price_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –ø—Ä–æ–¥—É–∫—Ç–∞."""
    query = update.callback_query
    await query.answer()
    
    product_id = query.data.split("_")[-1]
    
    context.user_data['action'] = 'edit_product_price'
    context.user_data['product_id'] = product_id
    
    await query.edit_message_text(
        "üí∞ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –ø—Ä–æ–¥—É–∫—Ç–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 499 –∏–ª–∏ 1990):",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"edit_product_{product_id}")
        ]])
    )


async def edit_product_url_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∞."""
    query = update.callback_query
    await query.answer()
    
    product_id = query.data.split("_")[-1]
    
    context.user_data['action'] = 'edit_product_url'
    context.user_data['product_id'] = product_id
    
    await query.edit_message_text(
        "üîó <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã:",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"edit_product_{product_id}")
        ]])
    )


async def edit_product_offer_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –æ—Ñ—Ñ–µ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞."""
    query = update.callback_query
    await query.answer()
    
    product_id = query.data.split("_")[-1]
    
    context.user_data['action'] = 'edit_product_offer'
    context.user_data['product_id'] = product_id
    
    await query.edit_message_text(
        "üìã <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –æ—Ñ—Ñ–µ—Ä–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –æ—Ñ—Ñ–µ—Ä–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –ø—Ä–æ–¥—É–∫—Ç–∞:",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"edit_product_{product_id}")
        ]])
    )


async def delete_product_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞."""
    query = update.callback_query
    await query.answer()
    
    product_id = query.data.split("_")[-1]
    
    try:
        async with get_db_session() as session:
            product_service = ProductService(session)
            product = await product_service.get_product_by_id(product_id)
            
            if not product:
                await query.edit_message_text("‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            await query.edit_message_text(
                f"‚ùì <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n"
                f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç <b>{product.name}</b>?\n\n"
                f"‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([
                    [
                        InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_product_{product_id}"),
                        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_products")
                    ]
                ])
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞")


async def confirm_delete_product_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞."""
    query = update.callback_query
    await query.answer()
    
    product_id = query.data.split("_")[-1]
    
    try:
        async with get_db_session() as session:
            product_service = ProductService(session)
            success = await product_service.delete_product(product_id)
            
            if success:
                await query.edit_message_text(
                    "‚úÖ –ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω",
                    parse_mode="HTML",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_products")
                    ]])
                )
            else:
                await query.edit_message_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç",
                    parse_mode="HTML",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_products")
                    ]])
                )
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞")


async def add_product_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞."""
    query = update.callback_query
    await query.answer()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    product_types = [
        ("üéØ –¢—Ä–∏–ø–≤–∞–π–µ—Ä", "tripwire"),
        ("üìö –ö—É—Ä—Å", "course"),
        ("üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", "consultation"),
        ("‚≠ê –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ç", "main_product"),
        ("‚¨ÜÔ∏è Upsell", "upsell"),
        ("‚¨áÔ∏è Downsell", "downsell")
    ]
    
    context.user_data['action'] = 'add_product_step1'
    
    keyboard = [
        [InlineKeyboardButton(name, callback_data=f"product_type_{p_type}")]
        for name, p_type in product_types
    ]
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_products")])
    
    await query.edit_message_text(
        "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞</b>\n\n"
        "–®–∞–≥ 1 –∏–∑ 5: –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞:",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def product_type_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø—Ä–æ–¥—É–∫—Ç–∞."""
    query = update.callback_query
    await query.answer()
    
    product_type = query.data.split("_")[-1]
    
    context.user_data['product_type'] = product_type
    context.user_data['action'] = 'add_product_step2'
    
    await query.edit_message_text(
        "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞</b>\n\n"
        f"–¢–∏–ø: {product_type}\n\n"
        "–®–∞–≥ 2 –∏–∑ 5: –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_products")
        ]])
    )


async def edit_magnet_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞."""
    query = update.callback_query
    await query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–∑ callback_data
    magnet_id = query.data.split("_")[-1]
    
    try:
        async with get_db_session() as session:
            lead_magnet_service = LeadMagnetService(session)
            magnet = await lead_magnet_service.get_lead_magnet_by_id(magnet_id)
            
            if not magnet:
                await query.edit_message_text("‚ùå –õ–∏–¥-–º–∞–≥–Ω–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            magnet_type = magnet.type.value if hasattr(magnet.type, 'value') else magnet.type
            status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if magnet.is_active else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
            
            edit_text = f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞</b>\n\n"
            edit_text += f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {magnet.name}\n"
            edit_text += f"<b>–¢–∏–ø:</b> {magnet_type}\n"
            edit_text += f"<b>–°—Ç–∞—Ç—É—Å:</b> {status}\n"
            edit_text += f"<b>URL:</b> {magnet.file_url[:50]}...\n\n"
            edit_text += "–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:"
            
            keyboard = [
                [InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_magnet_name_{magnet_id}")],
                [InlineKeyboardButton("üîó –ò–∑–º–µ–Ω–∏—Ç—å URL", callback_data=f"edit_magnet_url_{magnet_id}")],
                [InlineKeyboardButton("üìÑ –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_magnet_desc_{magnet_id}")],
                [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"toggle_magnet_{magnet_id}")],
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞–º", callback_data="admin_lead_magnets")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                edit_text,
                parse_mode="HTML",
                reply_markup=reply_markup
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞")


async def delete_magnet_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞."""
    query = update.callback_query
    await query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–∑ callback_data
    magnet_id = query.data.split("_")[-1]
    
    try:
        async with get_db_session() as session:
            lead_magnet_service = LeadMagnetService(session)
            magnet = await lead_magnet_service.get_lead_magnet_by_id(magnet_id)
            
            if not magnet:
                await query.edit_message_text("‚ùå –õ–∏–¥-–º–∞–≥–Ω–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
            delete_text = f"üóëÔ∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n"
            delete_text += f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ª–∏–¥-–º–∞–≥–Ω–∏—Ç:\n"
            delete_text += f"<b>¬´{magnet.name}¬ª</b>\n\n"
            delete_text += "‚ö†Ô∏è <i>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!</i>"
            
            keyboard = [
                [
                    InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_magnet_{magnet_id}"),
                    InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_lead_magnets")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                delete_text,
                parse_mode="HTML",
                reply_markup=reply_markup
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞")


async def confirm_delete_magnet_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞."""
    query = update.callback_query
    await query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–∑ callback_data
    magnet_id = query.data.split("_")[-1]
    
    try:
        async with get_db_session() as session:
            lead_magnet_service = LeadMagnetService(session)
            success = await lead_magnet_service.delete_lead_magnet(magnet_id)
            
            if success:
                await query.edit_message_text(
                    "‚úÖ –õ–∏–¥-–º–∞–≥–Ω–∏—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!",
                    parse_mode="HTML"
                )
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–æ–≤ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
                import asyncio
                await asyncio.sleep(2)
                await admin_lead_magnets_handler(update, context)
            else:
                await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ª–∏–¥-–º–∞–≥–Ω–∏—Ç")
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞")


# –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
admin_handler = CommandHandler("admin", admin_command_handler)
admin_stats_callback = CallbackQueryHandler(admin_stats_handler, pattern="^admin_stats$")
admin_users_callback = CallbackQueryHandler(admin_users_handler, pattern="^admin_users$")
admin_lead_magnets_callback = CallbackQueryHandler(admin_lead_magnets_handler, pattern="^admin_lead_magnets$")
admin_products_callback = CallbackQueryHandler(admin_products_handler, pattern="^admin_products$")
admin_warmup_callback = CallbackQueryHandler(admin_warmup_handler, pattern="^admin_warmup$")
admin_back_callback = CallbackQueryHandler(admin_back_handler, pattern="^admin_back$")

async def edit_magnet_name_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞."""
    query = update.callback_query
    await query.answer()
    
    magnet_id = query.data.split("_")[-1]
    context.user_data['editing_magnet_name'] = magnet_id
    
    await query.edit_message_text(
        "üìù <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
        parse_mode="HTML"
    )


async def edit_magnet_url_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è URL –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞."""
    query = update.callback_query
    await query.answer()
    
    magnet_id = query.data.split("_")[-1]
    context.user_data['editing_magnet_url'] = magnet_id
    
    await query.edit_message_text(
        "üîó <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ URL –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π URL (Google Sheets, PDF –∏–ª–∏ —Å—Å—ã–ª–∫—É):",
        parse_mode="HTML"
    )


async def edit_magnet_desc_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞."""
    query = update.callback_query
    await query.answer()
    
    magnet_id = query.data.split("_")[-1]
    context.user_data['editing_magnet_desc'] = magnet_id
    
    await query.edit_message_text(
        "üìÑ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:",
        parse_mode="HTML"
    )


async def reset_all_lead_magnets_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–±—Ä–æ—Å–∞ –≤—Å–µ—Ö –≤—ã–¥–∞–Ω–Ω—ã—Ö –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–æ–≤."""
    query = update.callback_query
    await query.answer()
    
    try:
        async with get_db_session() as session:
            user_service = UserService(session)
            lead_magnet_service = LeadMagnetService(session)
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users = await user_service.get_all_users()
            
            reset_count = 0
            
            for user in users:
                has_magnet = await lead_magnet_service.user_has_lead_magnet(str(user.id))
                if has_magnet:
                    # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –æ –≤—ã–¥–∞–Ω–Ω—ã—Ö –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞—Ö
                    from app.models.lead_magnet import UserLeadMagnet
                    from sqlalchemy import delete
                    
                    await session.execute(
                        delete(UserLeadMagnet).where(UserLeadMagnet.user_id == str(user.id))
                    )
                    reset_count += 1
            
            await session.commit()
            
            await query.edit_message_text(
                f"‚úÖ <b>–°–±—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n"
                f"–°–±—Ä–æ—à–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –æ –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞—Ö –¥–ª—è {reset_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç –ø–æ–ª—É—á–∏—Ç—å –ª–∏–¥-–º–∞–≥–Ω–∏—Ç –∑–∞–Ω–æ–≤–æ.",
                parse_mode="HTML"
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–æ–≤: {e}")
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–æ–≤",
            parse_mode="HTML"
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–æ–≤
edit_magnet_callback = CallbackQueryHandler(edit_magnet_handler, pattern="^edit_magnet_")
delete_magnet_callback = CallbackQueryHandler(delete_magnet_handler, pattern="^delete_magnet_")
confirm_delete_magnet_callback = CallbackQueryHandler(confirm_delete_magnet_handler, pattern="^confirm_delete_magnet_")
edit_magnet_name_callback = CallbackQueryHandler(edit_magnet_name_handler, pattern="^edit_magnet_name_")
edit_magnet_url_callback = CallbackQueryHandler(edit_magnet_url_handler, pattern="^edit_magnet_url_")
edit_magnet_desc_callback = CallbackQueryHandler(edit_magnet_desc_handler, pattern="^edit_magnet_desc_")
reset_all_lead_magnets_callback = CallbackQueryHandler(reset_all_lead_magnets_handler, pattern="^reset_all_lead_magnets$")


async def admin_mailings_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–¥–µ–ª–∞ —Ä–∞—Å—Å—ã–ª–æ–∫."""
    query = update.callback_query
    await query.answer()
    
    try:
        async with get_db_session() as session:
            from app.services.mailing_service import MailingService
            
            mailing_service = MailingService(session)
            
            mailings = await mailing_service.get_all_mailings()
            total_users = await mailing_service.get_all_users_count()
            
            mailings_text = f"üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∏ ({len(mailings)}):</b>\n\n"
            mailings_text += f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n\n"
            
            keyboard = []
            
            for mailing in mailings[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                status_emoji = {
                    "draft": "üìù",
                    "scheduled": "‚è∞",
                    "sending": "üì§",
                    "completed": "‚úÖ",
                    "failed": "‚ùå"
                }.get(mailing.status, "‚ùì")
                
                mailings_text += (
                    f"{status_emoji} <b>{mailing.name}</b>\n"
                    f"   –ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {mailing.total_recipients}\n"
                    f"   –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {mailing.sent_count}/{mailing.total_recipients}\n"
                    f"   –°—Ç–∞—Ç—É—Å: {mailing.status}\n\n"
                )
                
                # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–æ–π
                mailing_id_short = str(mailing.id)[:8]
                
                if mailing.status in ["draft", "scheduled"]:
                    keyboard.append([
                        InlineKeyboardButton(
                            f"üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", 
                            callback_data=f"send_mailing_{mailing_id_short}"
                        ),
                        InlineKeyboardButton(
                            f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", 
                            callback_data=f"edit_mailing_{mailing_id_short}"
                        ),
                        InlineKeyboardButton(
                            f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", 
                            callback_data=f"delete_mailing_{mailing_id_short}"
                        )
                    ])
                elif mailing.status == "completed":
                    keyboard.append([
                        InlineKeyboardButton(
                            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", 
                            callback_data=f"mailing_stats_{mailing_id_short}"
                        ),
                        InlineKeyboardButton(
                            f"üîÑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–Ω–æ–≤–∞", 
                            callback_data=f"resend_mailing_{mailing_id_short}"
                        ),
                        InlineKeyboardButton(
                            f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", 
                            callback_data=f"delete_mailing_{mailing_id_short}"
                        )
                    ])
                elif mailing.status == "failed":
                    keyboard.append([
                        InlineKeyboardButton(
                            f"üîÑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–Ω–æ–≤–∞", 
                            callback_data=f"resend_mailing_{mailing_id_short}"
                        ),
                        InlineKeyboardButton(
                            f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", 
                            callback_data=f"edit_mailing_{mailing_id_short}"
                        ),
                        InlineKeyboardButton(
                            f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", 
                            callback_data=f"delete_mailing_{mailing_id_short}"
                        )
                    ])
            
            keyboard.append([InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="create_mailing")])
            keyboard.append([InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_mailings")])
            keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            try:
                await query.edit_message_text(
                    mailings_text,
                    parse_mode="HTML",
                    reply_markup=reply_markup
                )
            except Exception as edit_error:
                if "Message is not modified" in str(edit_error):
                    # –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —Ç–∞–∫–æ–µ –∂–µ, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
                    await query.answer()
                else:
                    raise edit_error
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫: {e}")
        try:
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫",
                parse_mode="HTML"
            )
        except Exception as edit_error:
            if "Message is not modified" not in str(edit_error):
                await query.answer()


async def create_mailing_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏."""
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text(
        "üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏:",
        parse_mode="HTML"
    )
    
    context.user_data['creating_mailing_name'] = True


async def send_mailing_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏."""
    query = update.callback_query
    await query.answer()
    
    mailing_id = query.data.split("_")[-1]
    
    try:
        async with get_db_session() as session:
            from app.services.mailing_service import MailingService
            
            mailing_service = MailingService(session)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
            mailing = await mailing_service.get_mailing_by_id(mailing_id)
            
            if not mailing:
                await query.edit_message_text(
                    "‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                    parse_mode="HTML"
                )
                return
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ –≤ —Å—Ç–∞—Ç—É—Å–µ draft
            if mailing.status == "draft":
                mailing = await mailing_service.prepare_mailing(mailing_id)
                
                if not mailing:
                    await query.edit_message_text(
                        "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏",
                        parse_mode="HTML"
                    )
                    return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
            await query.edit_message_text(
                f"üì§ <b>–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
                f"–†–∞—Å—Å—ã–ª–∫–∞: {mailing.name}\n"
                f"–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {mailing.total_recipients}\n\n"
                f"‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è...",
                parse_mode="HTML"
            )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –≤ —Ñ–æ–Ω–µ
            import asyncio
            asyncio.create_task(send_mailing_async(mailing_id, context.bot, query))
            
            await query.edit_message_text(
                f"üì§ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!</b>\n\n"
                f"–†–∞—Å—Å—ã–ª–∫–∞: {mailing.name}\n"
                f"–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {mailing.total_recipients}\n\n"
                f"‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...",
                parse_mode="HTML"
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏",
            parse_mode="HTML"
        )


async def send_mailing_async(mailing_id: str, bot, query) -> None:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏."""
    try:
        async with get_db_session() as session:
            from app.services.mailing_service import MailingService
            
            mailing_service = MailingService(session)
            mailing = await mailing_service.send_mailing(mailing_id, bot)
            
            if mailing:
                try:
                    await query.edit_message_text(
                        f"‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
                        f"–†–∞—Å—Å—ã–ª–∫–∞: {mailing.name}\n"
                        f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {mailing.sent_count} –∏–∑ {mailing.total_recipients}\n"
                        f"–û—à–∏–±–æ–∫: {mailing.failed_count}",
                        parse_mode="HTML"
                    )
                except Exception as edit_error:
                    if "Message is not modified" not in str(edit_error):
                        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {edit_error}")
            else:
                try:
                    await query.edit_message_text(
                        "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏",
                        parse_mode="HTML"
                    )
                except Exception as edit_error:
                    if "Message is not modified" not in str(edit_error):
                        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {edit_error}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
        try:
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏",
                parse_mode="HTML"
            )
        except:
            pass


async def resend_mailing_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏."""
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Ä–∞—Å—Å—ã–ª–∫–∏
    mailing_id = query.data.replace("resend_mailing_", "")
    
    try:
        async with get_db_session() as session:
            from app.services.mailing_service import MailingService
            
            mailing_service = MailingService(session)
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
            mailing = await mailing_service.reset_mailing(mailing_id)
            
            if mailing:
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–µ 8 —Å–∏–º–≤–æ–ª–æ–≤ UUID)
                mailing = await mailing_service.prepare_mailing(str(mailing.id)[:8])
                
                if mailing:
                    await query.edit_message_text(
                        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ <b>{mailing.name}</b> –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∞ –∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ\n\n"
                        f"–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {mailing.total_recipients}\n\n"
                        f"–ù–∞–∂–º–∏—Ç–µ ¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å¬ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏",
                        parse_mode="HTML",
                        reply_markup=InlineKeyboardMarkup([[
                            InlineKeyboardButton("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data=f"send_mailing_{str(mailing.id)[:8]}"),
                            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_mailings")
                        ]])
                    )
                else:
                    await query.edit_message_text(
                        "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏",
                        parse_mode="HTML",
                        reply_markup=InlineKeyboardMarkup([[
                            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_mailings")
                        ]])
                    )
            else:
                await query.edit_message_text(
                    "‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                    parse_mode="HTML",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_mailings")
                    ]])
                )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞: {e}",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_mailings")
            ]])
        )


async def edit_mailing_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏."""
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Ä–∞—Å—Å—ã–ª–∫–∏
    mailing_id = query.data.replace("edit_mailing_", "")
    
    try:
        async with get_db_session() as session:
            from app.services.mailing_service import MailingService
            
            mailing_service = MailingService(session)
            mailing = await mailing_service.get_mailing_by_id(mailing_id)
            
            if mailing:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
                context.user_data["editing_mailing_id"] = str(mailing.id)
                context.user_data["editing_mailing_field"] = "name"
                
                await query.edit_message_text(
                    f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
                    f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: <b>{mailing.name}</b>\n\n"
                    f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏:",
                    parse_mode="HTML",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_mailings")
                    ]])
                )
            else:
                await query.edit_message_text(
                    "‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                    parse_mode="HTML",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_mailings")
                    ]])
                )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞: {e}",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_mailings")
            ]])
        )


async def delete_mailing_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏."""
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Ä–∞—Å—Å—ã–ª–∫–∏
    mailing_id = query.data.replace("delete_mailing_", "")
    
    try:
        async with get_db_session() as session:
            from app.services.mailing_service import MailingService
            
            mailing_service = MailingService(session)
            mailing = await mailing_service.get_mailing_by_id(mailing_id)
            
            if mailing:
                # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
                await query.edit_message_text(
                    f"‚ùì <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n"
                    f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É <b>{mailing.name}</b>?\n\n"
                    f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!",
                    parse_mode="HTML",
                    reply_markup=InlineKeyboardMarkup([
                        [
                            InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_mailing_{str(mailing.id)[:8]}"),
                            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_mailings")
                        ]
                    ])
                )
            else:
                await query.edit_message_text(
                    "‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                    parse_mode="HTML",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_mailings")
                    ]])
                )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞: {e}",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_mailings")
            ]])
        )


async def confirm_delete_mailing_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏."""
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Ä–∞—Å—Å—ã–ª–∫–∏
    mailing_id = query.data.replace("confirm_delete_mailing_", "")
    
    try:
        async with get_db_session() as session:
            from app.services.mailing_service import MailingService
            
            mailing_service = MailingService(session)
            success = await mailing_service.delete_mailing(mailing_id)
            
            if success:
                await query.edit_message_text(
                    "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞",
                    parse_mode="HTML",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_mailings")
                    ]])
                )
            else:
                await query.edit_message_text(
                    "‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏",
                    parse_mode="HTML",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_mailings")
                    ]])
                )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞: {e}",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_mailings")
            ]])
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–æ–∫
admin_mailings_callback = CallbackQueryHandler(admin_mailings_handler, pattern="^admin_mailings$")
create_mailing_callback = CallbackQueryHandler(create_mailing_handler, pattern="^create_mailing$")
send_mailing_callback = CallbackQueryHandler(send_mailing_handler, pattern="^send_mailing_")
resend_mailing_callback = CallbackQueryHandler(resend_mailing_handler, pattern="^resend_mailing_")
edit_mailing_callback = CallbackQueryHandler(edit_mailing_handler, pattern="^edit_mailing_")
delete_mailing_callback = CallbackQueryHandler(delete_mailing_handler, pattern="^delete_mailing_")
confirm_delete_mailing_callback = CallbackQueryHandler(confirm_delete_mailing_handler, pattern="^confirm_delete_mailing_")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –ø—Ä–æ–≥—Ä–µ–≤–∞
view_scenario_callback = CallbackQueryHandler(view_scenario_handler, pattern="^view_scenario_")
add_scenario_callback = CallbackQueryHandler(add_scenario_handler, pattern="^add_scenario$")
edit_scenario_callback = CallbackQueryHandler(edit_scenario_handler, pattern="^edit_scenario_")
delete_scenario_callback = CallbackQueryHandler(delete_scenario_handler, pattern="^delete_scenario_")
confirm_delete_scenario_callback = CallbackQueryHandler(confirm_delete_scenario_handler, pattern="^confirm_delete_scenario_")
edit_scenario_name_callback = CallbackQueryHandler(edit_scenario_name_handler, pattern="^edit_scenario_name_")
edit_scenario_desc_callback = CallbackQueryHandler(edit_scenario_desc_handler, pattern="^edit_scenario_desc_")
list_scenario_msgs_callback = CallbackQueryHandler(list_scenario_msgs_handler, pattern="^list_scenario_msgs_")
add_scenario_msg_callback = CallbackQueryHandler(add_scenario_msg_handler, pattern="^add_scenario_msg_")
msg_type_callback = CallbackQueryHandler(msg_type_handler, pattern="^msg_type_")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤
edit_product_callback = CallbackQueryHandler(edit_product_handler, pattern="^edit_product_")
delete_product_callback = CallbackQueryHandler(delete_product_handler, pattern="^delete_product_")
confirm_delete_product_callback = CallbackQueryHandler(confirm_delete_product_handler, pattern="^confirm_delete_product_")
edit_product_name_callback = CallbackQueryHandler(edit_product_name_handler, pattern="^edit_product_name_")
edit_product_desc_callback = CallbackQueryHandler(edit_product_desc_handler, pattern="^edit_product_desc_")
edit_product_price_callback = CallbackQueryHandler(edit_product_price_handler, pattern="^edit_product_price_")
edit_product_url_callback = CallbackQueryHandler(edit_product_url_handler, pattern="^edit_product_url_")
edit_product_offer_callback = CallbackQueryHandler(edit_product_offer_handler, pattern="^edit_product_offer_")
add_product_callback = CallbackQueryHandler(add_product_handler, pattern="^add_product$")
product_type_callback = CallbackQueryHandler(product_type_handler, pattern="^product_type_")

