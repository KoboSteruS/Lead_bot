"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–≥—Ä–µ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.

–°–æ–¥–µ—Ä–∂–∏—Ç –ª–æ–≥–∏–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –≤ —Å–∏—Å—Ç–µ–º–µ –ø—Ä–æ–≥—Ä–µ–≤–∞.
"""

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CallbackQueryHandler
from loguru import logger

from app.services.user_service import UserService
from app.services.warmup_service import WarmupService
from app.services.product_service import ProductService
from app.services.followup_service import FollowUpService
from app.models import ProductType
from app.core.database import get_db_session


async def warmup_offer_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í–æ–π—Ç–∏ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É" –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –ø—Ä–æ–≥—Ä–µ–≤–∞.
    """
    query = update.callback_query
    user = query.from_user
    await query.answer()
    
    try:
        async with get_db_session() as session:
            user_service = UserService(session)
            product_service = ProductService(session)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            db_user = await user_service.get_user_by_telegram_id(user.id)
            if not db_user:
                await query.edit_message_text(
                    "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start",
                    parse_mode="HTML"
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–∏–ø–≤–∞–π–µ—Ä
            tripwire = await product_service.get_active_product_by_type(ProductType.TRIPWIRE)
            if not tripwire:
                await query.edit_message_text(
                    "‚ùå –¢—Ä–∏–ø–≤–∞–π–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    parse_mode="HTML"
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –æ—Ñ—Ñ–µ—Ä –¥–ª—è —Ç—Ä–∏–ø–≤–∞–π–µ—Ä–∞
            offer = await product_service.get_active_offer_for_product(tripwire.id.hex)
            if not offer:
                await query.edit_message_text(
                    "‚ùå –û—Ñ—Ñ–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    parse_mode="HTML"
                )
                return
            
            # –û—Ç–º–µ—á–∞–µ–º –ø–æ–∫–∞–∑ –æ—Ñ—Ñ–µ—Ä–∞
            await product_service.show_offer_to_user(str(db_user.id), offer.id.hex)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ñ–µ—Ä–æ–º
            price = offer.price if offer.price else tripwire.price
            price_rub = price / 100
            
            keyboard = [
                [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ–π", callback_data=f"payment_card_{tripwire.id.hex}")],
                [InlineKeyboardButton("üì± –°–ü–ë (Faster Payments)", callback_data=f"payment_spb_{tripwire.id.hex}")],
                [InlineKeyboardButton("üîó –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç –æ–ø–ª–∞—Ç—ã", url=tripwire.payment_url)] if tripwire.payment_url else [],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="warmup_info")]
            ]
            # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å–ø–∏—Å–∫–∏
            keyboard = [row for row in keyboard if row]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                offer.text,
                parse_mode="HTML",
                reply_markup=reply_markup
            )
            
            logger.info(f"–ü–æ–∫–∞–∑–∞–Ω –æ—Ñ—Ñ–µ—Ä —Ç—Ä–∏–ø–≤–∞–π–µ—Ä–∞ '{tripwire.name}' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –æ—Ñ—Ñ–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}: {e}")
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode="HTML"
        )


async def warmup_info_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ" –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –ø—Ä–æ–≥—Ä–µ–≤–∞.
    """
    query = update.callback_query
    user = query.from_user
    await query.answer()
    
    try:
        async with get_db_session() as session:
            user_service = UserService(session)
            warmup_service = WarmupService(session)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            db_user = await user_service.get_user_by_telegram_id(user.id)
            if not db_user:
                await query.edit_message_text(
                    "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start",
                    parse_mode="HTML"
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–µ–≤–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_warmup = await warmup_service.get_user_active_warmup(str(db_user.id))
            
            if user_warmup:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–æ–≥—Ä–µ–≤–∞
                info_text = (
                    "üìä <b>–í–ê–® –ü–†–û–ì–†–ï–°–° –í –°–ò–°–¢–ï–ú–ï</b>\n\n"
                    f"üéØ –¢–µ–∫—É—â–∏–π —à–∞–≥: {user_warmup.current_step + 1}\n"
                    f"üìÖ –ù–∞—á–∞—Ç: {user_warmup.started_at.strftime('%d.%m.%Y')}\n\n"
                    "üî• <b>–ß—Ç–æ –¥–∞–ª—å—à–µ:</b>\n"
                    "‚Ä¢ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã\n"
                    "‚Ä¢ –ü—Ä–∏–º–µ–Ω—è–π—Ç–µ –∑–Ω–∞–Ω–∏—è –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ\n"
                    "‚Ä¢ –ì–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ\n\n"
                    "üí° <b>–°–æ–≤–µ—Ç:</b> –ù–µ –ø—Ä–æ–ø—É—Å–∫–∞–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è - –∫–∞–∂–¥–æ–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –≤–∞—à–µ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è!"
                )
            else:
                # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ
                info_text = (
                    "üåü <b>–ü–†–û–ï–ö–¢ ¬´–û–°–ù–û–í–ê –ü–£–¢–ò¬ª</b>\n\n"
                    "üéØ <b>–ù–∞—à–∞ –º–∏—Å—Å–∏—è:</b>\n"
                    "–ü–æ–º–æ—á—å –ª—é–¥—è–º —Å–æ–∑–¥–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –ª–∏—á–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è –∏ –¥–æ—Å—Ç–∏—á—å —Å–≤–æ–∏—Ö —Ü–µ–ª–µ–π\n\n"
                    "üìö <b>–ß—Ç–æ –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º:</b>\n"
                    "‚Ä¢ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ä–∞–∑–≤–∏—Ç–∏—è\n"
                    "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥–∏–∫–∏ —É—Å–ø–µ—Ö–∞\n"
                    "‚Ä¢ –°–æ–æ–±—â–µ—Å—Ç–≤–æ –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤\n"
                    "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É\n\n"
                    "‚ú® –ù–∞—á–Ω–∏—Ç–µ —Å–≤–æ–π –ø—É—Ç—å –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º —É–∂–µ —Å–µ–≥–æ–¥–Ω—è!"
                )
            
            keyboard = [
                [InlineKeyboardButton("üì∫ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url="https://t.me/osnovaputi")],
                [InlineKeyboardButton("üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏", url="https://t.me/osnovaputi_support")],
                [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="back_to_start")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                info_text,
                parse_mode="HTML",
                reply_markup=reply_markup
            )
            
            logger.info(f"–ü–æ–∫–∞–∑–∞–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}: {e}")
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode="HTML"
        )


async def warmup_stop_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ–≥—Ä–µ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    """
    query = update.callback_query
    user = query.from_user
    await query.answer()
    
    try:
        async with get_db_session() as session:
            user_service = UserService(session)
            warmup_service = WarmupService(session)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            db_user = await user_service.get_user_by_telegram_id(user.id)
            if not db_user:
                await query.edit_message_text(
                    "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                    parse_mode="HTML"
                )
                return
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ–≤
            success = await warmup_service.stop_warmup_for_user(str(db_user.id))
            
            if success:
                stop_text = (
                    "‚èπÔ∏è <b>–ü—Ä–æ–≥—Ä–µ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>\n\n"
                    "–í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è.\n\n"
                    "–ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤, "
                    "–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start."
                )
            else:
                stop_text = (
                    "‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ–≤–∞ –∏–ª–∏ –æ–Ω —É–∂–µ –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–∞–Ω–µ–µ."
                )
            
            keyboard = [
                [InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_start")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                stop_text,
                parse_mode="HTML",
                reply_markup=reply_markup
            )
            
            logger.info(f"–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–æ–≥—Ä–µ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ–≥—Ä–µ–≤–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}")
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode="HTML"
        )


async def stop_followup_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è" –≤ –¥–æ–∂–∏–º–∞—Ö.
    """
    query = update.callback_query
    user = query.from_user
    await query.answer()
    
    try:
        async with get_db_session() as session:
            user_service = UserService(session)
            followup_service = FollowUpService(session)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            db_user = await user_service.get_user_by_telegram_id(user.id)
            if not db_user:
                await query.edit_message_text(
                    "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                    parse_mode="HTML"
                )
                return
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–æ–∂–∏–º
            success = await followup_service.stop_followup_for_user(str(db_user.id))
            
            if success:
                stop_text = (
                    "‚èπÔ∏è <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã</b>\n\n"
                    "–í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ.\n\n"
                    "–ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, "
                    "–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start."
                )
            else:
                stop_text = (
                    "‚ÑπÔ∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É–∂–µ –±—ã–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Ä–∞–Ω–µ–µ."
                )
            
            keyboard = [
                [InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_start")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                stop_text,
                parse_mode="HTML",
                reply_markup=reply_markup
            )
            
            logger.info(f"–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}")
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode="HTML"
        )


# –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
warmup_offer_callback = CallbackQueryHandler(warmup_offer_callback_handler, pattern="^warmup_offer$")
warmup_info_callback = CallbackQueryHandler(warmup_info_callback_handler, pattern="^warmup_info$")
warmup_stop_callback = CallbackQueryHandler(warmup_stop_callback_handler, pattern="^warmup_stop$")
stop_followup_callback = CallbackQueryHandler(stop_followup_callback_handler, pattern="^stop_followup$")
