"""
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.

–°–æ–¥–µ—Ä–∂–∏—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è.
"""

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CallbackQueryHandler, MessageHandler, filters, ConversationHandler
from loguru import logger

from app.core.database import get_db_session
from app.services import LeadMagnetService, ProductService, WarmupService
from app.models.lead_magnet import LeadMagnetType
from app.models.product import ProductType


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
(
    WAITING_MAGNET_NAME,
    WAITING_MAGNET_TYPE,
    WAITING_MAGNET_URL,
    WAITING_MAGNET_TEXT,
    WAITING_PRODUCT_NAME,
    WAITING_PRODUCT_PRICE,
    WAITING_PRODUCT_URL
) = range(7)


async def toggle_magnet_status_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞."""
    query = update.callback_query
    await query.answer()
    
    try:
        callback_data = query.data
        magnet_id = callback_data.split("_")[-1]
        
        async with get_db_session() as session:
            lead_magnet_service = LeadMagnetService(session)
            
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞
            updated_magnet = await lead_magnet_service.toggle_lead_magnet_status(magnet_id)
            
            if updated_magnet:
                status = "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω" if updated_magnet.is_active else "–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
                await query.edit_message_text(
                    f"‚úÖ –õ–∏–¥-–º–∞–≥–Ω–∏—Ç ¬´{updated_magnet.name}¬ª {status}!\n\n"
                    f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é.",
                    parse_mode="HTML"
                )
            else:
                await query.edit_message_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞",
                    parse_mode="HTML"
                )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")


async def add_lead_magnet_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞."""
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text(
        "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞</b>\n\n"
        "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞:\n"
        "(–ù–∞–ø—Ä–∏–º–µ—Ä: '7-–¥–Ω–µ–≤–Ω—ã–π —Ç—Ä–µ–∫–µ—Ä –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã')",
        parse_mode="HTML"
    )
    
    context.user_data['adding_magnet'] = True


async def edit_warmup_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ–≤–∞."""
    query = update.callback_query
    await query.answer()
    
    try:
        callback_data = query.data
        message_id = callback_data.split("_")[-1]
        
        await query.edit_message_text(
            "‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ–≤–∞</b>\n\n"
            "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:",
            parse_mode="HTML"
        )
        
        context.user_data['editing_warmup_message'] = message_id
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ–≤–∞: {e}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞")


async def text_input_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏."""
    user = update.effective_user
    message = update.message
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞
    from config.settings import settings
    if user.id not in settings.admin_ids_list:
        return
    
    text = message.text
    action = context.user_data.get('action')
    
    try:
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ - –Ω–∞–∑–≤–∞–Ω–∏–µ
        if context.user_data.get('editing_mailing_field') == 'name':
            mailing_id = context.user_data.get('editing_mailing_id')
            
            async with get_db_session() as session:
                from app.services.mailing_service import MailingService
                mailing_service = MailingService(session)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
                mailing = await mailing_service.update_mailing(mailing_id, name=text)
                
                if mailing:
                    await message.reply_text(
                        f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: <b>{text}</b>\n\n"
                        f"–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:",
                        parse_mode="HTML"
                    )
                    context.user_data['editing_mailing_field'] = 'text'
                else:
                    await message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è", parse_mode="HTML")
                    context.user_data.pop('editing_mailing_id', None)
                    context.user_data.pop('editing_mailing_field', None)
            return
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ - —Ç–µ–∫—Å—Ç
        if context.user_data.get('editing_mailing_field') == 'text':
            mailing_id = context.user_data.get('editing_mailing_id')
            
            async with get_db_session() as session:
                from app.services.mailing_service import MailingService
                mailing_service = MailingService(session)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                mailing = await mailing_service.update_mailing(mailing_id, message_text=text)
                
                if mailing:
                    await message.reply_text(
                        f"‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!</b>\n\n"
                        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {mailing.name}\n"
                        f"–¢–µ–∫—Å—Ç: {mailing.message_text[:100]}...",
                        parse_mode="HTML"
                    )
                else:
                    await message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞", parse_mode="HTML")
            
            context.user_data.pop('editing_mailing_id', None)
            context.user_data.pop('editing_mailing_field', None)
            return
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è –ø—Ä–æ–≥—Ä–µ–≤–∞
        if context.user_data.get('creating_scenario'):
            scenario_name = text
            context.user_data['scenario_name'] = scenario_name
            context.user_data['creating_scenario'] = False
            context.user_data['creating_scenario_description'] = True
            
            await message.reply_text(
                f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: <b>{scenario_name}</b>\n\n"
                f"–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è:",
                parse_mode="HTML"
            )
            return
        
        # –û–ø–∏—Å–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è
        if context.user_data.get('creating_scenario_description'):
            scenario_description = text
            scenario_name = context.user_data.get('scenario_name')
            
            async with get_db_session() as session:
                from app.services.warmup_service import WarmupService
                warmup_service = WarmupService(session)
                
                # –°–æ–∑–¥–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π (is_active —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ True)
                scenario = await warmup_service.create_scenario(
                    name=scenario_name,
                    description=scenario_description
                )
                
                if scenario:
                    await message.reply_text(
                        f"‚úÖ <b>–°—Ü–µ–Ω–∞—Ä–∏–π —Å–æ–∑–¥–∞–Ω!</b>\n\n"
                        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {scenario.name}\n"
                        f"–û–ø–∏—Å–∞–Ω–∏–µ: {scenario.description}\n\n"
                        f"‚ö†Ô∏è –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å—Ü–µ–Ω–∞—Ä–∏–π —á–µ—Ä–µ–∑ —Å–∫—Ä–∏–ø—Ç—ã –∏–ª–∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.\n\n"
                        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é.",
                        parse_mode="HTML"
                    )
                else:
                    await message.reply_text(
                        "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è",
                        parse_mode="HTML"
                    )
            
            context.user_data.clear()
            return
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è
        if action == 'edit_scenario_name':
            scenario_id = context.user_data.get('scenario_id')
            
            async with get_db_session() as session:
                from app.services.warmup_service import WarmupService
                warmup_service = WarmupService(session)
                
                scenario = await warmup_service.get_scenario_by_id(scenario_id)
                if scenario:
                    scenario.name = text
                    await session.commit()
                    
                    await message.reply_text(
                        f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {text}\n\n"
                        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é.",
                        parse_mode="HTML"
                    )
                else:
                    await message.reply_text("‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω", parse_mode="HTML")
            
            context.user_data.clear()
            return
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è
        if action == 'edit_scenario_description':
            scenario_id = context.user_data.get('scenario_id')
            
            async with get_db_session() as session:
                from app.services.warmup_service import WarmupService
                warmup_service = WarmupService(session)
                
                scenario = await warmup_service.get_scenario_by_id(scenario_id)
                if scenario:
                    scenario.description = text
                    await session.commit()
                    
                    await message.reply_text(
                        f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ\n\n"
                        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é.",
                        parse_mode="HTML"
                    )
                else:
                    await message.reply_text("‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω", parse_mode="HTML")
            
            context.user_data.clear()
            return
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å—Ü–µ–Ω–∞—Ä–∏–π - —à–∞–≥ 2 (—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è)
        if action == 'add_scenario_message_step2':
            context.user_data['message_text'] = text
            context.user_data['action'] = 'add_scenario_message_step3'
            
            await message.reply_text(
                f"‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è</b>\n\n"
                f"–®–∞–≥ 3 –∏–∑ 4: –í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–µ—Ä–∂–∫—É –≤ —á–∞—Å–∞—Ö –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
                f"(–Ω–∞–ø—Ä–∏–º–µ—Ä: 24 –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ —Å—É—Ç–∫–∏):",
                parse_mode="HTML"
            )
            return
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å—Ü–µ–Ω–∞—Ä–∏–π - —à–∞–≥ 3 (–∑–∞–¥–µ—Ä–∂–∫–∞)
        if action == 'add_scenario_message_step3':
            try:
                delay_hours = int(text)
                context.user_data['delay_hours'] = delay_hours
                context.user_data['action'] = 'add_scenario_message_step4'
                
                await message.reply_text(
                    f"‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è</b>\n\n"
                    f"–®–∞–≥ 4 –∏–∑ 4: –í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏\n"
                    f"(–Ω–∞–ø—Ä–∏–º–µ—Ä: 1 –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è):",
                    parse_mode="HTML"
                )
            except ValueError:
                await message.reply_text(
                    "‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤)",
                    parse_mode="HTML"
                )
            return
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å—Ü–µ–Ω–∞—Ä–∏–π - —à–∞–≥ 4 (–ø–æ—Ä—è–¥–æ–∫)
        if action == 'add_scenario_message_step4':
            try:
                order = int(text)
                scenario_id = context.user_data.get('scenario_id')
                message_type = context.user_data.get('message_type')
                message_text = context.user_data.get('message_text')
                delay_hours = context.user_data.get('delay_hours')
                
                async with get_db_session() as session:
                    from app.services.warmup_service import WarmupService
                    from app.models.warmup import WarmupMessage
                    
                    warmup_service = WarmupService(session)
                    scenario = await warmup_service.get_scenario_by_id(scenario_id)
                    
                    if scenario:
                        new_message = WarmupMessage(
                            scenario_id=scenario.id,
                            message_type=message_type,
                            text=message_text,
                            delay_hours=delay_hours,
                            order=order,
                            is_active=True
                        )
                        
                        session.add(new_message)
                        await session.commit()
                        
                        await message.reply_text(
                            f"‚úÖ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!</b>\n\n"
                            f"–¢–∏–ø: {message_type}\n"
                            f"–ü–æ—Ä—è–¥–æ–∫: {order}\n"
                            f"–ó–∞–¥–µ—Ä–∂–∫–∞: {delay_hours}—á\n"
                            f"–¢–µ–∫—Å—Ç: {message_text[:100]}...\n\n"
                            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é.",
                            parse_mode="HTML"
                        )
                    else:
                        await message.reply_text("‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω", parse_mode="HTML")
                
                context.user_data.clear()
            except ValueError:
                await message.reply_text(
                    "‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä)",
                    parse_mode="HTML"
                )
            return
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
        if action == 'edit_product_name':
            product_id = context.user_data.get('product_id')
            
            async with get_db_session() as session:
                from app.services.product_service import ProductService
                product_service = ProductService(session)
                
                product = await product_service.get_product_by_id(product_id)
                if product:
                    product.name = text
                    await session.commit()
                    
                    await message.reply_text(
                        f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {text}\n\n"
                        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é.",
                        parse_mode="HTML"
                    )
                else:
                    await message.reply_text("‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", parse_mode="HTML")
            
            context.user_data.clear()
            return
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
        if action == 'edit_product_description':
            product_id = context.user_data.get('product_id')
            
            async with get_db_session() as session:
                from app.services.product_service import ProductService
                product_service = ProductService(session)
                
                product = await product_service.get_product_by_id(product_id)
                if product:
                    product.description = text
                    await session.commit()
                    
                    await message.reply_text(
                        f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ\n\n"
                        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é.",
                        parse_mode="HTML"
                    )
                else:
                    await message.reply_text("‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", parse_mode="HTML")
            
            context.user_data.clear()
            return
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã –ø—Ä–æ–¥—É–∫—Ç–∞
        if action == 'edit_product_price':
            product_id = context.user_data.get('product_id')
            
            try:
                price = float(text.replace(',', '.'))
                price_kopeks = int(price * 100)
                
                async with get_db_session() as session:
                    from app.services.product_service import ProductService
                    product_service = ProductService(session)
                    
                    product = await product_service.get_product_by_id(product_id)
                    if product:
                        product.price = price_kopeks
                        await session.commit()
                        
                        await message.reply_text(
                            f"‚úÖ –¶–µ–Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {price} —Ä—É–±.\n\n"
                            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é.",
                            parse_mode="HTML"
                        )
                    else:
                        await message.reply_text("‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", parse_mode="HTML")
                
                context.user_data.clear()
            except ValueError:
                await message.reply_text(
                    "‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 499 –∏–ª–∏ 1990.50)",
                    parse_mode="HTML"
                )
            return
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∞
        if action == 'edit_product_url':
            product_id = context.user_data.get('product_id')
            
            async with get_db_session() as session:
                from app.services.product_service import ProductService
                product_service = ProductService(session)
                
                product = await product_service.get_product_by_id(product_id)
                if product:
                    product.payment_url = text
                    await session.commit()
                    
                    await message.reply_text(
                        f"‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –æ–±–Ω–æ–≤–ª–µ–Ω–∞\n\n"
                        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é.",
                        parse_mode="HTML"
                    )
                else:
                    await message.reply_text("‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", parse_mode="HTML")
            
            context.user_data.clear()
            return
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –æ—Ñ—Ñ–µ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
        if action == 'edit_product_offer':
            product_id = context.user_data.get('product_id')
            
            async with get_db_session() as session:
                from app.services.product_service import ProductService
                product_service = ProductService(session)
                
                product = await product_service.get_product_by_id(product_id)
                if product:
                    product.offer_text = text
                    await session.commit()
                    
                    await message.reply_text(
                        f"‚úÖ –¢–µ–∫—Å—Ç –æ—Ñ—Ñ–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω\n\n"
                        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é.",
                        parse_mode="HTML"
                    )
                else:
                    await message.reply_text("‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", parse_mode="HTML")
            
            context.user_data.clear()
            return
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ - —à–∞–≥ 2 (–Ω–∞–∑–≤–∞–Ω–∏–µ)
        if action == 'add_product_step2':
            context.user_data['product_name'] = text
            context.user_data['action'] = 'add_product_step3'
            
            await message.reply_text(
                f"‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞</b>\n\n"
                f"–®–∞–≥ 3 –∏–∑ 5: –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:",
                parse_mode="HTML"
            )
            return
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ - —à–∞–≥ 3 (–æ–ø–∏—Å–∞–Ω–∏–µ)
        if action == 'add_product_step3':
            context.user_data['product_description'] = text
            context.user_data['action'] = 'add_product_step4'
            
            await message.reply_text(
                f"‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞</b>\n\n"
                f"–®–∞–≥ 4 –∏–∑ 5: –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 499 –∏–ª–∏ 1990):",
                parse_mode="HTML"
            )
            return
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ - —à–∞–≥ 4 (—Ü–µ–Ω–∞)
        if action == 'add_product_step4':
            try:
                price = float(text.replace(',', '.'))
                price_kopeks = int(price * 100)
                context.user_data['product_price'] = price_kopeks
                context.user_data['action'] = 'add_product_step5'
                
                await message.reply_text(
                    f"‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞</b>\n\n"
                    f"–®–∞–≥ 5 –∏–∑ 5: –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã:",
                    parse_mode="HTML"
                )
            except ValueError:
                await message.reply_text(
                    "‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 499 –∏–ª–∏ 1990.50)",
                    parse_mode="HTML"
                )
            return
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ - —à–∞–≥ 5 (—Å—Å—ã–ª–∫–∞)
        if action == 'add_product_step5':
            product_type = context.user_data.get('product_type')
            product_name = context.user_data.get('product_name')
            product_description = context.user_data.get('product_description')
            product_price = context.user_data.get('product_price')
            payment_url = text
            
            async with get_db_session() as session:
                from app.services.product_service import ProductService
                from app.models.product import Product
                
                product_service = ProductService(session)
                
                new_product = Product(
                    name=product_name,
                    description=product_description,
                    type=product_type,
                    price=product_price,
                    currency="RUB",
                    payment_url=payment_url,
                    is_active=True,
                    sort_order=999
                )
                
                session.add(new_product)
                await session.commit()
                
                await message.reply_text(
                    f"‚úÖ <b>–ü—Ä–æ–¥—É–∫—Ç —Å–æ–∑–¥–∞–Ω!</b>\n\n"
                    f"–ù–∞–∑–≤–∞–Ω–∏–µ: {product_name}\n"
                    f"–¢–∏–ø: {product_type}\n"
                    f"–¶–µ–Ω–∞: {product_price/100} —Ä—É–±.\n\n"
                    f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é.",
                    parse_mode="HTML"
                )
            
            context.user_data.clear()
            return
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞
        if context.user_data.get('adding_magnet'):
            context.user_data['magnet_name'] = text
            context.user_data['adding_magnet'] = False
            context.user_data['waiting_for_file_or_url'] = True
            
            await message.reply_text(
                f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {text}\n\n"
                f"–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:\n"
                f"‚Ä¢ <b>–§–∞–π–ª</b> (PDF, –¥–æ–∫—É–º–µ–Ω—Ç) - –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª\n"
                f"‚Ä¢ <b>URL —Å—Å—ã–ª–∫—É</b> (Google Sheets, –≤–Ω–µ—à–Ω—è—è —Å—Å—ã–ª–∫–∞) - –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º\n\n"
                f"–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å?",
                parse_mode="HTML"
            )
            return
        
        # URL –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞ (–∫–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç —Ç–µ–∫—Å—Ç —Å—Å—ã–ª–∫–∏)
        if context.user_data.get('waiting_for_file_or_url'):
            context.user_data['waiting_for_file_or_url'] = False
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ URL
            if 'docs.google.com' in text:
                magnet_type = LeadMagnetType.GOOGLE_SHEET
            elif text.endswith('.pdf'):
                magnet_type = LeadMagnetType.PDF
            else:
                magnet_type = LeadMagnetType.LINK
            
            async with get_db_session() as session:
                lead_magnet_service = LeadMagnetService(session)
                
                magnet_data = {
                    'name': context.user_data['magnet_name'],
                    'type': magnet_type,
                    'file_url': text,
                    'telegram_file_id': None,
                    'is_active': True,
                    'sort_order': 999
                }
                
                new_magnet = await lead_magnet_service.create_lead_magnet(magnet_data)
                
                if new_magnet:
                    await message.reply_text(
                        f"‚úÖ <b>–õ–∏–¥-–º–∞–≥–Ω–∏—Ç —Å–æ–∑–¥–∞–Ω!</b>\n\n"
                        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {new_magnet.name}\n"
                        f"–¢–∏–ø: {magnet_type}\n"
                        f"–°—Å—ã–ª–∫–∞: {text}\n\n"
                        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é.",
                        parse_mode="HTML"
                    )
                else:
                    await message.reply_text(
                        "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞",
                        parse_mode="HTML"
                    )
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            context.user_data.clear()
            return
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞
        if context.user_data.get('editing_magnet_name'):
            magnet_id = context.user_data['editing_magnet_name']
            
            async with get_db_session() as session:
                lead_magnet_service = LeadMagnetService(session)
                
                success = await lead_magnet_service.update_lead_magnet(magnet_id, {'name': text})
                
                if success:
                    await message.reply_text(
                        f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n\n"
                        f"–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {text}\n\n"
                        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é.",
                        parse_mode="HTML"
                    )
                else:
                    await message.reply_text(
                        "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è",
                        parse_mode="HTML"
                    )
            
            context.user_data.clear()
            return
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ URL –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞
        if context.user_data.get('editing_magnet_url'):
            magnet_id = context.user_data['editing_magnet_url']
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ URL
            if 'docs.google.com' in text:
                magnet_type = LeadMagnetType.GOOGLE_SHEET
            elif text.endswith('.pdf'):
                magnet_type = LeadMagnetType.PDF
            else:
                magnet_type = LeadMagnetType.LINK
            
            async with get_db_session() as session:
                lead_magnet_service = LeadMagnetService(session)
                
                success = await lead_magnet_service.update_lead_magnet(magnet_id, {
                    'file_url': text,
                    'type': magnet_type
                })
                
                if success:
                    await message.reply_text(
                        f"‚úÖ URL –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω!\n\n"
                        f"–ù–æ–≤—ã–π URL: {text[:50]}...\n"
                        f"–¢–∏–ø: {magnet_type.value}\n\n"
                        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é.",
                        parse_mode="HTML"
                    )
                else:
                    await message.reply_text(
                        "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è URL",
                        parse_mode="HTML"
                    )
            
            context.user_data.clear()
            return
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞
        if context.user_data.get('editing_magnet_desc'):
            magnet_id = context.user_data['editing_magnet_desc']
            
            async with get_db_session() as session:
                lead_magnet_service = LeadMagnetService(session)
                
                success = await lead_magnet_service.update_lead_magnet(magnet_id, {'description': text})
                
                if success:
                    await message.reply_text(
                        f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n\n"
                        f"–ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {text[:100]}...\n\n"
                        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é.",
                        parse_mode="HTML"
                    )
                else:
                    await message.reply_text(
                        "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è",
                        parse_mode="HTML"
                    )
            
            context.user_data.clear()
            return
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ–≤–∞
        if context.user_data.get('editing_warmup_message'):
            message_id = context.user_data['editing_warmup_message']
            
            async with get_db_session() as session:
                warmup_service = WarmupService(session)
                
                # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ update_message_text –≤ WarmupService
                await message.reply_text(
                    f"‚úÖ –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω!\n\n"
                    f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é.",
                    parse_mode="HTML"
                )
            
            context.user_data.clear()
            return
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ - –Ω–∞–∑–≤–∞–Ω–∏–µ
        if context.user_data.get('creating_mailing_name'):
            context.user_data['mailing_name'] = text
            context.user_data['creating_mailing_name'] = False
            context.user_data['creating_mailing_text'] = True
            
            await message.reply_text(
                f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {text}\n\n"
                f"–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
                parse_mode="HTML"
            )
            return
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ - —Ç–µ–∫—Å—Ç
        if context.user_data.get('creating_mailing_text'):
            mailing_name = context.user_data.get('mailing_name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            
            async with get_db_session() as session:
                from app.services.mailing_service import MailingService
                
                mailing_service = MailingService(session)
                
                # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
                mailing = await mailing_service.create_mailing(
                    name=mailing_name,
                    message_text=text,
                    created_by=str(user.id)
                )
                
                if mailing:
                    await message.reply_text(
                        f"‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
                        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {mailing.name}\n"
                        f"–¢–µ–∫—Å—Ç: {text[:100]}...\n\n"
                        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin ‚Üí –†–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.",
                        parse_mode="HTML"
                    )
                else:
                    await message.reply_text(
                        "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏",
                        parse_mode="HTML"
                    )
            
            context.user_data.clear()
            return
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if action == 'add_admin_telegram_id':
            try:
                telegram_id = int(text.strip())
                
                async with get_db_session() as session:
                    from app.services.admin_service import AdminService
                    from app.services.user_service import UserService
                    
                    admin_service = AdminService(session)
                    user_service = UserService(session)
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –≤ –ë–î
                    db_user = await user_service.get_user_by_telegram_id(telegram_id)
                    
                    username = None
                    full_name = None
                    
                    if db_user:
                        username = db_user.username
                        full_name = db_user.full_name
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞
                    admin = await admin_service.add_admin(
                        telegram_id=telegram_id,
                        username=username,
                        full_name=full_name,
                        added_by_id=user.id
                    )
                    
                    if admin:
                        await message.reply_text(
                            f"‚úÖ <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
                            f"Telegram ID: <code>{telegram_id}</code>\n"
                            f"Username: {username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
                            f"–ò–º—è: {full_name or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"
                            f"–¢–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /admin\n\n"
                            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é.",
                            parse_mode="HTML"
                        )
                    else:
                        await message.reply_text(
                            "‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                            parse_mode="HTML"
                        )
                
                context.user_data.clear()
            except ValueError:
                await message.reply_text(
                    "‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram ID (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)\n\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä: 1670311707",
                    parse_mode="HTML"
                )
            return
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if action == 'remove_admin_telegram_id':
            try:
                telegram_id = int(text.strip())
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –ª–∏ –∞–¥–º–∏–Ω —É–¥–∞–ª–∏—Ç—å —Å–∞–º —Å–µ–±—è
                if telegram_id == user.id:
                    await message.reply_text(
                        "‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è!",
                        parse_mode="HTML"
                    )
                    context.user_data.clear()
                    return
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–∑ .env –ª–∏ —ç—Ç–æ—Ç –∞–¥–º–∏–Ω
                from config.settings import settings
                if telegram_id in settings.admin_ids_list:
                    await message.reply_text(
                        "‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ .env —Ñ–∞–π–ª–∞!\n\n"
                        "–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑–º–µ–Ω–∏—Ç–µ —Ñ–∞–π–ª .env –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.",
                        parse_mode="HTML"
                    )
                    context.user_data.clear()
                    return
                
                async with get_db_session() as session:
                    from app.services.admin_service import AdminService
                    
                    admin_service = AdminService(session)
                    success = await admin_service.remove_admin(telegram_id)
                    
                    if success:
                        await message.reply_text(
                            f"‚úÖ <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–¥–∞–ª–µ–Ω!</b>\n\n"
                            f"Telegram ID: <code>{telegram_id}</code>\n\n"
                            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ–ª—å—à–µ –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.\n\n"
                            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é.",
                            parse_mode="HTML"
                        )
                    else:
                        await message.reply_text(
                            "‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö",
                            parse_mode="HTML"
                        )
                
                context.user_data.clear()
            except ValueError:
                await message.reply_text(
                    "‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram ID (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)\n\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä: 1670311707",
                    parse_mode="HTML"
                )
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤
        if action and action.startswith('creating_dialog'):
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –ø—Ä—è–º–æ –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é
            from app.services.dialog_service import DialogService
            from app.schemas.dialog import DialogCreate, DialogQuestionCreate, DialogAnswerCreate
            
            if action == 'creating_dialog':
                dialog_name = text
                context.user_data['dialog_data'] = {
                    'name': dialog_name,
                    'questions': [],
                    'current_question': None
                }
                context.user_data['action'] = 'creating_dialog_description'
                
                await message.reply_text(
                    f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞: <b>{dialog_name}</b>\n\n"
                    "üìÑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ (–∏–ª–∏ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):",
                    parse_mode="HTML"
                )
                return
            
            elif action == 'creating_dialog_description':
                description = text.strip()
                if description.lower() not in ['–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'skip', '']:
                    context.user_data['dialog_data']['description'] = description
                else:
                    context.user_data['dialog_data']['description'] = None
                
                context.user_data['action'] = 'creating_dialog_question'
                
                await message.reply_text(
                    "‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ\n\n"
                    "‚ùì –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –¥–∏–∞–ª–æ–≥–∞:",
                    parse_mode="HTML"
                )
                return
            
            elif action == 'creating_dialog_question':
                question_text = text.strip()
                if len(question_text) < 3:
                    await message.reply_text("‚ùå –í–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
                    return
                
                context.user_data['dialog_data']['current_question'] = {
                    'question_text': question_text,
                    'answers': []
                }
                context.user_data['action'] = 'creating_dialog_question_keywords'
                
                await message.reply_text(
                    f"‚úÖ –í–æ–ø—Ä–æ—Å: <b>{question_text}</b>\n\n"
                    "üîë –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é) –∏–ª–∏ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
                    parse_mode="HTML"
                )
                return
            
            elif action == 'creating_dialog_question_keywords':
                keywords = text.strip()
                if keywords.lower() not in ['–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'skip', '']:
                    context.user_data['dialog_data']['current_question']['keywords'] = keywords
                else:
                    context.user_data['dialog_data']['current_question']['keywords'] = None
                
                context.user_data['action'] = 'creating_dialog_answer'
                
                await message.reply_text(
                    "‚úÖ –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã\n\n"
                    "üí¨ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å:",
                    parse_mode="HTML"
                )
                return
            
            elif action == 'creating_dialog_answer':
                answer_text = text.strip()
                if len(answer_text) < 2:
                    await message.reply_text("‚ùå –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
                    return
                
                context.user_data['dialog_data']['current_question']['answers'].append({
                    'answer_text': answer_text,
                    'answer_type': 'text',
                    'additional_data': None
                })
                context.user_data['action'] = 'creating_dialog_answer_type'
                
                await message.reply_text(
                    f"‚úÖ –û—Ç–≤–µ—Ç: <b>{answer_text}</b>\n\n"
                    "üìé –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞:\n"
                    "‚Ä¢ <b>text</b> - –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç\n"
                    "‚Ä¢ <b>image</b> - —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º\n"
                    "‚Ä¢ <b>document</b> - —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º\n\n"
                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞:",
                    parse_mode="HTML"
                )
                return
            
            elif action == 'creating_dialog_answer_type':
                answer_type = text.strip().lower()
                if answer_type not in ['text', 'image', 'document']:
                    await message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞. –í—ã–±–µ—Ä–∏—Ç–µ: text, image –∏–ª–∏ document:")
                    return
                
                current_answers = context.user_data['dialog_data']['current_question']['answers']
                current_answers[-1]['answer_type'] = answer_type
                
                context.user_data['action'] = 'creating_dialog_finish'
                await message.reply_text(
                    f"‚úÖ –¢–∏–ø –æ—Ç–≤–µ—Ç–∞: {answer_type}\n\n"
                    "‚ùì –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å?\n"
                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç':",
                    parse_mode="HTML"
                )
                return
            
            elif action == 'creating_dialog_finish':
                response = text.strip().lower()
                
                if response in ['–¥–∞', 'yes', 'y', '–¥–æ–±–∞–≤–∏—Ç—å']:
                    context.user_data['action'] = 'creating_dialog_answer'
                    await message.reply_text(
                        "üí¨ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å:",
                        parse_mode="HTML"
                    )
                    return
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –∫ –¥–∏–∞–ª–æ–≥—É
                context.user_data['dialog_data']['questions'].append(context.user_data['dialog_data']['current_question'])
                context.user_data['dialog_data']['current_question'] = None
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–ª–∞–≥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
                context.user_data['action'] = 'create_dialog_now'
            
            return
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ - –≤—ã–Ω–æ—Å–∏–º –Ω–∞ –≤–µ—Ä—Ö–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å
        if action == 'create_dialog_now':
            try:
                from app.services.dialog_service import DialogService
                from app.schemas.dialog import DialogCreate, DialogQuestionCreate, DialogAnswerCreate
                
                async with get_db_session() as session:
                    dialog_service = DialogService(session)
                    
                    dialog_data = DialogCreate(
                        name=context.user_data['dialog_data']['name'],
                        description=context.user_data['dialog_data']['description'],
                        questions=[
                            DialogQuestionCreate(
                                question_text=q['question_text'],
                                keywords=q['keywords'],
                                answers=[
                                    DialogAnswerCreate(
                                        answer_text=a['answer_text'],
                                        answer_type=a['answer_type'],
                                        additional_data=a['additional_data']
                                    ) for a in q['answers']
                                ]
                            ) for q in context.user_data['dialog_data']['questions']
                        ]
                    )
                    
                    dialog = await dialog_service.create_dialog(dialog_data)
                    
                    await message.reply_text(
                        f"üéâ <b>–î–∏–∞–ª–æ–≥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</b>\n\n"
                        f"üìã <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {dialog.name}\n"
                        f"üìä <b>–í–æ–ø—Ä–æ—Å–æ–≤:</b> {len(dialog.questions)}\n"
                        f"üìä <b>–û—Ç–≤–µ—Ç–æ–≤:</b> {sum(len(q.answers) for q in dialog.questions)}\n\n"
                        f"‚úÖ –î–∏–∞–ª–æ–≥ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!",
                        parse_mode="HTML"
                    )
                    
                    context.user_data.pop('action', None)
                    context.user_data.pop('dialog_data', None)
                    
                    logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} —Å–æ–∑–¥–∞–ª –¥–∏–∞–ª–æ–≥: {dialog.name}")
                    return
                    
            except Exception as dialog_error:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞: {dialog_error}")
                await message.reply_text(
                    "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                    parse_mode="HTML"
                )
                context.user_data.pop('action', None)
                context.user_data.pop('dialog_data', None)
                return
        
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∞–¥–º–∏–Ω –∏–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è - –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ª–æ–≥–∏
        if user.id not in settings.admin_ids_list or not action:
            from .dialog_text import dialog_text_handler as dialog_handler_func
            await dialog_handler_func(update, context)
            return
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞: {e}")
        await message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            parse_mode="HTML"
        )


async def file_input_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏."""
    user = update.effective_user
    message = update.message
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞
    from config.settings import settings
    if user.id not in settings.admin_ids_list:
        return
    
    try:
        # –ò–º–ø–æ—Ä—Ç—ã –≤ –Ω–∞—á–∞–ª–µ —Ñ—É–Ω–∫—Ü–∏–∏
        from app.services.lead_magnet_service import LeadMagnetService
        from app.models.lead_magnet import LeadMagnetType
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ –¥–ª—è –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞
        if context.user_data.get('waiting_for_file_or_url'):
            context.user_data['waiting_for_file_or_url'] = False
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
            file = None
            file_name = None
            magnet_type = LeadMagnetType.PDF
            
            if message.document:
                file = message.document
                file_name = file.file_name
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
                if file_name.endswith('.pdf'):
                    magnet_type = LeadMagnetType.PDF
                else:
                    magnet_type = LeadMagnetType.LINK
            elif message.photo:
                file = message.photo[-1]  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
                file_name = "photo.jpg"
                magnet_type = LeadMagnetType.LINK
            elif message.video:
                file = message.video
                file_name = "video.mp4"
                magnet_type = LeadMagnetType.LINK
            
            if not file:
                await message.reply_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                    parse_mode="HTML"
                )
                context.user_data.clear()
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Telegram
            telegram_file_id = file.file_id
            
            async with get_db_session() as session:
                lead_magnet_service = LeadMagnetService(session)
                
                magnet_data = {
                    'name': context.user_data['magnet_name'],
                    'type': magnet_type,
                    'file_url': None,  # –î–ª—è —Ñ–∞–π–ª–æ–≤ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º URL
                    'telegram_file_id': telegram_file_id,
                    'is_active': True,
                    'sort_order': 999
                }
                
                new_magnet = await lead_magnet_service.create_lead_magnet(magnet_data)
                
                if new_magnet:
                    await message.reply_text(
                        f"‚úÖ <b>–õ–∏–¥-–º–∞–≥–Ω–∏—Ç —Å–æ–∑–¥–∞–Ω!</b>\n\n"
                        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {new_magnet.name}\n"
                        f"–¢–∏–ø: {magnet_type}\n"
                        f"–§–∞–π–ª: {file_name}\n"
                        f"File ID: {telegram_file_id[:20]}...\n\n"
                        f"–§–∞–π–ª –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ Telegram.\n\n"
                        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é.",
                        parse_mode="HTML"
                    )
                else:
                    await message.reply_text(
                        "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞",
                        parse_mode="HTML"
                    )
            
            context.user_data.clear()
            return
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        await message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            parse_mode="HTML"
        )
        context.user_data.clear()


# –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
toggle_magnet_callback = CallbackQueryHandler(toggle_magnet_status_handler, pattern="^toggle_magnet_")
add_lead_magnet_callback = CallbackQueryHandler(add_lead_magnet_start, pattern="^add_lead_magnet$")
edit_warmup_callback = CallbackQueryHandler(edit_warmup_message_handler, pattern="^edit_warmup_")
admin_text_handler = MessageHandler(filters.TEXT & ~filters.COMMAND, text_input_handler)
file_handler = MessageHandler(filters.Document.ALL | filters.PHOTO | filters.VIDEO, file_input_handler)

