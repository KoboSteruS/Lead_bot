"""
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.

–°–æ–¥–µ—Ä–∂–∏—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è.
"""

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CallbackQueryHandler, MessageHandler, filters, ConversationHandler
from loguru import logger

from app.core.database import get_db_session
from app.services import LeadMagnetService, ProductService, WarmupService
from app.models.lead_magnet import LeadMagnetType
from app.models.product import ProductType


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
(
    WAITING_MAGNET_NAME,
    WAITING_MAGNET_TYPE,
    WAITING_MAGNET_URL,
    WAITING_MAGNET_TEXT,
    WAITING_PRODUCT_NAME,
    WAITING_PRODUCT_PRICE,
    WAITING_PRODUCT_URL
) = range(7)


async def toggle_magnet_status_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞."""
    query = update.callback_query
    await query.answer()
    
    try:
        callback_data = query.data
        magnet_id = callback_data.split("_")[-1]
        
        async with get_db_session() as session:
            lead_magnet_service = LeadMagnetService(session)
            
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞
            updated_magnet = await lead_magnet_service.toggle_lead_magnet_status(magnet_id)
            
            if updated_magnet:
                status = "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω" if updated_magnet.is_active else "–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
                await query.edit_message_text(
                    f"‚úÖ –õ–∏–¥-–º–∞–≥–Ω–∏—Ç ¬´{updated_magnet.name}¬ª {status}!\n\n"
                    f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é.",
                    parse_mode="HTML"
                )
            else:
                await query.edit_message_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞",
                    parse_mode="HTML"
                )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")


async def add_lead_magnet_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞."""
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text(
        "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞</b>\n\n"
        "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞:\n"
        "(–ù–∞–ø—Ä–∏–º–µ—Ä: '7-–¥–Ω–µ–≤–Ω—ã–π —Ç—Ä–µ–∫–µ—Ä –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã')",
        parse_mode="HTML"
    )
    
    context.user_data['adding_magnet'] = True


async def edit_warmup_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ–≤–∞."""
    query = update.callback_query
    await query.answer()
    
    try:
        callback_data = query.data
        message_id = callback_data.split("_")[-1]
        
        await query.edit_message_text(
            "‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ–≤–∞</b>\n\n"
            "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:",
            parse_mode="HTML"
        )
        
        context.user_data['editing_warmup_message'] = message_id
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ–≤–∞: {e}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞")


async def text_input_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏."""
    user = update.effective_user
    message = update.message
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞
    from config.settings import settings
    if user.id not in settings.admin_ids_list:
        return
    
    text = message.text
    action = context.user_data.get('action')
    
    try:
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ - –Ω–∞–∑–≤–∞–Ω–∏–µ
        if context.user_data.get('editing_mailing_field') == 'name':
            mailing_id = context.user_data.get('editing_mailing_id')
            
            async with get_db_session() as session:
                from app.services.mailing_service import MailingService
                mailing_service = MailingService(session)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
                mailing = await mailing_service.update_mailing(mailing_id, name=text)
                
                if mailing:
                    await message.reply_text(
                        f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: <b>{text}</b>\n\n"
                        f"–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:",
                        parse_mode="HTML"
                    )
                    context.user_data['editing_mailing_field'] = 'text'
                else:
                    await message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è", parse_mode="HTML")
                    context.user_data.pop('editing_mailing_id', None)
                    context.user_data.pop('editing_mailing_field', None)
            return
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ - —Ç–µ–∫—Å—Ç
        if context.user_data.get('editing_mailing_field') == 'text':
            mailing_id = context.user_data.get('editing_mailing_id')
            
            async with get_db_session() as session:
                from app.services.mailing_service import MailingService
                mailing_service = MailingService(session)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                mailing = await mailing_service.update_mailing(mailing_id, message_text=text)
                
                if mailing:
                    await message.reply_text(
                        f"‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!</b>\n\n"
                        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {mailing.name}\n"
                        f"–¢–µ–∫—Å—Ç: {mailing.message_text[:100]}...",
                        parse_mode="HTML"
                    )
                else:
                    await message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞", parse_mode="HTML")
            
            context.user_data.pop('editing_mailing_id', None)
            context.user_data.pop('editing_mailing_field', None)
            return
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è –ø—Ä–æ–≥—Ä–µ–≤–∞
        if context.user_data.get('creating_scenario'):
            scenario_name = text
            context.user_data['scenario_name'] = scenario_name
            context.user_data['creating_scenario'] = False
            context.user_data['creating_scenario_description'] = True
            
            await message.reply_text(
                f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: <b>{scenario_name}</b>\n\n"
                f"–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è:",
                parse_mode="HTML"
            )
            return
        
        # –û–ø–∏—Å–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è
        if context.user_data.get('creating_scenario_description'):
            scenario_description = text
            scenario_name = context.user_data.get('scenario_name')
            
            async with get_db_session() as session:
                from app.services.warmup_service import WarmupService
                warmup_service = WarmupService(session)
                
                # –°–æ–∑–¥–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π (is_active —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ True)
                scenario = await warmup_service.create_scenario(
                    name=scenario_name,
                    description=scenario_description
                )
                
                if scenario:
                    await message.reply_text(
                        f"‚úÖ <b>–°—Ü–µ–Ω–∞—Ä–∏–π —Å–æ–∑–¥–∞–Ω!</b>\n\n"
                        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {scenario.name}\n"
                        f"–û–ø–∏—Å–∞–Ω–∏–µ: {scenario.description}\n\n"
                        f"‚ö†Ô∏è –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å—Ü–µ–Ω–∞—Ä–∏–π —á–µ—Ä–µ–∑ —Å–∫—Ä–∏–ø—Ç—ã –∏–ª–∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.\n\n"
                        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é.",
                        parse_mode="HTML"
                    )
                else:
                    await message.reply_text(
                        "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è",
                        parse_mode="HTML"
                    )
            
            context.user_data.clear()
            return
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è
        if action == 'edit_scenario_name':
            scenario_id = context.user_data.get('scenario_id')
            
            async with get_db_session() as session:
                from app.services.warmup_service import WarmupService
                warmup_service = WarmupService(session)
                
                scenario = await warmup_service.get_scenario_by_id(scenario_id)
                if scenario:
                    scenario.name = text
                    await session.commit()
                    
                    await message.reply_text(
                        f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {text}\n\n"
                        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é.",
                        parse_mode="HTML"
                    )
                else:
                    await message.reply_text("‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω", parse_mode="HTML")
            
            context.user_data.clear()
            return
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è
        if action == 'edit_scenario_description':
            scenario_id = context.user_data.get('scenario_id')
            
            async with get_db_session() as session:
                from app.services.warmup_service import WarmupService
                warmup_service = WarmupService(session)
                
                scenario = await warmup_service.get_scenario_by_id(scenario_id)
                if scenario:
                    scenario.description = text
                    await session.commit()
                    
                    await message.reply_text(
                        f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ\n\n"
                        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é.",
                        parse_mode="HTML"
                    )
                else:
                    await message.reply_text("‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω", parse_mode="HTML")
            
            context.user_data.clear()
            return
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å—Ü–µ–Ω–∞—Ä–∏–π - —à–∞–≥ 2 (—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è)
        if action == 'add_scenario_message_step2':
            context.user_data['message_text'] = text
            context.user_data['action'] = 'add_scenario_message_step3'
            
            await message.reply_text(
                f"‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è</b>\n\n"
                f"–®–∞–≥ 3 –∏–∑ 4: –í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–µ—Ä–∂–∫—É –≤ —á–∞—Å–∞—Ö –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
                f"(–Ω–∞–ø—Ä–∏–º–µ—Ä: 24 –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ —Å—É—Ç–∫–∏):",
                parse_mode="HTML"
            )
            return
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å—Ü–µ–Ω–∞—Ä–∏–π - —à–∞–≥ 3 (–∑–∞–¥–µ—Ä–∂–∫–∞)
        if action == 'add_scenario_message_step3':
            try:
                delay_hours = int(text)
                context.user_data['delay_hours'] = delay_hours
                context.user_data['action'] = 'add_scenario_message_step4'
                
                await message.reply_text(
                    f"‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è</b>\n\n"
                    f"–®–∞–≥ 4 –∏–∑ 4: –í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏\n"
                    f"(–Ω–∞–ø—Ä–∏–º–µ—Ä: 1 –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è):",
                    parse_mode="HTML"
                )
            except ValueError:
                await message.reply_text(
                    "‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤)",
                    parse_mode="HTML"
                )
            return
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å—Ü–µ–Ω–∞—Ä–∏–π - —à–∞–≥ 4 (–ø–æ—Ä—è–¥–æ–∫)
        if action == 'add_scenario_message_step4':
            try:
                order = int(text)
                scenario_id = context.user_data.get('scenario_id')
                message_type = context.user_data.get('message_type')
                message_text = context.user_data.get('message_text')
                delay_hours = context.user_data.get('delay_hours')
                
                async with get_db_session() as session:
                    from app.services.warmup_service import WarmupService
                    from app.models.warmup import WarmupMessage
                    
                    warmup_service = WarmupService(session)
                    scenario = await warmup_service.get_scenario_by_id(scenario_id)
                    
                    if scenario:
                        new_message = WarmupMessage(
                            scenario_id=scenario.id,
                            message_type=message_type,
                            text=message_text,
                            delay_hours=delay_hours,
                            order=order,
                            is_active=True
                        )
                        
                        session.add(new_message)
                        await session.commit()
                        
                        await message.reply_text(
                            f"‚úÖ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!</b>\n\n"
                            f"–¢–∏–ø: {message_type}\n"
                            f"–ü–æ—Ä—è–¥–æ–∫: {order}\n"
                            f"–ó–∞–¥–µ—Ä–∂–∫–∞: {delay_hours}—á\n"
                            f"–¢–µ–∫—Å—Ç: {message_text[:100]}...\n\n"
                            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é.",
                            parse_mode="HTML"
                        )
                    else:
                        await message.reply_text("‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω", parse_mode="HTML")
                
                context.user_data.clear()
            except ValueError:
                await message.reply_text(
                    "‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä)",
                    parse_mode="HTML"
                )
            return
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
        if action == 'edit_product_name':
            product_id = context.user_data.get('product_id')
            
            async with get_db_session() as session:
                from app.services.product_service import ProductService
                product_service = ProductService(session)
                
                product = await product_service.get_product_by_id(product_id)
                if product:
                    product.name = text
                    await session.commit()
                    
                    await message.reply_text(
                        f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {text}\n\n"
                        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é.",
                        parse_mode="HTML"
                    )
                else:
                    await message.reply_text("‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", parse_mode="HTML")
            
            context.user_data.clear()
            return
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
        if action == 'edit_product_description':
            product_id = context.user_data.get('product_id')
            
            async with get_db_session() as session:
                from app.services.product_service import ProductService
                product_service = ProductService(session)
                
                product = await product_service.get_product_by_id(product_id)
                if product:
                    product.description = text
                    await session.commit()
                    
                    await message.reply_text(
                        f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ\n\n"
                        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é.",
                        parse_mode="HTML"
                    )
                else:
                    await message.reply_text("‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", parse_mode="HTML")
            
            context.user_data.clear()
            return
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã –ø—Ä–æ–¥—É–∫—Ç–∞
        if action == 'edit_product_price':
            product_id = context.user_data.get('product_id')
            
            try:
                price = float(text.replace(',', '.'))
                price_kopeks = int(price * 100)
                
                async with get_db_session() as session:
                    from app.services.product_service import ProductService
                    product_service = ProductService(session)
                    
                    product = await product_service.get_product_by_id(product_id)
                    if product:
                        product.price = price_kopeks
                        await session.commit()
                        
                        await message.reply_text(
                            f"‚úÖ –¶–µ–Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {price} —Ä—É–±.\n\n"
                            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é.",
                            parse_mode="HTML"
                        )
                    else:
                        await message.reply_text("‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", parse_mode="HTML")
                
                context.user_data.clear()
            except ValueError:
                await message.reply_text(
                    "‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 499 –∏–ª–∏ 1990.50)",
                    parse_mode="HTML"
                )
            return
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∞
        if action == 'edit_product_url':
            product_id = context.user_data.get('product_id')
            
            async with get_db_session() as session:
                from app.services.product_service import ProductService
                product_service = ProductService(session)
                
                product = await product_service.get_product_by_id(product_id)
                if product:
                    product.payment_url = text
                    await session.commit()
                    
                    await message.reply_text(
                        f"‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –æ–±–Ω–æ–≤–ª–µ–Ω–∞\n\n"
                        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é.",
                        parse_mode="HTML"
                    )
                else:
                    await message.reply_text("‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", parse_mode="HTML")
            
            context.user_data.clear()
            return
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –æ—Ñ—Ñ–µ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
        if action == 'edit_product_offer':
            product_id = context.user_data.get('product_id')
            
            async with get_db_session() as session:
                from app.services.product_service import ProductService
                product_service = ProductService(session)
                
                product = await product_service.get_product_by_id(product_id)
                if product:
                    product.offer_text = text
                    await session.commit()
                    
                    await message.reply_text(
                        f"‚úÖ –¢–µ–∫—Å—Ç –æ—Ñ—Ñ–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω\n\n"
                        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é.",
                        parse_mode="HTML"
                    )
                else:
                    await message.reply_text("‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", parse_mode="HTML")
            
            context.user_data.clear()
            return
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ - —à–∞–≥ 2 (–Ω–∞–∑–≤–∞–Ω–∏–µ)
        if action == 'add_product_step2':
            context.user_data['product_name'] = text
            context.user_data['action'] = 'add_product_step3'
            
            await message.reply_text(
                f"‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞</b>\n\n"
                f"–®–∞–≥ 3 –∏–∑ 5: –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:",
                parse_mode="HTML"
            )
            return
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ - —à–∞–≥ 3 (–æ–ø–∏—Å–∞–Ω–∏–µ)
        if action == 'add_product_step3':
            context.user_data['product_description'] = text
            context.user_data['action'] = 'add_product_step4'
            
            await message.reply_text(
                f"‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞</b>\n\n"
                f"–®–∞–≥ 4 –∏–∑ 5: –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 499 –∏–ª–∏ 1990):",
                parse_mode="HTML"
            )
            return
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ - —à–∞–≥ 4 (—Ü–µ–Ω–∞)
        if action == 'add_product_step4':
            try:
                price = float(text.replace(',', '.'))
                price_kopeks = int(price * 100)
                context.user_data['product_price'] = price_kopeks
                context.user_data['action'] = 'add_product_step5'
                
                await message.reply_text(
                    f"‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞</b>\n\n"
                    f"–®–∞–≥ 5 –∏–∑ 5: –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã:",
                    parse_mode="HTML"
                )
            except ValueError:
                await message.reply_text(
                    "‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 499 –∏–ª–∏ 1990.50)",
                    parse_mode="HTML"
                )
            return
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ - —à–∞–≥ 5 (—Å—Å—ã–ª–∫–∞)
        if action == 'add_product_step5':
            product_type = context.user_data.get('product_type')
            product_name = context.user_data.get('product_name')
            product_description = context.user_data.get('product_description')
            product_price = context.user_data.get('product_price')
            payment_url = text
            
            async with get_db_session() as session:
                from app.services.product_service import ProductService
                from app.models.product import Product
                
                product_service = ProductService(session)
                
                new_product = Product(
                    name=product_name,
                    description=product_description,
                    type=product_type,
                    price=product_price,
                    currency="RUB",
                    payment_url=payment_url,
                    is_active=True,
                    sort_order=999
                )
                
                session.add(new_product)
                await session.commit()
                
                await message.reply_text(
                    f"‚úÖ <b>–ü—Ä–æ–¥—É–∫—Ç —Å–æ–∑–¥–∞–Ω!</b>\n\n"
                    f"–ù–∞–∑–≤–∞–Ω–∏–µ: {product_name}\n"
                    f"–¢–∏–ø: {product_type}\n"
                    f"–¶–µ–Ω–∞: {product_price/100} —Ä—É–±.\n\n"
                    f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é.",
                    parse_mode="HTML"
                )
            
            context.user_data.clear()
            return
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞
        if context.user_data.get('adding_magnet'):
            await message.reply_text(
                f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {text}\n\n"
                f"–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ URL —Ñ–∞–π–ª–∞ (Google Sheets –∏–ª–∏ PDF —Å—Å—ã–ª–∫—É):",
                parse_mode="HTML"
            )
            context.user_data['magnet_name'] = text
            context.user_data['adding_magnet'] = False
            context.user_data['adding_magnet_url'] = True
            return
        
        # URL –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞
        if context.user_data.get('adding_magnet_url'):
            context.user_data['magnet_url'] = text
            context.user_data['adding_magnet_url'] = False
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ URL
            if 'docs.google.com' in text:
                magnet_type = LeadMagnetType.GOOGLE_SHEET
            elif text.endswith('.pdf'):
                magnet_type = LeadMagnetType.PDF
            else:
                magnet_type = LeadMagnetType.LINK
            
            async with get_db_session() as session:
                lead_magnet_service = LeadMagnetService(session)
                
                magnet_data = {
                    'name': context.user_data['magnet_name'],
                    'type': magnet_type,
                    'file_url': text,
                    'is_active': True,
                    'sort_order': 999
                }
                
                new_magnet = await lead_magnet_service.create_lead_magnet(magnet_data)
                
                if new_magnet:
                    await message.reply_text(
                        f"‚úÖ <b>–õ–∏–¥-–º–∞–≥–Ω–∏—Ç —Å–æ–∑–¥–∞–Ω!</b>\n\n"
                        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {new_magnet.name}\n"
                        f"–¢–∏–ø: {new_magnet.type}\n\n"
                        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é.",
                        parse_mode="HTML"
                    )
                else:
                    await message.reply_text(
                        "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞",
                        parse_mode="HTML"
                    )
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            context.user_data.clear()
            return
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞
        if context.user_data.get('editing_magnet_name'):
            magnet_id = context.user_data['editing_magnet_name']
            
            async with get_db_session() as session:
                lead_magnet_service = LeadMagnetService(session)
                
                success = await lead_magnet_service.update_lead_magnet(magnet_id, {'name': text})
                
                if success:
                    await message.reply_text(
                        f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n\n"
                        f"–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {text}\n\n"
                        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é.",
                        parse_mode="HTML"
                    )
                else:
                    await message.reply_text(
                        "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è",
                        parse_mode="HTML"
                    )
            
            context.user_data.clear()
            return
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ URL –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞
        if context.user_data.get('editing_magnet_url'):
            magnet_id = context.user_data['editing_magnet_url']
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ URL
            if 'docs.google.com' in text:
                magnet_type = LeadMagnetType.GOOGLE_SHEET
            elif text.endswith('.pdf'):
                magnet_type = LeadMagnetType.PDF
            else:
                magnet_type = LeadMagnetType.LINK
            
            async with get_db_session() as session:
                lead_magnet_service = LeadMagnetService(session)
                
                success = await lead_magnet_service.update_lead_magnet(magnet_id, {
                    'file_url': text,
                    'type': magnet_type
                })
                
                if success:
                    await message.reply_text(
                        f"‚úÖ URL –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω!\n\n"
                        f"–ù–æ–≤—ã–π URL: {text[:50]}...\n"
                        f"–¢–∏–ø: {magnet_type.value}\n\n"
                        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é.",
                        parse_mode="HTML"
                    )
                else:
                    await message.reply_text(
                        "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è URL",
                        parse_mode="HTML"
                    )
            
            context.user_data.clear()
            return
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞
        if context.user_data.get('editing_magnet_desc'):
            magnet_id = context.user_data['editing_magnet_desc']
            
            async with get_db_session() as session:
                lead_magnet_service = LeadMagnetService(session)
                
                success = await lead_magnet_service.update_lead_magnet(magnet_id, {'description': text})
                
                if success:
                    await message.reply_text(
                        f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n\n"
                        f"–ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {text[:100]}...\n\n"
                        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é.",
                        parse_mode="HTML"
                    )
                else:
                    await message.reply_text(
                        "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è",
                        parse_mode="HTML"
                    )
            
            context.user_data.clear()
            return
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ–≤–∞
        if context.user_data.get('editing_warmup_message'):
            message_id = context.user_data['editing_warmup_message']
            
            async with get_db_session() as session:
                warmup_service = WarmupService(session)
                
                # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ update_message_text –≤ WarmupService
                await message.reply_text(
                    f"‚úÖ –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω!\n\n"
                    f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é.",
                    parse_mode="HTML"
                )
            
            context.user_data.clear()
            return
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ - –Ω–∞–∑–≤–∞–Ω–∏–µ
        if context.user_data.get('creating_mailing_name'):
            context.user_data['mailing_name'] = text
            context.user_data['creating_mailing_name'] = False
            context.user_data['creating_mailing_text'] = True
            
            await message.reply_text(
                f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {text}\n\n"
                f"–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
                parse_mode="HTML"
            )
            return
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ - —Ç–µ–∫—Å—Ç
        if context.user_data.get('creating_mailing_text'):
            mailing_name = context.user_data.get('mailing_name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            
            async with get_db_session() as session:
                from app.services.mailing_service import MailingService
                
                mailing_service = MailingService(session)
                
                # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
                mailing = await mailing_service.create_mailing(
                    name=mailing_name,
                    message_text=text,
                    created_by=str(user.id)
                )
                
                if mailing:
                    await message.reply_text(
                        f"‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
                        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {mailing.name}\n"
                        f"–¢–µ–∫—Å—Ç: {text[:100]}...\n\n"
                        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin ‚Üí –†–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.",
                        parse_mode="HTML"
                    )
                else:
                    await message.reply_text(
                        "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏",
                        parse_mode="HTML"
                    )
            
            context.user_data.clear()
            return
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞: {e}")
        await message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            parse_mode="HTML"
        )


# –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
toggle_magnet_callback = CallbackQueryHandler(toggle_magnet_status_handler, pattern="^toggle_magnet_")
add_lead_magnet_callback = CallbackQueryHandler(add_lead_magnet_start, pattern="^add_lead_magnet$")
edit_warmup_callback = CallbackQueryHandler(edit_warmup_message_handler, pattern="^edit_warmup_")
admin_text_handler = MessageHandler(filters.TEXT & ~filters.COMMAND, text_input_handler)

