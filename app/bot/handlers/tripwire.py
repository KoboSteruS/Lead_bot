"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç—Ä–∏–ø–≤–∞–π–µ—Ä–æ–≤ –∏ –ø–ª–∞—Ç–µ–∂–µ–π.

–°–æ–¥–µ—Ä–∂–∏—Ç –ª–æ–≥–∏–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–∫—É–ø–∫–∏ —Ç—Ä–∏–ø–≤–∞–π–µ—Ä–æ–≤.
"""

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CallbackQueryHandler
from loguru import logger

from app.services.user_service import UserService
from app.services.product_service import ProductService
from app.models import ProductType
from app.core.database import get_db_session


async def payment_card_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û–ø–ª–∞—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ–π".
    """
    query = update.callback_query
    user = query.from_user
    await query.answer()
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ callback_data
        callback_data = query.data
        if "_" in callback_data:
            product_id = callback_data.split("_", 2)[-1] if len(callback_data.split("_")) > 2 else None
        else:
            product_id = None
        
        async with get_db_session() as session:
            user_service = UserService(session)
            product_service = ProductService(session)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            db_user = await user_service.get_user_by_telegram_id(user.id)
            if not db_user:
                await query.edit_message_text(
                    "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                    parse_mode="HTML"
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç
            if product_id:
                # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç
                stmt = f"SELECT * FROM products WHERE id = '{product_id}'"
                # TODO: –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ ORM –∑–∞–ø—Ä–æ—Å
                tripwire = await product_service.get_active_product_by_type(ProductType.TRIPWIRE)
            else:
                # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–∏–ø–≤–∞–π–µ—Ä
                tripwire = await product_service.get_active_product_by_type(ProductType.TRIPWIRE)
            
            if not tripwire:
                await query.edit_message_text(
                    "‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                    parse_mode="HTML"
                )
                return
            
            # –û—Ç–º–µ—á–∞–µ–º –∫–ª–∏–∫ –ø–æ –æ—Ñ—Ñ–µ—Ä—É (–µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –æ—Ñ—Ñ–µ—Ä)
            offer = await product_service.get_active_offer_for_product(tripwire.id.hex)
            if offer:
                await product_service.mark_offer_clicked(str(db_user.id), offer.id.hex)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –ø–æ –æ–ø–ª–∞—Ç–µ
            payment_text = (
                f"üí≥ <b>–û–ø–ª–∞—Ç–∞: {tripwire.name}</b>\n\n"
                f"üí∞ <b>–°—É–º–º–∞: {tripwire.price_rub} ‚ÇΩ</b>\n\n"
                f"üì± <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –æ–ø–ª–∞—Ç–µ:</b>\n"
                f"1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ¬ª\n"
                f"2. –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã –Ω–∞ –∑–∞—â–∏—â–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ\n"
                f"3. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–ª–∞—Ç–µ–∂\n"
                f"4. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø\n\n"
                f"üîí <b>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:</b> –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞—â–∏—â–µ–Ω—ã SSL-—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–º"
            )
            
            keyboard = [
                [InlineKeyboardButton("üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=tripwire.payment_url)] if tripwire.payment_url else [],
                [InlineKeyboardButton("üìû –ü–æ–º–æ—â—å", callback_data="payment_help")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="warmup_offer")]
            ]
            # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å–ø–∏—Å–∫–∏
            keyboard = [row for row in keyboard if row]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                payment_text,
                parse_mode="HTML",
                reply_markup=reply_markup
            )
            
            logger.info(f"–ü–æ–∫–∞–∑–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–ø–ª–∞—Ç—ã –∫–∞—Ä—Ç–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id} –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ {tripwire.name}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–ª–∞—Ç—ã –∫–∞—Ä—Ç–æ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}")
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            parse_mode="HTML"
        )


async def payment_spb_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–ü–ë (Faster Payments)".
    """
    query = update.callback_query
    user = query.from_user
    await query.answer()
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ callback_data
        callback_data = query.data
        if "_" in callback_data:
            product_id = callback_data.split("_", 2)[-1] if len(callback_data.split("_")) > 2 else None
        else:
            product_id = None
        
        async with get_db_session() as session:
            user_service = UserService(session)
            product_service = ProductService(session)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            db_user = await user_service.get_user_by_telegram_id(user.id)
            if not db_user:
                await query.edit_message_text(
                    "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                    parse_mode="HTML"
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–∏–ø–≤–∞–π–µ—Ä
            tripwire = await product_service.get_active_product_by_type(ProductType.TRIPWIRE)
            if not tripwire:
                await query.edit_message_text(
                    "‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                    parse_mode="HTML"
                )
                return
            
            # –û—Ç–º–µ—á–∞–µ–º –∫–ª–∏–∫ –ø–æ –æ—Ñ—Ñ–µ—Ä—É (–µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –æ—Ñ—Ñ–µ—Ä)
            offer = await product_service.get_active_offer_for_product(tripwire.id.hex)
            if offer:
                await product_service.mark_offer_clicked(str(db_user.id), offer.id.hex)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –ø–æ –°–ë–ü
            payment_text = (
                f"üì± <b>–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –°–ë–ü: {tripwire.name}</b>\n\n"
                f"üí∞ <b>–°—É–º–º–∞: {tripwire.price_rub} ‚ÇΩ</b>\n\n"
                f"üì± <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –æ–ø–ª–∞—Ç–µ:</b>\n"
                f"1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ –°–ë–ü¬ª\n"
                f"2. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –±–∞–Ω–∫ –∏–∑ —Å–ø–∏—Å–∫–∞\n"
                f"3. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–ª–∞—Ç–µ–∂ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –±–∞–Ω–∫–∞\n"
                f"4. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø\n\n"
                f"‚ö° <b>–ë—ã—Å—Ç—Ä–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ!</b> –ü–ª–∞—Ç–µ–∂ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω–æ"
            )
            
            keyboard = [
                [InlineKeyboardButton("üì± –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ –°–ë–ü", url=tripwire.payment_url)] if tripwire.payment_url else [],
                [InlineKeyboardButton("üìû –ü–æ–º–æ—â—å", callback_data="payment_help")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="warmup_offer")]
            ]
            # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å–ø–∏—Å–∫–∏
            keyboard = [row for row in keyboard if row]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                payment_text,
                parse_mode="HTML",
                reply_markup=reply_markup
            )
            
            logger.info(f"–ü–æ–∫–∞–∑–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–ø–ª–∞—Ç—ã –°–ë–ü –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id} –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ {tripwire.name}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–ª–∞—Ç—ã –°–ë–ü –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}")
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            parse_mode="HTML"
        )


async def payment_help_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–º–æ—â—å" –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–ø–ª–∞—Ç—ã.
    """
    query = update.callback_query
    user = query.from_user
    await query.answer()
    
    try:
        help_text = (
            "üÜò <b>–ü–æ–º–æ—â—å —Å –æ–ø–ª–∞—Ç–æ–π</b>\n\n"
            "‚ùì <b>–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã:</b>\n\n"
            "‚Ä¢ <b>–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ–ø–ª–∞—Ç–∞?</b>\n"
            "  –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É\n\n"
            "‚Ä¢ <b>–î–µ–Ω—å–≥–∏ —Å–ø–∏—Å–∞–ª–∏—Å—å, –Ω–æ –¥–æ—Å—Ç—É–ø–∞ –Ω–µ—Ç?</b>\n"
            "  –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å –Ω–æ–º–µ—Ä–æ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏\n\n"
            "‚Ä¢ <b>–•–æ—á—É –≤–µ—Ä–Ω—É—Ç—å –¥–µ–Ω—å–≥–∏?</b>\n"
            "  –í–æ–∑–≤—Ä–∞—Ç –≤–æ–∑–º–æ–∂–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 14 –¥–Ω–µ–π\n\n"
            "üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</b>\n"
            "Telegram: @osnovaputi_support\n"
            "Email: support@osnovaputi.ru\n\n"
            "‚è∞ <b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b> –ü–Ω-–ü—Ç 9:00-18:00 (–ú–°–ö)"
        )
        
        keyboard = [
            [InlineKeyboardButton("üìû –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", url="https://t.me/osnovaputi_support")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –æ–ø–ª–∞—Ç–µ", callback_data="warmup_offer")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            help_text,
            parse_mode="HTML",
            reply_markup=reply_markup
        )
        
        logger.info(f"–ü–æ–∫–∞–∑–∞–Ω–∞ –ø–æ–º–æ—â—å –ø–æ –æ–ø–ª–∞—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø–æ–º–æ—â–∏ –ø–æ –æ–ø–ª–∞—Ç–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}")
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode="HTML"
        )


# –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
payment_card_callback = CallbackQueryHandler(payment_card_callback_handler, pattern="^payment_card")
payment_spb_callback = CallbackQueryHandler(payment_spb_callback_handler, pattern="^payment_spb")
payment_help_callback = CallbackQueryHandler(payment_help_callback_handler, pattern="^payment_help$")
