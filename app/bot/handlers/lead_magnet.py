"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–æ–≤.

–°–æ–¥–µ—Ä–∂–∏—Ç –ª–æ–≥–∏–∫—É –≤—ã–¥–∞—á–∏ –ø–æ–¥–∞—Ä–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
"""

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from loguru import logger

from app.services.user_service import UserService
from app.services.lead_magnet_service import LeadMagnetService
from app.services.warmup_service import WarmupService
from app.services.telegram_service import TelegramService
from app.core.database import get_db_session
from config.settings import settings


from telegram.ext import CommandHandler, CallbackQueryHandler

async def get_gift_command_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /gift - –≤—ã–¥–∞—á–∞ –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞.
    """
    user = update.effective_user
    chat = update.effective_chat
    
    if not user or not chat:
        return
    
    try:
        async with get_db_session() as session:
            user_service = UserService(session)
            lead_magnet_service = LeadMagnetService(session)
            warmup_service = WarmupService(session)
            telegram_service = TelegramService(context.bot)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            db_user = await user_service.get_user_by_telegram_id(user.id)
            if not db_user:
                db_user = await user_service.create_user({
                    "telegram_id": user.id,
                    "username": user.username,
                    "first_name": user.first_name,
                    "last_name": user.last_name
                })
                logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
            is_subscribed = await telegram_service.check_channel_subscription(user.id)
            if not is_subscribed:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª
                keyboard = [
                    [InlineKeyboardButton("üì∫ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=f"https://t.me/{settings.CHANNEL_USERNAME}")],
                    [InlineKeyboardButton("‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_subscription")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await telegram_service.send_subscription_required_message(
                    chat_id=chat.id,
                    channel_username=settings.CHANNEL_USERNAME,
                    reply_markup=reply_markup
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª—É—á–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ª–∏–¥-–º–∞–≥–Ω–∏—Ç
            has_lead_magnet = await lead_magnet_service.user_has_lead_magnet(str(db_user.id))
            
            if has_lead_magnet:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–ª—É—á–∞–ª –ª–∏–¥-–º–∞–≥–Ω–∏—Ç
                await update.message.reply_text(
                    "üéÅ –í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –ø–æ–¥–∞—Ä–æ–∫!\n\n"
                    "üìã –ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–µ–Ω –µ—â–µ –æ–¥–∏–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç—Ä–µ–∫–µ—Ä–∞, "
                    "–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    parse_mode="HTML"
                )
                return
            
            # –í—ã–¥–∞–µ–º –ª–∏–¥-–º–∞–≥–Ω–∏—Ç
            lead_magnet = await lead_magnet_service.give_lead_magnet_to_user(str(db_user.id))
            
            if not lead_magnet:
                await update.message.reply_text(
                    "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–¥–∞—Ä–æ–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    parse_mode="HTML"
                )
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–æ–º
            message_text = (
                f"üéÅ <b>–í–∞—à –ø–æ–¥–∞—Ä–æ–∫ –≥–æ—Ç–æ–≤!</b>\n\n"
                f"üìã <b>{lead_magnet.name}</b>\n\n"
            )
            
            if lead_magnet.message_text:
                message_text += f"{lead_magnet.message_text}\n\n"
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å telegram_file_id, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é
            if lead_magnet.telegram_file_id:
                # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                await update.message.reply_text(
                    message_text,
                    parse_mode="HTML"
                )
                # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
                try:
                    await update.message.reply_document(
                        document=lead_magnet.telegram_file_id,
                        caption=f"üìÑ {lead_magnet.name}"
                    )
                except Exception as file_error:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {file_error}")
                    # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
                    if lead_magnet.file_url:
                        keyboard = [[InlineKeyboardButton("üìÑ –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª", url=lead_magnet.file_url)]]
                        await update.message.reply_text(
                            "–ò–ª–∏ —Å–∫–∞—á–∞–π—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:",
                            reply_markup=InlineKeyboardMarkup(keyboard)
                        )
            else:
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å—Å—ã–ª–æ–∫
                keyboard = []
                
                if lead_magnet.type == "pdf" and lead_magnet.file_url:
                    keyboard.append([
                        InlineKeyboardButton("üìÑ –°–∫–∞—á–∞—Ç—å PDF", url=lead_magnet.file_url)
                    ])
                elif lead_magnet.type == "google_sheet" and lead_magnet.file_url:
                    keyboard.append([
                        InlineKeyboardButton("üìä –û—Ç–∫—Ä—ã—Ç—å —Ç–∞–±–ª–∏—Ü—É", url=lead_magnet.file_url)
                    ])
                elif lead_magnet.type == "link" and lead_magnet.file_url:
                    keyboard.append([
                        InlineKeyboardButton("üîó –ü–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ", url=lead_magnet.file_url)
                    ])
                
                reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None
                
                await update.message.reply_text(
                    message_text,
                    parse_mode="HTML",
                    reply_markup=reply_markup
                )
            
            logger.info(f"–í—ã–¥–∞–Ω –ª–∏–¥-–º–∞–≥–Ω–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}: {lead_magnet.name}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≥—Ä–µ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                await warmup_service.start_warmup_for_user(str(db_user.id))
                logger.info(f"–ó–∞–ø—É—â–µ–Ω –ø—Ä–æ–≥—Ä–µ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
            except Exception as warmup_error:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≥—Ä–µ–≤–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {warmup_error}")
                # –ü—Ä–æ–≥—Ä–µ–≤ –Ω–µ –∫—Ä–∏—Ç–∏—á–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –ø–æ–¥–∞—Ä–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode="HTML"
        )


async def gift_button_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞–±—Ä–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫".
    """
    query = update.callback_query
    user = query.from_user
    await query.answer()
    
    try:
        async with get_db_session() as session:
            user_service = UserService(session)
            lead_magnet_service = LeadMagnetService(session)
            warmup_service = WarmupService(session)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            db_user = await user_service.get_user_by_telegram_id(user.id)
            if not db_user:
                await query.edit_message_text(
                    "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start",
                    parse_mode="HTML"
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª—É—á–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ª–∏–¥-–º–∞–≥–Ω–∏—Ç
            has_lead_magnet = await lead_magnet_service.user_has_lead_magnet(str(db_user.id))
            
            if has_lead_magnet:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–ª—É—á–∞–ª –ª–∏–¥-–º–∞–≥–Ω–∏—Ç
                await query.edit_message_text(
                    "üéÅ –í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –ø–æ–¥–∞—Ä–æ–∫!\n\n"
                    "üìã –ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–µ–Ω –µ—â–µ –æ–¥–∏–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç—Ä–µ–∫–µ—Ä–∞, "
                    "–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    parse_mode="HTML"
                )
                return
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
            telegram_service = TelegramService(context.bot)
            is_subscribed = await telegram_service.check_channel_subscription(user.id)
            
            if not is_subscribed:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ–º –ø–æ–¥–ø–∏—Å–∫–∏
                await query.edit_message_text(
                    "üéÅ <b>–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!</b>\n\n"
                    f"üì∫ <b>–ö–∞–Ω–∞–ª:</b> @{settings.CHANNEL_USERNAME}\n\n"
                    "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è¬ª –Ω–∏–∂–µ:",
                    parse_mode="HTML",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üì∫ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=f"https://t.me/{settings.CHANNEL_USERNAME}")],
                        [InlineKeyboardButton("‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_subscription")]
                    ])
                )
                return
            
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω - –≤—ã–¥–∞–µ–º –ª–∏–¥-–º–∞–≥–Ω–∏—Ç
            lead_magnet = await lead_magnet_service.give_lead_magnet_to_user(str(db_user.id))
            
            if not lead_magnet:
                await query.edit_message_text(
                    "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–¥–∞—Ä–æ–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    parse_mode="HTML"
                )
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–æ–º
            message_text = (
                f"üéÅ <b>–í–∞—à –ø–æ–¥–∞—Ä–æ–∫ –≥–æ—Ç–æ–≤!</b>\n\n"
                f"üìã <b>{lead_magnet.name}</b>\n\n"
            )
            
            if lead_magnet.message_text:
                message_text += f"{lead_magnet.message_text}\n\n"
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å telegram_file_id, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é
            if lead_magnet.telegram_file_id:
                # –°–Ω–∞—á–∞–ª–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                await query.edit_message_text(
                    message_text,
                    parse_mode="HTML"
                )
                # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
                try:
                    await context.bot.send_document(
                        chat_id=query.message.chat_id,
                        document=lead_magnet.telegram_file_id,
                        caption=f"üìÑ {lead_magnet.name}"
                    )
                except Exception as file_error:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {file_error}")
                    # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
                    if lead_magnet.file_url:
                        keyboard = [[InlineKeyboardButton("üìÑ –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª", url=lead_magnet.file_url)]]
                        await context.bot.send_message(
                            chat_id=query.message.chat_id,
                            text="–ò–ª–∏ —Å–∫–∞—á–∞–π—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:",
                            reply_markup=InlineKeyboardMarkup(keyboard)
                        )
            else:
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å—Å—ã–ª–æ–∫
                keyboard = []
                
                if lead_magnet.type == "pdf" and lead_magnet.file_url:
                    keyboard.append([
                        InlineKeyboardButton("üìÑ –°–∫–∞—á–∞—Ç—å PDF", url=lead_magnet.file_url)
                    ])
                elif lead_magnet.type == "google_sheet" and lead_magnet.file_url:
                    keyboard.append([
                        InlineKeyboardButton("üìä –û—Ç–∫—Ä—ã—Ç—å —Ç–∞–±–ª–∏—Ü—É", url=lead_magnet.file_url)
                    ])
                elif lead_magnet.type == "link" and lead_magnet.file_url:
                    keyboard.append([
                        InlineKeyboardButton("üîó –ü–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ", url=lead_magnet.file_url)
                    ])
                
                reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None
                
                await query.edit_message_text(
                    message_text,
                    parse_mode="HTML",
                    reply_markup=reply_markup
                )
            
            logger.info(f"–í—ã–¥–∞–Ω –ª–∏–¥-–º–∞–≥–Ω–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}: {lead_magnet.name}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≥—Ä–µ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                await warmup_service.start_warmup_for_user(str(db_user.id))
                logger.info(f"–ó–∞–ø—É—â–µ–Ω –ø—Ä–æ–≥—Ä–µ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
            except Exception as warmup_error:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≥—Ä–µ–≤–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {warmup_error}")
                # –ü—Ä–æ–≥—Ä–µ–≤ –Ω–µ –∫—Ä–∏—Ç–∏—á–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}: {e}")
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –ø–æ–¥–∞—Ä–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode="HTML"
        )





async def subscribe_channel_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª".
    """
    query = update.callback_query
    user = query.from_user
    await query.answer()
    
    # –°—Å—ã–ª–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª
    channel_link = "https://t.me/osnovaputi"
    
    message_text = (
        "üì∫ <b>–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª –ø—Ä–æ–µ–∫—Ç–∞!</b>\n\n"
        "üî• –ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ:\n"
        "‚Ä¢ –ü–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é\n"
        "‚Ä¢ –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã\n"
        "‚Ä¢ –ê–Ω–æ–Ω—Å—ã –Ω–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤\n"
        "‚Ä¢ –û–±—â–µ–Ω–∏–µ —Å –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–∞–º–∏\n\n"
        "üëá –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:"
    )
    
    keyboard = [
        [InlineKeyboardButton("üì∫ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=channel_link)],
        [InlineKeyboardButton("‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_subscription")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        message_text,
        parse_mode="HTML",
        reply_markup=reply_markup
    )


async def check_subscription_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è" - –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏.
    """
    query = update.callback_query
    user = query.from_user
    await query.answer()
    
    try:
        async with get_db_session() as session:
            user_service = UserService(session)
            lead_magnet_service = LeadMagnetService(session)
            warmup_service = WarmupService(session)
            telegram_service = TelegramService(context.bot)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            db_user = await user_service.get_user_by_telegram_id(user.id)
            if not db_user:
                await query.edit_message_text(
                    "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start",
                    parse_mode="HTML"
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
            is_subscribed = await telegram_service.check_channel_subscription(user.id)
            if not is_subscribed:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å–µ –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω
                keyboard = [
                    [InlineKeyboardButton("üì∫ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=f"https://t.me/{settings.CHANNEL_USERNAME}")],
                    [InlineKeyboardButton("‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_subscription")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                try:
                    await query.edit_message_text(
                        "‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                        parse_mode="HTML",
                        reply_markup=reply_markup
                    )
                except Exception as edit_error:
                    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º
                    if "Message is not modified" in str(edit_error):
                        await query.answer("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª.")
                    else:
                        raise edit_error
                return
            
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω, –≤—ã–¥–∞–µ–º –ª–∏–¥-–º–∞–≥–Ω–∏—Ç
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª—É—á–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ª–∏–¥-–º–∞–≥–Ω–∏—Ç
            has_lead_magnet = await lead_magnet_service.user_has_lead_magnet(str(db_user.id))
            
            if has_lead_magnet:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–ª—É—á–∞–ª –ª–∏–¥-–º–∞–≥–Ω–∏—Ç
                await query.edit_message_text(
                    "üéÅ –í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –ø–æ–¥–∞—Ä–æ–∫!\n\n"
                    "üìã –ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–µ–Ω –µ—â–µ –æ–¥–∏–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç—Ä–µ–∫–µ—Ä–∞, "
                    "–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    parse_mode="HTML"
                )
                return
            
            # –í—ã–¥–∞–µ–º –ª–∏–¥-–º–∞–≥–Ω–∏—Ç
            lead_magnet = await lead_magnet_service.give_lead_magnet_to_user(str(db_user.id))
            
            if not lead_magnet:
                await query.edit_message_text(
                    "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–¥–∞—Ä–æ–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    parse_mode="HTML"
                )
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–æ–º
            message_text = (
                f"üéÅ <b>–í–∞—à –ø–æ–¥–∞—Ä–æ–∫ –≥–æ—Ç–æ–≤!</b>\n\n"
                f"üìã <b>{lead_magnet.name}</b>\n\n"
            )
            
            if lead_magnet.message_text:
                message_text += f"{lead_magnet.message_text}\n\n"
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞
            keyboard = []
            
            if lead_magnet.type == "pdf":
                keyboard.append([
                    InlineKeyboardButton("üìÑ –°–∫–∞—á–∞—Ç—å PDF", url=lead_magnet.file_url)
                ])
            elif lead_magnet.type == "google_sheet":
                keyboard.append([
                    InlineKeyboardButton("üìä –û—Ç–∫—Ä—ã—Ç—å —Ç–∞–±–ª–∏—Ü—É", url=lead_magnet.file_url)
                ])
            elif lead_magnet.type == "link":
                keyboard.append([
                    InlineKeyboardButton("üîó –ü–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ", url=lead_magnet.file_url)
                ])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                message_text,
                parse_mode="HTML",
                reply_markup=reply_markup
            )
            
            logger.info(f"–í—ã–¥–∞–Ω –ª–∏–¥-–º–∞–≥–Ω–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}: {lead_magnet.name}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≥—Ä–µ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                await warmup_service.start_warmup_for_user(str(db_user.id))
                logger.info(f"–ó–∞–ø—É—â–µ–Ω –ø—Ä–æ–≥—Ä–µ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
            except Exception as warmup_error:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≥—Ä–µ–≤–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {warmup_error}")
                # –ü—Ä–æ–≥—Ä–µ–≤ –Ω–µ –∫—Ä–∏—Ç–∏—á–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}")
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode="HTML"
        )


# –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
get_gift_command = CommandHandler("gift", get_gift_command_handler)
gift_button_callback = CallbackQueryHandler(gift_button_callback_handler, pattern="^get_gift$")
subscribe_channel_callback = CallbackQueryHandler(subscribe_channel_callback_handler, pattern="^subscribe_channel$")
check_subscription_callback = CallbackQueryHandler(check_subscription_callback_handler, pattern="^check_subscription$")
