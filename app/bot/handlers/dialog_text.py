"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –¥–∏–∞–ª–æ–≥–æ–≤.

–°–æ–¥–µ—Ä–∂–∏—Ç –ª–æ–≥–∏–∫—É –ø–æ–∏—Å–∫–∞ –∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
"""

from telegram import Update
from telegram.ext import ContextTypes
from loguru import logger

from app.core.database import get_db_session
from app.services.dialog_service import DialogService
from app.schemas.dialog import DialogSearchRequest
from app.bot.utils.admin_check import is_admin


async def dialog_text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –¥–∏–∞–ª–æ–≥–∞—Ö."""
    user = update.effective_user
    message = update.message
    
    if not user or not message or not message.text:
        return
    
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–æ–≤
    if message.text.startswith('/') or await is_admin(user.id):
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        query_text = message.text.strip()
        if len(query_text) < 2:  # –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–ø—Ä–æ—Å
            return
        
        async with get_db_session() as session:
            dialog_service = DialogService(session)
            
            # –ò—â–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏
            search_request = DialogSearchRequest(query=query_text, limit=3)
            search_results = await dialog_service.search_dialogs(search_request)
            
            if not search_results:
                # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
                await message.reply_text(
                    "ü§î –ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –Ω–∞—à–µ–ª –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å.\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    parse_mode="HTML"
                )
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
            for result in search_results:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –æ—Ç–≤–µ—Ç
                for answer in result.answers:
                    if not answer.is_active:
                        continue
                    
                    try:
                        if answer.answer_type == "text":
                            # –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
                            await message.reply_text(
                                answer.answer_text,
                                parse_mode="HTML"
                            )
                        elif answer.answer_type == "image" and answer.additional_data:
                            # –û—Ç–≤–µ—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
                            await message.reply_photo(
                                photo=answer.additional_data,
                                caption=answer.answer_text,
                                parse_mode="HTML"
                            )
                        elif answer.answer_type == "document" and answer.additional_data:
                            # –û—Ç–≤–µ—Ç —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º
                            await message.reply_document(
                                document=answer.additional_data,
                                caption=answer.answer_text,
                                parse_mode="HTML"
                            )
                        else:
                            # Fallback –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
                            await message.reply_text(
                                answer.answer_text,
                                parse_mode="HTML"
                            )
                        
                        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}: {result.question.question_text[:50]}...")
                        
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}: {e}")
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –∫–∞–∫ fallback
                        try:
                            await message.reply_text(
                                answer.answer_text,
                                parse_mode="HTML"
                            )
                        except Exception as fallback_error:
                            logger.error(f"–û—à–∏–±–∫–∞ fallback –æ—Ç–≤–µ—Ç–∞: {fallback_error}")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∏—Å–∫–∞–ª: '{query_text}', –Ω–∞–π–¥–µ–Ω–æ {len(search_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤: {e}")
        # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ–±—ã –Ω–µ –Ω–∞—Ä—É—à–∞—Ç—å UX


async def dialog_admin_text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤."""
    user = update.effective_user
    message = update.message
    
    if not user or not message or not message.text:
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not await is_admin(user.id):
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
    action = context.user_data.get('action')
    if not action or not action.startswith('creating_dialog'):
        return
    
    try:
        if action == 'creating_dialog':
            await _handle_creating_dialog_name(update, context)
        elif action == 'creating_dialog_description':
            await _handle_creating_dialog_description(update, context)
        elif action == 'creating_dialog_question':
            await _handle_creating_dialog_question(update, context)
        elif action == 'creating_dialog_question_keywords':
            await _handle_creating_dialog_question_keywords(update, context)
        elif action == 'creating_dialog_answer':
            await _handle_creating_dialog_answer(update, context)
        elif action == 'creating_dialog_answer_type':
            await _handle_creating_dialog_answer_type(update, context)
        elif action == 'creating_dialog_answer_data':
            await _handle_creating_dialog_answer_data(update, context)
        elif action == 'creating_dialog_finish':
            await _handle_creating_dialog_finish(update, context)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞: {e}")
        await message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


async def _handle_creating_dialog_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞."""
    message = update.message
    dialog_name = message.text.strip()
    
    if len(dialog_name) < 2:
        await message.reply_text("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
    context.user_data['dialog_data']['name'] = dialog_name
    context.user_data['action'] = 'creating_dialog_description'
    
    await message.reply_text(
        f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞: <b>{dialog_name}</b>\n\n"
        "üìÑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ (–∏–ª–∏ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):",
        parse_mode="HTML"
    )


async def _handle_creating_dialog_description(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞."""
    message = update.message
    description = message.text.strip()
    
    if description.lower() not in ['–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'skip', '']:
        context.user_data['dialog_data']['description'] = description
    else:
        context.user_data['dialog_data']['description'] = None
    
    context.user_data['action'] = 'creating_dialog_question'
    
    await message.reply_text(
        "‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ\n\n"
        "‚ùì –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –¥–∏–∞–ª–æ–≥–∞:",
        parse_mode="HTML"
    )


async def _handle_creating_dialog_question(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤–æ–ø—Ä–æ—Å–∞ –¥–∏–∞–ª–æ–≥–∞."""
    message = update.message
    question_text = message.text.strip()
    
    if len(question_text) < 3:
        await message.reply_text("‚ùå –í–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
    context.user_data['dialog_data']['current_question'] = {
        'question_text': question_text,
        'answers': []
    }
    context.user_data['action'] = 'creating_dialog_question_keywords'
    
    await message.reply_text(
        f"‚úÖ –í–æ–ø—Ä–æ—Å: <b>{question_text}</b>\n\n"
        "üîë –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é) –∏–ª–∏ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
        parse_mode="HTML"
    )


async def _handle_creating_dialog_question_keywords(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤–æ–ø—Ä–æ—Å–∞."""
    message = update.message
    keywords = message.text.strip()
    
    if keywords.lower() not in ['–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'skip', '']:
        context.user_data['dialog_data']['current_question']['keywords'] = keywords
    else:
        context.user_data['dialog_data']['current_question']['keywords'] = None
    
    context.user_data['action'] = 'creating_dialog_answer'
    
    await message.reply_text(
        "‚úÖ –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã\n\n"
        "üí¨ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å:",
        parse_mode="HTML"
    )


async def _handle_creating_dialog_answer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å."""
    message = update.message
    answer_text = message.text.strip()
    
    if len(answer_text) < 2:
        await message.reply_text("‚ùå –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç
    context.user_data['dialog_data']['current_question']['answers'].append({
        'answer_text': answer_text,
        'answer_type': 'text',
        'additional_data': None
    })
    context.user_data['action'] = 'creating_dialog_answer_type'
    
    await message.reply_text(
        f"‚úÖ –û—Ç–≤–µ—Ç: <b>{answer_text}</b>\n\n"
        "üìé –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞:\n"
        "‚Ä¢ <b>text</b> - –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç\n"
        "‚Ä¢ <b>image</b> - —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º\n"
        "‚Ä¢ <b>document</b> - —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞:",
        parse_mode="HTML"
    )


async def _handle_creating_dialog_answer_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ—Ç–≤–µ—Ç–∞."""
    message = update.message
    answer_type = message.text.strip().lower()
    
    if answer_type not in ['text', 'image', 'document']:
        await message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞. –í—ã–±–µ—Ä–∏—Ç–µ: text, image –∏–ª–∏ document:")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞
    current_answers = context.user_data['dialog_data']['current_question']['answers']
    current_answers[-1]['answer_type'] = answer_type
    
    if answer_type == 'text':
        context.user_data['action'] = 'creating_dialog_finish'
        await message.reply_text(
            "‚úÖ –¢–∏–ø –æ—Ç–≤–µ—Ç–∞: —Ç–µ–∫—Å—Ç\n\n"
            "‚ùì –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å?\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç':",
            parse_mode="HTML"
        )
    else:
        context.user_data['action'] = 'creating_dialog_answer_data'
        await message.reply_text(
            f"‚úÖ –¢–∏–ø –æ—Ç–≤–µ—Ç–∞: {answer_type}\n\n"
            f"üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ {'–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ' if answer_type == 'image' else '–¥–æ–∫—É–º–µ–Ω—Ç'} "
            f"–∏–ª–∏ file_id –¥–ª—è {answer_type}:",
            parse_mode="HTML"
        )


async def _handle_creating_dialog_answer_data(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞."""
    message = update.message
    answer_type = context.user_data['dialog_data']['current_question']['answers'][-1]['answer_type']
    
    # –ü–æ–ª—É—á–∞–µ–º file_id –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    file_id = None
    if message.photo:
        file_id = message.photo[-1].file_id
    elif message.document:
        file_id = message.document.file_id
    elif message.text and message.text.startswith('BAAD'):
        file_id = message.text.strip()
    
    if not file_id:
        await message.reply_text(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å {'–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ' if answer_type == 'image' else '–¥–æ–∫—É–º–µ–Ω—Ç'}. "
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ file_id:",
            parse_mode="HTML"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id
    context.user_data['dialog_data']['current_question']['answers'][-1]['additional_data'] = file_id
    context.user_data['action'] = 'creating_dialog_finish'
    
    await message.reply_text(
        f"‚úÖ {'–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ' if answer_type == 'image' else '–î–æ–∫—É–º–µ–Ω—Ç'} —Å–æ—Ö—Ä–∞–Ω–µ–Ω\n\n"
        "‚ùì –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å?\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç':",
        parse_mode="HTML"
    )


async def _handle_creating_dialog_finish(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞."""
    message = update.message
    response = message.text.strip().lower()
    
    if response in ['–¥–∞', 'yes', 'y', '–¥–æ–±–∞–≤–∏—Ç—å']:
        context.user_data['action'] = 'creating_dialog_answer'
        await message.reply_text(
            "üí¨ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å:",
            parse_mode="HTML"
        )
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –∫ –¥–∏–∞–ª–æ–≥—É
    context.user_data['dialog_data']['questions'].append(context.user_data['dialog_data']['current_question'])
    context.user_data['dialog_data']['current_question'] = None
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥
    try:
        from app.schemas.dialog import DialogCreate, DialogQuestionCreate, DialogAnswerCreate
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
        dialog_data = DialogCreate(
            name=context.user_data['dialog_data']['name'],
            description=context.user_data['dialog_data']['description'],
            questions=[
                DialogQuestionCreate(
                    question_text=q['question_text'],
                    keywords=q['keywords'],
                    answers=[
                        DialogAnswerCreate(
                            answer_text=a['answer_text'],
                            answer_type=a['answer_type'],
                            additional_data=a['additional_data']
                        ) for a in q['answers']
                    ]
                ) for q in context.user_data['dialog_data']['questions']
            ]
        )
        
        async with get_db_session() as session:
            dialog_service = DialogService(session)
            dialog = await dialog_service.create_dialog(dialog_data)
            
            await message.reply_text(
                f"üéâ <b>–î–∏–∞–ª–æ–≥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</b>\n\n"
                f"üìã <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {dialog.name}\n"
                f"üìä <b>–í–æ–ø—Ä–æ—Å–æ–≤:</b> {len(dialog.questions)}\n"
                f"üìä <b>–û—Ç–≤–µ—Ç–æ–≤:</b> {sum(len(q.answers) for q in dialog.questions)}\n\n"
                f"‚úÖ –î–∏–∞–ª–æ–≥ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!",
                parse_mode="HTML"
            )
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            context.user_data.pop('action', None)
            context.user_data.pop('dialog_data', None)
            
            logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} —Å–æ–∑–¥–∞–ª –¥–∏–∞–ª–æ–≥: {dialog.name}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞: {e}")
        await message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            parse_mode="HTML"
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –∫–∞–∫ —Ñ—É–Ω–∫—Ü–∏–∏, –∞ MessageHandler —Å–æ–∑–¥–∞–µ—Ç—Å—è –≤ __init__.py
