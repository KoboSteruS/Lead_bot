"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.

–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.
"""

from datetime import datetime
from typing import Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CallbackQueryHandler, CommandHandler
from loguru import logger

from app.core.database import get_database
from app.services import UserService, ProductService, LeadMagnetService, WarmupService, PaymentService


async def _restore_uuid(short_id: str, product_service: ProductService) -> Optional[str]:
    """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–ª–Ω—ã–π UUID –∏–∑ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ ID —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫ –≤ –±–∞–∑–µ."""
    try:
        # –ò—â–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã —Å UUID –Ω–∞—á–∏–Ω–∞—é—â–∏–º—Å—è –Ω–∞ short_id  
        products = await product_service.get_all_products()
        for product in products:
            if str(product.id).replace('-', '').startswith(short_id):
                return str(product.id)
        
        # –ò—â–µ–º –æ—Ñ—Ñ–µ—Ä—ã —Å UUID –Ω–∞—á–∏–Ω–∞—é—â–∏–º—Å—è –Ω–∞ short_id
        offers = await product_service.get_all_offers()
        for offer in offers:
            if str(offer.id).replace('-', '').startswith(short_id):
                return str(offer.id)
                
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è UUID –¥–ª—è {short_id}: {e}")
        return None


async def _restore_warmup_scenario_uuid(short_id: str, warmup_service: "WarmupService") -> Optional[str]:
    """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–ª–Ω—ã–π UUID —Å—Ü–µ–Ω–∞—Ä–∏—è –ø—Ä–æ–≥—Ä–µ–≤–∞ –∏–∑ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ ID."""
    try:
        # –ò—â–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Å UUID –Ω–∞—á–∏–Ω–∞—é—â–∏–º—Å—è –Ω–∞ short_id
        scenarios = await warmup_service.get_all_scenarios()
        for scenario in scenarios:
            if str(scenario.id).replace('-', '').startswith(short_id):
                return str(scenario.id)
                
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è UUID —Å—Ü–µ–Ω–∞—Ä–∏—è –ø—Ä–æ–≥—Ä–µ–≤–∞ –¥–ª—è {short_id}: {e}")
        return None


async def _safe_edit_message(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str, reply_markup=None) -> None:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞."""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º chat_id –∑–∞—Ä–∞–Ω–µ–µ
        chat_id = None
        message_id = None
        
        if update.callback_query and update.callback_query.message:
            chat_id = update.callback_query.message.chat.id
            message_id = update.callback_query.message.message_id
        elif update.effective_chat:
            chat_id = update.effective_chat.id
        elif update.message and update.message.chat:
            chat_id = update.message.chat.id
            
        if not chat_id:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å chat_id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è. Update: {update}")
            logger.error(f"Callback query: {update.callback_query}")
            logger.error(f"Effective chat: {update.effective_chat}")
            logger.error(f"Message: {update.message}")
            return
            
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å message_id
        if message_id:
            try:
                await context.bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=message_id,
                    text=text,
                    reply_markup=reply_markup,
                    parse_mode='HTML'
                )
                return
            except Exception as edit_error:
                logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {edit_error}")
                # Fallback –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await context.bot.send_message(
            chat_id=chat_id,
            text=text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ _safe_edit_message: {e}")
        # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ effective_user –µ—Å–ª–∏ –µ—Å—Ç—å
        try:
            if update.effective_user:
                await context.bot.send_message(
                    chat_id=update.effective_user.id,
                    text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–¥–º–∏–Ω–∫–∏: {text[:100]}..."
                )
        except:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–∂–µ fallback —Å–æ–æ–±—â–µ–Ω–∏–µ")


async def admin_command_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.
    
    Args:
        update: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = update.effective_user
        message_text = update.message.text
        
        if not user:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        admin_ids = [1670311707]  # –í–∞—à Telegram ID –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        
        if user.id not in admin_ids:
            await update.message.reply_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
            )
            return
        
        # –†–∞–∑–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—É
        parts = message_text.split()
        if len(parts) < 2:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —Å –∫–Ω–æ–ø–∫–∞–º–∏
            await _show_admin_panel(update, context)
            return
        
        command = parts[1]
        args = parts[2:] if len(parts) > 2 else []
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        async for session in get_database():
            user_service = UserService(session)
            payment_service = PaymentService(session)
            reminder_service = ReminderService(session)
            analytics_service = AnalyticsService(session)
            product_service = ProductService(session)
            
            if command == "stats":
                await _handle_stats_command(update, context, user_service, payment_service)
            
            elif command == "users":
                await _handle_users_command(update, context, user_service, args)
            
            elif command == "payments":
                await _handle_payments_command(update, context, payment_service, args)
            
            elif command == "reminders":
                await _handle_reminders_command(update, context, reminder_service)
            
            elif command == "activity":
                await _handle_activity_command(update, context, user_service)
            
            elif command == "settings":
                await _handle_settings_command(update, context)
            
            else:
                await update.message.reply_text(
                    f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}\n"
                    "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: stats, users, payments, reminders, activity, settings"
                )
            
            break  # –í—ã—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π —Å–µ—Å—Å–∏–∏
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∞–¥–º–∏–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã")


async def _show_admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE, is_callback: bool = False) -> None:
    """–ü–æ–∫–∞–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏."""
    try:
        message_text = (
            "üîß <b>–ü–æ–ª–Ω–∞—è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
            "üíº <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞:</b>\n"
            "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ‚Ä¢ üí≥ –ü–ª–∞—Ç–µ–∂–∏ ‚Ä¢ üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞\n"
            "üïò –†–∏—Ç—É–∞–ª—ã ‚Ä¢ üìù –ö–æ–Ω—Ç–µ–Ω—Ç (+ –¢—Ä–∏–ø–≤–∞–π–µ—Ä—ã)\n"
            "üì¢ –†–∞—Å—Å—ã–ª–∫–∏ ‚Ä¢ ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Ä¢ üöÄ –°–∏—Å—Ç–µ–º–∞"
        )
        
        keyboard = [
            # –û—Å–Ω–æ–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            [InlineKeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="admin_users_manage")],
            [InlineKeyboardButton("üí≥ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞–º–∏", callback_data="admin_payments_manage")],
            
            # –ö–æ–Ω—Ç–µ–Ω—Ç –∏ —Ñ—É–Ω–∫—Ü–∏–∏
            [InlineKeyboardButton("üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º", callback_data="admin_content_manage")],
            [InlineKeyboardButton("üïò –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Ç—É–∞–ª–∞–º–∏", callback_data="admin_rituals_manage")],
            
            # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã
            [InlineKeyboardButton("üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="admin_analytics")],
            [InlineKeyboardButton("üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —á–∞—Ç–∞—Ö", callback_data="admin_activity")],
            
            # –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
            [InlineKeyboardButton("üì¢ –ú–∞—Å—Å–æ–≤—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏", callback_data="admin_broadcast")],
            [InlineKeyboardButton("‚öôÔ∏è –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_system_settings")],
            
            # –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
            [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∑–∞–¥–∞—á", callback_data="admin_restart_tasks"),
             InlineKeyboardButton("üìã –õ–æ–≥–∏", callback_data="admin_logs")],
            
            # –°—Ç–∞—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
            [InlineKeyboardButton("üìä –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await _safe_edit_message(update, context, message_text, reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏: {e}")
        error_text = "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"
        await _safe_edit_message(update, context, error_text)


async def admin_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""
    try:
        query = update.callback_query
        user = query.from_user
        
        logger.info(f"üîç –ü–æ–ª—É—á–µ–Ω admin callback: {query.data}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        admin_ids = [1670311707]  # –í–∞—à Telegram ID –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        
        if user.id not in admin_ids:
            await context.bot.answer_callback_query(query.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback, –Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
        try:
            await context.bot.answer_callback_query(query.id)
        except Exception as callback_error:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ callback'–∞
            if "too old" in str(callback_error) or "timeout" in str(callback_error):
                logger.debug(f"Callback –∑–∞–ø—Ä–æ—Å –∏—Å—Ç–µ–∫: {callback_error}")
            else:
                logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback: {callback_error}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        async for session in get_database():
            user_service = UserService(session)
            payment_service = PaymentService(session)
            reminder_service = ReminderService(session)
            product_service = ProductService(session)
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
            if query.data == "admin_stats":
                await _handle_stats_command(update, context, user_service, payment_service, is_callback=True)
            elif query.data == "admin_activity":
                await _handle_activity_command(update, context, user_service, is_callback=True)
            elif query.data == "admin_back":
                await _show_admin_panel(update, context, is_callback=True)
            
            # –ù–æ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
            elif query.data == "admin_users_manage":
                await _handle_users_management(update, context, user_service, is_callback=True)
            elif query.data.startswith("admin_user_list_page_"):
                page = int(query.data.replace("admin_user_list_page_", ""))
                await _handle_list_all_users(update, context, user_service, is_callback=True, page=page)
            elif query.data.startswith("admin_user_"):
                await _handle_user_action(update, context, user_service, query.data, is_callback=True)
            
            # –ù–æ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞–º–∏
            elif query.data == "admin_payments_manage":
                await _handle_payments_management(update, context, payment_service, is_callback=True)
            elif query.data.startswith("admin_payment_"):
                await _handle_payment_action(update, context, payment_service, query.data, is_callback=True)
            
            # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
            elif query.data == "admin_content_manage":
                await _handle_content_management(update, context, is_callback=True)
            elif query.data.startswith("admin_content_"):
                if query.data == "admin_content_tripwires":
                    await _handle_tripwire_management(update, context, product_service, is_callback=True)
                elif query.data == "admin_content_leadmagnets":
                    await _handle_lead_magnets_management(update, context, is_callback=True)
                elif query.data == "admin_content_warmup":
                    await _handle_warmup_management(update, context, is_callback=True)
                elif query.data == "admin_content_messages":
                    await _handle_messages_management(update, context, is_callback=True)
                else:
                    await _handle_content_action(update, context, query.data, is_callback=True)
            
            # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ —à–∞–±–ª–æ–Ω–∞–º–∏
            elif query.data.startswith("admin_messages_"):
                await _handle_messages_action(update, context, query.data, is_callback=True)
            
            # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∏–ø–≤–∞–π–µ—Ä–∞–º–∏
            elif query.data == "admin_tripwire_manage":
                await _handle_tripwire_management(update, context, product_service, is_callback=True)
            elif (query.data.startswith("admin_tripwire_") or 
                  query.data.startswith("admin_tp_") or 
                  query.data.startswith("admin_to_") or 
                  query.data.startswith("admin_create_")):
                logger.info(f"üéØ –ù–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ _handle_tripwire_action: {query.data}")
                await _handle_tripwire_action(update, context, product_service, query.data, is_callback=True)
            
            # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏–¥ –º–∞–≥–Ω–∏—Ç–∞–º–∏
            elif query.data.startswith("admin_lead_magnet_"):
                await _handle_lead_magnet_action(update, context, query.data, is_callback=True)
            
            # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏ –ø—Ä–æ–≥—Ä–µ–≤–∞
            elif query.data.startswith("admin_warmup_"):
                await _handle_warmup_action(update, context, query.data, is_callback=True)
            
            # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Ç—É–∞–ª–∞–º–∏
            elif query.data == "admin_rituals_manage":
                await _handle_rituals_management(update, context, is_callback=True)
            elif query.data.startswith("admin_ritual_"):
                await _handle_ritual_action(update, context, query.data, is_callback=True)
            
            # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
            elif query.data == "admin_analytics":
                await _handle_analytics_dashboard(update, context, user_service, payment_service, is_callback=True)
            
            # –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
            elif query.data == "admin_broadcast":
                await _handle_broadcast_system(update, context, is_callback=True)
            elif query.data == "admin_system_settings":
                await _handle_system_settings(update, context, is_callback=True)
            elif query.data == "admin_restart_tasks":
                await _handle_restart_tasks(update, context, is_callback=True)
            elif query.data == "admin_logs":
                await _handle_logs_view(update, context, is_callback=True)
            
            else:
                await _safe_edit_message(update, context, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
            
            break  # –í—ã—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π —Å–µ—Å—Å–∏–∏
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ callback: {e}")
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ –Ω–µ —Å–≤—è–∑–∞–Ω–∞ —Å –∏—Å—Ç–µ—á–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏
            if "too old" not in str(e) and "timeout" not in str(e):
                await context.bot.answer_callback_query(query.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        except Exception as callback_error:
            # –ü–æ–ª–Ω–æ—Å—Ç—å—é –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ callback'–æ–≤ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –æ—à–∏–±–æ–∫
            logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –æ—à–∏–±–æ–∫: {callback_error}")


async def _handle_stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                               user_service: UserService, payment_service: PaymentService, 
                               is_callback: bool = False) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        total_users = await user_service.get_users_count()
        active_users = await user_service.get_active_users_count()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–ª–∞—Ç–µ–∂–µ–π
        total_payments = await payment_service.get_payments_count()
        total_revenue = await payment_service.get_total_revenue()
        
        stats_text = (
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
            f"üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ: {total_users}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_users}\n\n"
            f"üí≥ <b>–ü–ª–∞—Ç–µ–∂–∏:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {total_payments}\n"
            f"‚Ä¢ –û–±—â–∏–π –¥–æ—Ö–æ–¥: {total_revenue} ‚ÇΩ\n\n"
            f"üìà <b>–ö–æ–Ω–≤–µ—Ä—Å–∏—è:</b> {(active_users/max(total_users, 1)*100):.1f}%"
        )
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await _safe_edit_message(update, context, stats_text, reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        error_text = "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
        await _safe_edit_message(update, context, error_text)


async def _handle_users_command(update: Update, context: ContextTypes.DEFAULT_TYPE,
                               user_service: UserService, args: list, is_callback: bool = False) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏."""
    try:
        users = await user_service.get_recent_users(limit=10)
        
        if not users:
            users_text = "üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</b>\n\n‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        else:
            users_text = "üë• <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n\n"
            for i, user in enumerate(users, 1):
                status_emoji = "‚úÖ" if user.status == "active" else "‚è∏Ô∏è"
                users_text += (
                    f"{i}. {status_emoji} {user.display_name}\n"
                    f"   ID: {user.telegram_id}\n"
                    f"   –°—Ç–∞—Ç—É—Å: {user.status}\n\n"
                )
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await _safe_edit_message(update, context, users_text, reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        error_text = "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        await _safe_edit_message(update, context, error_text)


async def _handle_payments_command(update: Update, context: ContextTypes.DEFAULT_TYPE,
                                  payment_service: PaymentService, args: list, is_callback: bool = False) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞–º–∏."""
    try:
        payments = await payment_service.get_recent_payments(limit=5)
        
        if not payments:
            payments_text = "üí≥ <b>–ü–ª–∞—Ç–µ–∂–∏</b>\n\n‚ùå –ü–ª–∞—Ç–µ–∂–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        else:
            payments_text = "üí≥ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∏:</b>\n\n"
            for i, payment in enumerate(payments, 1):
                status_emoji = "‚úÖ" if payment.status == "completed" else "‚è≥"
                payments_text += (
                    f"{i}. {status_emoji} {payment.amount} {payment.currency}\n"
                    f"   –û—Ç: {payment.user.display_name if payment.user else 'N/A'}\n"
                    f"   –î–∞—Ç–∞: {payment.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
                )
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await _safe_edit_message(update, context, payments_text, reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π: {e}")
        error_text = "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π"
        await _safe_edit_message(update, context, error_text)


async def _handle_reminders_command(update: Update, context: ContextTypes.DEFAULT_TYPE,
                                   reminder_service: ReminderService, is_callback: bool = False) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        enabled_count = await reminder_service.get_enabled_reminders_count()
        
        reminders_text = (
            f"‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è</b>\n\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {enabled_count}\n"
            f"‚Ä¢ –°–ª–µ–¥—É—é—â–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞: –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞\n\n"
            f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n"
            f"–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
        )
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await _safe_edit_message(update, context, reminders_text, reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
        error_text = "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö"
        await _safe_edit_message(update, context, error_text)


async def _handle_activity_command(update: Update, context: ContextTypes.DEFAULT_TYPE,
                                  user_service: UserService, is_callback: bool = False) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –∞–Ω–∞–ª–∏–∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        total_users = await user_service.get_users_count()
        active_users = await user_service.get_active_users_count()
        
        activity_text = (
            f"üìà <b>–ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</b>\n\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_users}\n"
            f"üìä –ü—Ä–æ—Ü–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {(active_users/max(total_users, 1)*100):.1f}%\n\n"
            f"üìã <b>–°–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:</b>\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —á–∞—Ç–∞—Ö\n"
            f"‚Ä¢ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã\n"
            f"‚Ä¢ –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
            f"–ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
        )
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await _safe_edit_message(update, context, activity_text, reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
        error_text = "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
        await _safe_edit_message(update, context, error_text)


async def _handle_settings_command(update: Update, context: ContextTypes.DEFAULT_TYPE, is_callback: bool = False) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    try:
        from config.settings import settings
        
        settings_text = (
            f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</b>\n\n"
            f"ü§ñ <b>–û—Å–Ω–æ–≤–Ω—ã–µ:</b>\n"
            f"‚Ä¢ –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏: {'–í–∫–ª—é—á–µ–Ω' if settings.debug else '–í—ã–∫–ª—é—á–µ–Ω'}\n"
            f"‚Ä¢ –ì—Ä—É–ø–ø–∞: {settings.telegram_group_id}\n\n"
            f"üí≥ <b>–ü–ª–∞—Ç–µ–∂–∏:</b>\n"
            f"‚Ä¢ –í–∞–ª—é—Ç–∞: {settings.payment_currency}\n"
            f"‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å—É–º–º–∞: {settings.payment_amount}\n\n"
            f"üìä <b>–§—É–Ω–∫—Ü–∏–∏:</b>\n"
            f"‚Ä¢ ‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∏—Ç—É–∞–ª–æ–≤ –Ø–î–†–ê\n"
            f"‚Ä¢ ‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n"
            f"‚Ä¢ ‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥—Ä–µ–≤–∞\n"
            f"‚Ä¢ ‚úÖ –¢—Ä–∏–ø–≤–∞–π–µ—Ä—ã –∏ –ø—Ä–æ–¥–∞–∂–∏\n"
            f"‚Ä¢ ‚úÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã"
        )
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await _safe_edit_message(update, context, settings_text, reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        error_text = "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"
        await _safe_edit_message(update, context, error_text)


async def _handle_users_management(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                   user_service: UserService, is_callback: bool = False) -> None:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏."""
    try:
        users = await user_service.get_recent_users(limit=5)
        total_users = await user_service.get_users_count()
        active_users = await user_service.get_active_users_count()
        
        users_text = (
            f"üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>\n\n"
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ: {total_users}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_users}\n"
            f"‚Ä¢ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {total_users - active_users}\n\n"
            f"üë§ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
        )
        
        keyboard = []
        
        for i, user in enumerate(users, 1):
            status_emoji = "‚úÖ" if user.status == "active" else "‚è∏Ô∏è"
            users_text += f"{i}. {status_emoji} {user.display_name} (ID: {user.telegram_id})\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            keyboard.append([
                InlineKeyboardButton(f"üë§ {user.display_name[:15]}...", 
                                   callback_data=f"admin_user_view_{user.id}"),
                InlineKeyboardButton("‚úèÔ∏è", callback_data=f"admin_user_edit_{user.id}"),
                InlineKeyboardButton("üóëÔ∏è", callback_data=f"admin_user_delete_{user.id}")
            ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        keyboard.extend([
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_user_add")],
            [InlineKeyboardButton("üìã –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_user_list_all"),
             InlineKeyboardButton("üîç –ü–æ–∏—Å–∫", callback_data="admin_user_search")],
            [InlineKeyboardButton("üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_user_stats")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await _safe_edit_message(update, context, users_text, reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏: {e}")
        await _safe_edit_message(update, context, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")


async def _handle_payments_management(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                     payment_service: PaymentService, is_callback: bool = False) -> None:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞–º–∏."""
    try:
        payments = await payment_service.get_recent_payments(limit=5)
        total_payments = await payment_service.get_payments_count()
        total_revenue = await payment_service.get_total_revenue()
        
        payments_text = (
            f"üí≥ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞–º–∏</b>\n\n"
            f"üí∞ <b>–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å–≤–æ–¥–∫–∞:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –ø–ª–∞—Ç–µ–∂–µ–π: {total_payments}\n"
            f"‚Ä¢ –û–±—â–∏–π –¥–æ—Ö–æ–¥: {total_revenue:.2f} ‚ÇΩ\n"
            f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {(total_revenue/max(total_payments, 1)):.2f} ‚ÇΩ\n\n"
            f"üí≥ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∏:</b>\n"
        )
        
        keyboard = []
        
        for i, payment in enumerate(payments, 1):
            status_emoji = "‚úÖ" if payment.status == "paid" else "‚è≥"
            payments_text += (
                f"{i}. {status_emoji} {payment.amount} {payment.currency} "
                f"({payment.created_at.strftime('%d.%m %H:%M')})\n"
            )
            
            keyboard.append([
                InlineKeyboardButton(f"üí≥ {payment.amount} {payment.currency}", 
                                   callback_data=f"admin_payment_view_{payment.id}"),
                InlineKeyboardButton("‚úèÔ∏è", callback_data=f"admin_payment_edit_{payment.id}"),
                InlineKeyboardButton("‚ùå", callback_data=f"admin_payment_cancel_{payment.id}")
            ])
        
        keyboard.extend([
            [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂", callback_data="admin_payment_create")],
            [InlineKeyboardButton("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π", callback_data="admin_payment_analytics")],
            [InlineKeyboardButton("üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç", callback_data="admin_payment_report")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await _safe_edit_message(update, context, payments_text, reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞–º–∏: {e}")
        await _safe_edit_message(update, context, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞–º–∏")


async def _handle_content_management(update: Update, context: ContextTypes.DEFAULT_TYPE, is_callback: bool = False) -> None:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º."""
    try:
        content_text = (
            f"üìù <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º</b>\n\n"
            f"üéÅ <b>–õ–∏–¥-–º–∞–≥–Ω–∏—Ç—ã:</b>\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: 1 (7-–¥–Ω–µ–≤–Ω—ã–π —Ç—Ä–µ–∫–µ—Ä)\n"
            f"‚Ä¢ –°–∫–∞—á–∏–≤–∞–Ω–∏–π: 245\n\n"
            f"üî• <b>–°—Ü–µ–Ω–∞—Ä–∏–∏ –ø—Ä–æ–≥—Ä–µ–≤–∞:</b>\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: 1 (–æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π)\n"
            f"‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π: 5\n"
            f"‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è: 23.4%\n\n"
            f"üéØ <b>–¢—Ä–∏–ø–≤–∞–π–µ—Ä—ã:</b>\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: 1 (30 –¥–Ω–µ–π –ø–æ –•–∏–ª–ª—É)\n"
            f"‚Ä¢ –¶–µ–Ω–∞: 990 ‚ÇΩ\n"
            f"‚Ä¢ –ü—Ä–æ–¥–∞–∂: 12\n\n"
            f"üìã <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:</b>"
        )
        
        keyboard = [
            [InlineKeyboardButton("üéÅ –õ–∏–¥-–º–∞–≥–Ω–∏—Ç—ã", callback_data="admin_content_leadmagnets")],
            [InlineKeyboardButton("üî• –°—Ü–µ–Ω–∞—Ä–∏–∏ –ø—Ä–æ–≥—Ä–µ–≤–∞", callback_data="admin_content_warmup")],
            [InlineKeyboardButton("üéØ –¢—Ä–∏–ø–≤–∞–π–µ—Ä—ã", callback_data="admin_content_tripwires")],
            [InlineKeyboardButton("üìù –¢–µ–∫—Å—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π", callback_data="admin_content_messages")],
            [InlineKeyboardButton("üé® –ú–µ–¥–∏–∞ —Ñ–∞–π–ª—ã", callback_data="admin_content_media")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞", callback_data="admin_content_stats")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await _safe_edit_message(update, context, content_text, reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º: {e}")
        await _safe_edit_message(update, context, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º")


async def _handle_lead_magnets_management(update: Update, context: ContextTypes.DEFAULT_TYPE, is_callback: bool = False) -> None:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏–¥ –º–∞–≥–Ω–∏—Ç–∞–º–∏."""
    try:
        async for session in get_database():
            lead_magnet_service = LeadMagnetService(session)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ª–∏–¥ –º–∞–≥–Ω–∏—Ç–æ–≤
            stats = await lead_magnet_service.get_lead_magnet_stats()
            
            message_text = (
                f"üìö <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏–¥ –º–∞–≥–Ω–∏—Ç–∞–º–∏</b>\n\n"
                f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
                f"‚Ä¢ –í—Å–µ–≥–æ –≤—ã–¥–∞–Ω–æ: {stats.get('total_issued', 0)}\n"
                f"‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('unique_users', 0)}\n"
                f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ª–∏–¥ –º–∞–≥–Ω–∏—Ç–æ–≤: {stats.get('active_lead_magnets', 0)}\n\n"
                f"üéÅ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏:</b>\n"
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ª–∏–¥ –º–∞–≥–Ω–∏—Ç—ã
            active_magnets = await lead_magnet_service.get_active_lead_magnets()
            
            if active_magnets:
                for magnet in active_magnets[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                    status = "üü¢" if magnet.is_active else "üî¥"
                    type_icon = {
                        "pdf": "üìÑ",
                        "google_sheet": "üìä", 
                        "link": "üîó",
                        "text": "üìù"
                    }.get(magnet.type, "üìÅ")
                    
                    message_text += f"{status} {type_icon} {magnet.name}\n"
                    message_text += f"   üìù {magnet.description[:50]}...\n\n"
            else:
                message_text += "üì≠ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ª–∏–¥ –º–∞–≥–Ω–∏—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n\n"
            
            message_text += "üí° <b>–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> /gift"
            
            keyboard = [
                # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏–¥ –º–∞–≥–Ω–∏—Ç–∞–º–∏
                [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –ª–∏–¥ –º–∞–≥–Ω–∏—Ç", callback_data="admin_lead_magnet_create")],
                [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö", callback_data="admin_lead_magnet_list")],
                [InlineKeyboardButton("üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_lead_magnet_stats")],
                [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_lead_magnet_settings")],
                
                # –û–±—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_content_leadmagnets")],
                [InlineKeyboardButton("üîô –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º", callback_data="admin_content_manage")]
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            await _safe_edit_message(update, context, message_text, reply_markup)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏–¥ –º–∞–≥–Ω–∏—Ç–∞–º–∏: {e}")
        await _safe_edit_message(update, context, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏–¥ –º–∞–≥–Ω–∏—Ç–∞–º–∏")


async def _handle_lead_magnet_action(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                   action: str, is_callback: bool = False) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –ª–∏–¥ –º–∞–≥–Ω–∏—Ç–∞–º–∏."""
    try:
        async for session in get_database():
            lead_magnet_service = LeadMagnetService(session)
            
            if action == "admin_lead_magnet_create":
                await _handle_lead_magnet_create_form(update, context, lead_magnet_service, is_callback=True)
            elif action == "admin_lead_magnet_list":
                await _handle_lead_magnet_list(update, context, lead_magnet_service, is_callback=True)
            elif action == "admin_lead_magnet_stats":
                await _handle_lead_magnet_detailed_stats(update, context, lead_magnet_service, is_callback=True)
            elif action == "admin_lead_magnet_settings":
                await _handle_lead_magnet_settings(update, context, lead_magnet_service, is_callback=True)
            elif action.startswith("admin_lead_magnet_create_type_"):
                await _handle_lead_magnet_create_type_selection(update, context, action, lead_magnet_service, is_callback=True)
            elif action == "admin_lead_magnet_create_name":
                await _handle_lead_magnet_create_name_step(update, context, lead_magnet_service, is_callback=True)
            elif action == "admin_lead_magnet_create_description":
                await _handle_lead_magnet_create_description_step(update, context, lead_magnet_service, is_callback=True)
            elif action == "admin_lead_magnet_create_file_url":
                await _handle_lead_magnet_create_file_url_step(update, context, lead_magnet_service, is_callback=True)
            elif action == "admin_lead_magnet_create_message":
                await _handle_lead_magnet_create_message_step(update, context, lead_magnet_service, is_callback=True)
            elif action == "admin_lead_magnet_create_confirm":
                await _handle_lead_magnet_create_confirm(update, context, lead_magnet_service, is_callback=True)
            elif action == "admin_lead_magnet_create_final":
                await _handle_lead_magnet_create_final(update, context, lead_magnet_service, is_callback=True)
            else:
                await _safe_edit_message(update, context, f"üîß –§—É–Ω–∫—Ü–∏—è '{action}' –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π —Å –ª–∏–¥ –º–∞–≥–Ω–∏—Ç–∞–º–∏ {action}: {e}")
        await _safe_edit_message(update, context, "‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è —Å –ª–∏–¥ –º–∞–≥–Ω–∏—Ç–∞–º–∏")


async def _handle_warmup_management(update: Update, context: ContextTypes.DEFAULT_TYPE, is_callback: bool = False) -> None:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏ –ø—Ä–æ–≥—Ä–µ–≤–∞."""
    try:
        async for session in get_database():
            warmup_service = WarmupService(session)
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
            active_scenario = await warmup_service.get_active_scenario()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            total_scenarios = await warmup_service.get_all_scenarios()
            active_users = await warmup_service.get_active_warmup_users()
            
            message_text = (
                f"üî• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏ –ø—Ä–æ–≥—Ä–µ–≤–∞</b>\n\n"
                f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
                f"‚Ä¢ –í—Å–µ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: {len(total_scenarios)}\n"
                f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(active_users)}\n"
                f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π: {active_scenario.name if active_scenario else '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n\n"
            )
            
            if active_scenario:
                message_text += (
                    f"üéØ <b>–¢–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π:</b>\n"
                    f"‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {active_scenario.name}\n"
                    f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {active_scenario.description[:100] if active_scenario.description else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}...\n"
                    f"‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π: {len(active_scenario.messages)}\n\n"
                )
            else:
                message_text += "‚ö†Ô∏è <b>–ê–∫—Ç–∏–≤–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!</b>\n\n"
            
            message_text += "üí° <b>–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥—Ä–µ–≤–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º</b>"
            
            keyboard = [
                # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏
                [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π", callback_data="admin_warmup_create_scenario")],
                [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤", callback_data="admin_warmup_list_scenarios")],
                [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_warmup_settings")],
                
                # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                [InlineKeyboardButton("üí¨ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏", callback_data="admin_warmup_messages")],
                [InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –ø—Ä–æ–≥—Ä–µ–≤–µ", callback_data="admin_warmup_users")],
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
                [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_warmup_stats")],
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_content_warmup")],
                [InlineKeyboardButton("üîô –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º", callback_data="admin_content_manage")]
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            await _safe_edit_message(update, context, message_text, reply_markup)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏ –ø—Ä–æ–≥—Ä–µ–≤–∞: {e}")
        await _safe_edit_message(update, context, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏ –ø—Ä–æ–≥—Ä–µ–≤–∞")


async def _handle_warmup_action(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                               action: str, is_callback: bool = False) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏ –ø—Ä–æ–≥—Ä–µ–≤–∞."""
    try:
        async for session in get_database():
            warmup_service = WarmupService(session)
            
            if action == "admin_warmup_create_scenario":
                await _handle_warmup_create_scenario_form(update, context, warmup_service, is_callback=True)
            elif action == "admin_warmup_create_scenario_final":
                await _handle_warmup_create_scenario_final(update, context, warmup_service, is_callback=True)
            elif action == "admin_warmup_list_scenarios":
                await _handle_warmup_list_scenarios(update, context, warmup_service, is_callback=True)
            elif action == "admin_warmup_settings":
                await _handle_warmup_settings(update, context, warmup_service, is_callback=True)
            elif action == "admin_warmup_messages":
                await _handle_warmup_messages_management(update, context, warmup_service, is_callback=True)
            elif action == "admin_warmup_users":
                await _handle_warmup_users_list(update, context, warmup_service, is_callback=True)
            elif action == "admin_warmup_stats":
                await _handle_warmup_stats(update, context, warmup_service, is_callback=True)
            elif action.startswith("admin_warmup_scenario_"):
                await _handle_warmup_scenario_edit(update, context, warmup_service, action, is_callback=True)
            elif action.startswith("admin_warmup_edit_"):
                await _handle_warmup_edit_action(update, context, warmup_service, action, is_callback=True)
            elif action.startswith("admin_warmup_toggle_status_"):
                await _handle_warmup_toggle_status(update, context, warmup_service, action, is_callback=True)
            elif action.startswith("admin_warmup_delete_confirm_"):
                await _handle_warmup_delete_confirm(update, context, warmup_service, action, is_callback=True)
            elif action.startswith("admin_warmup_edit_name_confirm_"):
                await _handle_warmup_edit_name_confirm(update, context, warmup_service, action, is_callback=True)
            elif action.startswith("admin_warmup_edit_desc_confirm_"):
                await _handle_warmup_edit_desc_confirm(update, context, warmup_service, action, is_callback=True)
            else:
                await _safe_edit_message(update, context, f"üîß –§—É–Ω–∫—Ü–∏—è '{action}' –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π —Å —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏ –ø—Ä–æ–≥—Ä–µ–≤–∞ {action}: {e}")
        await _safe_edit_message(update, context, "‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è —Å —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏ –ø—Ä–æ–≥—Ä–µ–≤–∞")


async def _handle_warmup_create_scenario_form(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                            warmup_service: "WarmupService", is_callback: bool = False) -> None:
    """–§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è –ø—Ä–æ–≥—Ä–µ–≤–∞."""
    try:
        message_text = (
            "üî• <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è –ø—Ä–æ–≥—Ä–µ–≤–∞</b>\n\n"
            "üìù <b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è:</b>\n\n"
            "üí° <b>–°–æ–≤–µ—Ç—ã:</b>\n"
            "‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–Ω—è—Ç–Ω—ã–º –∏ –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω—ã–º\n"
            "‚Ä¢ –ù–∞–ø—Ä–∏–º–µ—Ä: '–ë–∞–∑–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ–≤', '–ü—Ä–æ–≥—Ä–µ–≤ –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤'\n"
            "‚Ä¢ –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è –≤—ã —Å–º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è
        context.user_data['creating_warmup_scenario'] = {
            'step': 'name'
        }
        
        keyboard = [
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="admin_content_warmup")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await _safe_edit_message(update, context, message_text, reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–æ—Ä–º—ã —Å—Ü–µ–Ω–∞—Ä–∏—è: {e}")
        await _safe_edit_message(update, context, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–æ—Ä–º—ã —Å—Ü–µ–Ω–∞—Ä–∏—è")


async def _handle_warmup_list_scenarios(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                      warmup_service: "WarmupService", is_callback: bool = False) -> None:
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –ø—Ä–æ–≥—Ä–µ–≤–∞."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
        all_scenarios = await warmup_service.get_all_scenarios()
        
        if not all_scenarios:
            message_text = "üì≠ –°—Ü–µ–Ω–∞—Ä–∏–∏ –ø—Ä–æ–≥—Ä–µ–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n\n–ù–∞–∂–º–∏—Ç–µ '–°–æ–∑–¥–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π' –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ."
            keyboard = [
                [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π", callback_data="admin_warmup_create_scenario")],
                [InlineKeyboardButton("üîô –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–æ–≥—Ä–µ–≤–∞", callback_data="admin_content_warmup")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await _safe_edit_message(update, context, message_text, reply_markup)
            return
        
        message_text = "üìã <b>–í—Å–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –ø—Ä–æ–≥—Ä–µ–≤–∞</b>\n\n"
        
        for i, scenario in enumerate(all_scenarios, 1):
            status = "üü¢" if scenario.is_active else "üî¥"
            message_text += f"{i}. {status} <b>{scenario.name}</b>\n"
            if scenario.description:
                message_text += f"   üìù {scenario.description[:60]}...\n"
            message_text += f"   üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {len(scenario.messages)}\n"
            message_text += f"   üìÖ –°–æ–∑–¥–∞–Ω: {scenario.created_at.strftime('%d.%m.%Y')}\n\n"
        
        keyboard = [
            [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π", callback_data="admin_warmup_create_scenario")],
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_warmup_list_scenarios")],
            [InlineKeyboardButton("üîô –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–æ–≥—Ä–µ–≤–∞", callback_data="admin_content_warmup")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await _safe_edit_message(update, context, message_text, reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: {e}")
        await _safe_edit_message(update, context, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤")


async def _handle_warmup_settings(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                warmup_service: "WarmupService", is_callback: bool = False) -> None:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –ø—Ä–æ–≥—Ä–µ–≤–∞."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
        all_scenarios = await warmup_service.get_all_scenarios()
        active_count = sum(1 for s in all_scenarios if s.is_active)
        inactive_count = len(all_scenarios) - active_count
        
        message_text = (
            f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –ø—Ä–æ–≥—Ä–µ–≤–∞</b>\n\n"
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: {len(all_scenarios)}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_count}\n"
            f"‚Ä¢ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {inactive_count}\n\n"
            f"üí° <b>–í–∞–∂–Ω–æ:</b> –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω —Å—Ü–µ–Ω–∞—Ä–∏–π –º–æ–∂–µ—Ç –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ\n\n"
            f"üîß <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>"
        )
        
        keyboard = [
            # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é
            [InlineKeyboardButton("üîÑ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π", callback_data="admin_warmup_activate")],
            [InlineKeyboardButton("‚è∏Ô∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –ø—Ä–æ–≥—Ä–µ–≤—ã", callback_data="admin_warmup_stop_all")],
            [InlineKeyboardButton("‚ñ∂Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ–≤—ã", callback_data="admin_warmup_resume")],
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
            [InlineKeyboardButton("‚è∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏", callback_data="admin_warmup_time_settings")],
            [InlineKeyboardButton("üìß –®–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π", callback_data="admin_warmup_templates")],
            
            # –û–±—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_warmup_settings")],
            [InlineKeyboardButton("üîô –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–æ–≥—Ä–µ–≤–∞", callback_data="admin_content_warmup")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await _safe_edit_message(update, context, message_text, reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–≥—Ä–µ–≤–∞: {e}")
        await _safe_edit_message(update, context, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–≥—Ä–µ–≤–∞")


async def _handle_warmup_messages_management(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                           warmup_service: "WarmupService", is_callback: bool = False) -> None:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –ø—Ä–æ–≥—Ä–µ–≤–∞."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
        all_scenarios = await warmup_service.get_all_scenarios()
        
        if not all_scenarios:
            message_text = "üì≠ –°—Ü–µ–Ω–∞—Ä–∏–∏ –ø—Ä–æ–≥—Ä–µ–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n\n–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–π."
            keyboard = [
                [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π", callback_data="admin_warmup_create_scenario")],
                [InlineKeyboardButton("üîô –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–æ–≥—Ä–µ–≤–∞", callback_data="admin_content_warmup")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await _safe_edit_message(update, context, message_text, reply_markup)
            return
        
        message_text = "üí¨ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –ø—Ä–æ–≥—Ä–µ–≤–∞</b>\n\n"
        message_text += "üìã <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏:</b>\n\n"
        
        for i, scenario in enumerate(all_scenarios, 1):
            status = "üü¢" if scenario.is_active else "üî¥"
            message_text += f"{i}. {status} <b>{scenario.name}</b>\n"
            message_text += f"   üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {len(scenario.messages)}\n\n"
        
        keyboard = []
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
        for i, scenario in enumerate(all_scenarios, 1):
            short_id = str(scenario.id).replace('-', '')[:16]
            keyboard.append([
                InlineKeyboardButton(
                    f"üìù {scenario.name}", 
                    callback_data=f"admin_warmup_scenario_{short_id}"
                )
            ])
        
        keyboard.extend([
            [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π", callback_data="admin_warmup_create_scenario")],
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_warmup_messages")],
            [InlineKeyboardButton("üîô –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–æ–≥—Ä–µ–≤–∞", callback_data="admin_content_warmup")]
        ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await _safe_edit_message(update, context, message_text, reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –ø—Ä–æ–≥—Ä–µ–≤–∞: {e}")
        await _safe_edit_message(update, context, "‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –ø—Ä–æ–≥—Ä–µ–≤–∞")


async def _handle_warmup_users_list(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                  warmup_service: "WarmupService", is_callback: bool = False) -> None:
    """–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø—Ä–æ–≥—Ä–µ–≤–µ."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        active_users = await warmup_service.get_active_warmup_users()
        
        if not active_users:
            message_text = "üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –ø—Ä–æ–≥—Ä–µ–≤–µ</b>\n\nüì≠ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–≥—Ä–µ–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            keyboard = [
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_warmup_users")],
                [InlineKeyboardButton("üîô –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–æ–≥—Ä–µ–≤–∞", callback_data="admin_content_warmup")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await _safe_edit_message(update, context, message_text, reply_markup)
            return
        
        message_text = f"üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –ø—Ä–æ–≥—Ä–µ–≤–µ</b>\n\nüìä <b>–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö: {len(active_users)}</b>\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for i, user_warmup in enumerate(active_users[:10], 1):
            user = user_warmup.user
            scenario = user_warmup.scenario
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ user –∏ scenario —Å—É—â–µ—Å—Ç–≤—É—é—Ç
            if not user:
                message_text += f"{i}. üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω (ID: {user_warmup.user_id})</b>\n"
                message_text += f"   üéØ –°—Ü–µ–Ω–∞—Ä–∏–π: {scenario.name if scenario else '–ù–µ –Ω–∞–π–¥–µ–Ω'}\n"
                message_text += f"   üìç –®–∞–≥: {user_warmup.current_step + 1}\n"
                message_text += f"   üïê –ù–∞—á–∞—Ç: {user_warmup.started_at.strftime('%d.%m.%Y %H:%M')}\n\n"
                continue
                
            if not scenario:
                message_text += f"{i}. üë§ <b>{user.first_name or '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}</b>\n"
                message_text += f"   üì± @{user.username or '–±–µ–∑ username'}\n"
                message_text += f"   üéØ –°—Ü–µ–Ω–∞—Ä–∏–π: <i>–°—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω</i>\n"
                message_text += f"   üìç –®–∞–≥: {user_warmup.current_step + 1}\n"
                message_text += f"   üïê –ù–∞—á–∞—Ç: {user_warmup.started_at.strftime('%d.%m.%Y %H:%M')}\n\n"
                continue
            
            message_text += f"{i}. üë§ <b>{user.first_name or '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}</b>\n"
            message_text += f"   üì± @{user.username or '–±–µ–∑ username'}\n"
            message_text += f"   üéØ –°—Ü–µ–Ω–∞—Ä–∏–π: {scenario.name}\n"
            message_text += f"   üìç –®–∞–≥: {user_warmup.current_step + 1}\n"
            message_text += f"   üïê –ù–∞—á–∞—Ç: {user_warmup.started_at.strftime('%d.%m.%Y %H:%M')}\n\n"
        
        if len(active_users) > 10:
            message_text += f"... –∏ –µ—â–µ {len(active_users) - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
        
        keyboard = [
            [InlineKeyboardButton("üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data="admin_warmup_export_users")],
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_warmup_users")],
            [InlineKeyboardButton("üîô –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–æ–≥—Ä–µ–≤–∞", callback_data="admin_content_warmup")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await _safe_edit_message(update, context, message_text, reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ–≥—Ä–µ–≤–∞: {e}")
        await _safe_edit_message(update, context, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ–≥—Ä–µ–≤–∞")


async def _handle_warmup_stats(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                             warmup_service: "WarmupService", is_callback: bool = False) -> None:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ–≤–∞."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await warmup_service.get_warmup_stats()
        
        message_text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ–≤–∞</b>\n\n"
        
        message_text += f"üìà <b>–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>\n"
        message_text += f"‚Ä¢ –í—Å–µ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: {stats.get('total_scenarios', 0)}\n"
        message_text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: {stats.get('active_scenarios', 0)}\n"
        message_text += f"‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats.get('total_messages', 0)}\n"
        message_text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('active_users', 0)}\n\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Å–æ–æ–±—â–µ–Ω–∏–π
        message_types = stats.get('message_types', {})
        if message_types:
            message_text += f"üìä <b>–¢–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π:</b>\n"
            for msg_type, count in message_types.items():
                type_names = {
                    'welcome': 'üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ',
                    'pain_point': 'üíî –ë–æ–ª–µ–≤–∞—è —Ç–æ—á–∫–∞',
                    'solution': 'üí° –†–µ—à–µ–Ω–∏–µ',
                    'social_proof': 'üåü –°–æ—Ü–∏–∞–ª—å–Ω–æ–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ',
                    'offer': 'üéØ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ',
                    'follow_up': 'üìß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ'
                }
                display_name = type_names.get(msg_type, msg_type)
                message_text += f"‚Ä¢ {display_name}: {count}\n"
            message_text += "\n"
        
        keyboard = [
            [InlineKeyboardButton("üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_warmup_detailed_stats")],
            [InlineKeyboardButton("üìà –ì—Ä–∞—Ñ–∏–∫–∏", callback_data="admin_warmup_charts")],
            [InlineKeyboardButton("üìã –≠–∫—Å–ø–æ—Ä—Ç", callback_data="admin_warmup_export_stats")],
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_warmup_stats")],
            [InlineKeyboardButton("üîô –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–æ–≥—Ä–µ–≤–∞", callback_data="admin_content_warmup")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await _safe_edit_message(update, context, message_text, reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–≥—Ä–µ–≤–∞: {e}")
        await _safe_edit_message(update, context, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–≥—Ä–µ–≤–∞")


async def _handle_warmup_create_scenario_final(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                             warmup_service: "WarmupService", is_callback: bool = False) -> None:
    """–§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è –ø—Ä–æ–≥—Ä–µ–≤–∞."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–∏—è
        creating_data = context.user_data.get('creating_warmup_scenario', {})
        
        if not creating_data:
            await _safe_edit_message(update, context, "‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        if not creating_data.get('name'):
            await _safe_edit_message(update, context, "‚ùå –û—à–∏–±–∫–∞: –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è")
            return
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π
        new_scenario = await warmup_service.create_scenario(
            name=creating_data['name'],
            description=creating_data.get('description')
        )
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–∏—è
        context.user_data.pop('creating_warmup_scenario', None)
        
        message_text = (
            "‚úÖ <b>–°—Ü–µ–Ω–∞—Ä–∏–π –ø—Ä–æ–≥—Ä–µ–≤–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</b>\n\n"
            f"üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {new_scenario.name}\n"
            f"üìÑ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {new_scenario.description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"üÜî <b>ID:</b> {new_scenario.id}\n"
            f"üü¢ <b>–°—Ç–∞—Ç—É—Å:</b> –ê–∫—Ç–∏–≤–µ–Ω\n\n"
            "üéØ <b>–ß—Ç–æ –¥–∞–ª—å—à–µ:</b>\n"
            "‚Ä¢ –°—Ü–µ–Ω–∞—Ä–∏–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω\n"
            "‚Ä¢ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è\n"
            "‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è –∫ –ø—Ä–æ–≥—Ä–µ–≤—É"
        )
        
        keyboard = [
            [InlineKeyboardButton("üí¨ –î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è", callback_data="admin_warmup_messages")],
            [InlineKeyboardButton("üìã –ö —Å–ø–∏—Å–∫—É —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤", callback_data="admin_warmup_list_scenarios")],
            [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω", callback_data="admin_warmup_create_scenario")],
            [InlineKeyboardButton("üîô –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–æ–≥—Ä–µ–≤–∞", callback_data="admin_content_warmup")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await _safe_edit_message(update, context, message_text, reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è –ø—Ä–æ–≥—Ä–µ–≤–∞: {e}")
        await _safe_edit_message(update, context, f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è –ø—Ä–æ–≥—Ä–µ–≤–∞: {str(e)}")


async def _handle_rituals_management(update: Update, context: ContextTypes.DEFAULT_TYPE, is_callback: bool = False) -> None:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Ç—É–∞–ª–∞–º–∏."""
    try:
        rituals_text = (
            f"üéØ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Ç—É–∞–ª–∞–º–∏ –Ø–î–†–ê</b>\n\n"
            f"üåÖ <b>–£—Ç—Ä–µ–Ω–Ω–∏–µ —Ä–∏—Ç—É–∞–ª—ã (6:30):</b>\n"
            f"‚Ä¢ –°—Ç–∞—Ç—É—Å: ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω\n"
            f"‚Ä¢ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: 15\n"
            f"‚Ä¢ –û—Ç–≤–µ—Ç–æ–≤ —Å–µ–≥–æ–¥–Ω—è: 8\n\n"
            f"üåô <b>–í–µ—á–µ—Ä–Ω–∏–µ —Ä–∏—Ç—É–∞–ª—ã (21:00):</b>\n"
            f"‚Ä¢ –°—Ç–∞—Ç—É—Å: ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω\n"
            f"‚Ä¢ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: 18\n"
            f"‚Ä¢ –û—Ç—á–µ—Ç–æ–≤ —Å–µ–≥–æ–¥–Ω—è: 12\n\n"
            f"üìÖ <b>–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ —Ü–µ–ª–∏ (–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ):</b>\n"
            f"‚Ä¢ –°—Ç–∞—Ç—É—Å: ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω\n"
            f"‚Ä¢ –¶–µ–ª–µ–π –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ: 23\n\n"
            f"üí™ <b>–õ–∏—á–Ω—ã–µ –≤—ã–∑–æ–≤—ã (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫):</b>\n"
            f"‚Ä¢ –°—Ç–∞—Ç—É—Å: ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω\n"
            f"‚Ä¢ –ü—Ä–∏–Ω—è—Ç–æ –≤—ã–∑–æ–≤–æ–≤: 16\n\n"
            f"üîÑ <b>–¶–∏–∫–ª–∏—á–µ—Å–∫–∏–µ —Ä–∏—Ç—É–∞–ª—ã (–ø—è—Ç–Ω–∏—Ü–∞):</b>\n"
            f"‚Ä¢ –°—Ç–∞—Ç—É—Å: ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω\n"
            f"‚Ä¢ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: 14"
        )
        
        keyboard = [
            # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Ä–∏—Ç—É–∞–ª–∞–º–∏
            [InlineKeyboardButton("üåÖ –£—Ç—Ä–µ–Ω–Ω–∏–µ —Ä–∏—Ç—É–∞–ª—ã", callback_data="admin_ritual_morning")],
            [InlineKeyboardButton("üåô –í–µ—á–µ—Ä–Ω–∏–µ —Ä–∏—Ç—É–∞–ª—ã", callback_data="admin_ritual_evening")],
            [InlineKeyboardButton("üìÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ —Ü–µ–ª–∏", callback_data="admin_ritual_weekly_goals")],
            [InlineKeyboardButton("üí™ –õ–∏—á–Ω—ã–µ –≤—ã–∑–æ–≤—ã", callback_data="admin_ritual_challenges")],
            [InlineKeyboardButton("üîÑ –¶–∏–∫–ª–∏—á–µ—Å–∫–∏–µ —Ä–∏—Ç—É–∞–ª—ã", callback_data="admin_ritual_cycles")],
            
            # –û–±—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
            [InlineKeyboardButton("‚è∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏", callback_data="admin_ritual_schedule")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∏—Ç—É–∞–ª–æ–≤", callback_data="admin_ritual_stats")],
            [InlineKeyboardButton("üîß –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_ritual_global")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await _safe_edit_message(update, context, rituals_text, reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Ç—É–∞–ª–∞–º–∏: {e}")
        await _safe_edit_message(update, context, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Ç—É–∞–ª–∞–º–∏")


async def _handle_analytics_dashboard(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                     user_service: UserService, payment_service: PaymentService, 
                                     is_callback: bool = False) -> None:
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        total_users = await user_service.get_users_count()
        active_users = await user_service.get_active_users_count()
        total_payments = await payment_service.get_payments_count()
        total_revenue = await payment_service.get_total_revenue()
        
        analytics_text = (
            f"üìä <b>–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞</b>\n\n"
            f"üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ: {total_users}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_users} ({(active_users/max(total_users,1)*100):.1f}%)\n"
            f"‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö: {(active_users/max(total_users,1)*100):.1f}%\n\n"
            f"üí∞ <b>–§–∏–Ω–∞–Ω—Å—ã:</b>\n"
            f"‚Ä¢ –ü–ª–∞—Ç–µ–∂–µ–π: {total_payments}\n"
            f"‚Ä¢ –î–æ—Ö–æ–¥: {total_revenue:.2f} ‚ÇΩ\n"
            f"‚Ä¢ ARPU: {(total_revenue/max(total_users,1)):.2f} ‚ÇΩ\n\n"
            f"üìà <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>\n"
            f"‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–∞—Ö: 1,247\n"
            f"‚Ä¢ –û—Ç—á–µ—Ç–æ–≤ —Å–µ–≥–æ–¥–Ω—è: 23\n"
            f"‚Ä¢ –¶–µ–ª–µ–π –Ω–∞ –Ω–µ–¥–µ–ª—é: 45\n\n"
            f"üéØ <b>–í–æ—Ä–æ–Ω–∫–∞ –ø—Ä–æ–¥–∞–∂:</b>\n"
            f"‚Ä¢ –õ–∏–¥—ã: 523\n"
            f"‚Ä¢ –ü—Ä–æ–≥—Ä–µ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω: 127 (24.3%)\n"
            f"‚Ä¢ –ö—É–ø–∏–ª–∏ —Ç—Ä–∏–ø–≤–∞–π–µ—Ä: 31 (24.4%)\n"
            f"‚Ä¢ –ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å: 18 (58.1%)"
        )
        
        keyboard = [
            [InlineKeyboardButton("üìä –î–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏", callback_data="admin_analytics_detailed")],
            [InlineKeyboardButton("üìà –ì—Ä–∞—Ñ–∏–∫–∏ –∏ —Ç—Ä–µ–Ω–¥—ã", callback_data="admin_analytics_trends")],
            [InlineKeyboardButton("üéØ –í–æ—Ä–æ–Ω–∫–∞ –ø—Ä–æ–¥–∞–∂", callback_data="admin_analytics_funnel")],
            [InlineKeyboardButton("üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç", callback_data="admin_analytics_finance")],
            [InlineKeyboardButton("üë• –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è", callback_data="admin_analytics_segments")],
            [InlineKeyboardButton("üìã –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data="admin_analytics_export")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await _safe_edit_message(update, context, analytics_text, reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
        await _safe_edit_message(update, context, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")


async def _handle_broadcast_system(update: Update, context: ContextTypes.DEFAULT_TYPE, is_callback: bool = False) -> None:
    """–°–∏—Å—Ç–µ–º–∞ –º–∞—Å—Å–æ–≤—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫."""
    try:
        broadcast_text = (
            f"üì¢ <b>–°–∏—Å—Ç–µ–º–∞ –º–∞—Å—Å–æ–≤—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫</b>\n\n"
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–æ–∫:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: 2,847 —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            f"‚Ä¢ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: 2,731 (95.9%)\n"
            f"‚Ä¢ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ: 2,156 (78.9%)\n"
            f"‚Ä¢ –ù–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏: 687 (31.9%)\n\n"
            f"üìù <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n"
            f"‚Ä¢ –í–µ—á–µ—Ä–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (—Å–µ–≥–æ–¥–Ω—è)\n"
            f"‚Ä¢ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ —Ü–µ–ª–∏ (–≤—á–µ—Ä–∞)\n"
            f"‚Ä¢ –ù–æ–≤—ã–π —Ç—Ä–∏–ø–≤–∞–π–µ—Ä (3 –¥–Ω—è –Ω–∞–∑–∞–¥)\n\n"
            f"üéØ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏:</b>"
        )
        
        keyboard = [
            [InlineKeyboardButton("üì® –û–±—ã—á–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast_regular")],
            [InlineKeyboardButton("üéØ –°–µ–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è", callback_data="admin_broadcast_segment")],
            [InlineKeyboardButton("‚è∞ –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è", callback_data="admin_broadcast_scheduled")],
            [InlineKeyboardButton("üî• –°—Ä–æ—á–Ω–∞—è", callback_data="admin_broadcast_urgent")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–æ–∫", callback_data="admin_broadcast_stats")],
            [InlineKeyboardButton("üìã –ò—Å—Ç–æ—Ä–∏—è", callback_data="admin_broadcast_history")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await _safe_edit_message(update, context, broadcast_text, reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å—Å—ã–ª–æ–∫: {e}")
        await _safe_edit_message(update, context, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å—Å—ã–ª–æ–∫")


async def _handle_system_settings(update: Update, context: ContextTypes.DEFAULT_TYPE, is_callback: bool = False) -> None:
    """–°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."""
    try:
        from config.settings import settings
        
        settings_text = (
            f"‚öôÔ∏è <b>–°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
            f"ü§ñ <b>–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
            f"‚Ä¢ –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏: {'‚úÖ –í–∫–ª—é—á–µ–Ω' if settings.debug else '‚ùå –í—ã–∫–ª—é—á–µ–Ω'}\n"
            f"‚Ä¢ –ì—Ä—É–ø–ø–∞: {settings.telegram_group_id}\n"
            f"‚Ä¢ –ö–∞–Ω–∞–ª: {settings.telegram_channel_id}\n\n"
            f"üí≥ <b>–ü–ª–∞—Ç–µ–∂–∏:</b>\n"
            f"‚Ä¢ –í–∞–ª—é—Ç–∞: {settings.payment_currency}\n"
            f"‚Ä¢ –ë–∞–∑–æ–≤–∞—è —Å—É–º–º–∞: {settings.payment_amount} ‚ÇΩ\n\n"
            f"‚è∞ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:</b>\n"
            f"‚Ä¢ –£—Ç—Ä–µ–Ω–Ω–∏–µ —Ä–∏—Ç—É–∞–ª—ã: 06:30\n"
            f"‚Ä¢ –í–µ—á–µ—Ä–Ω–∏–µ —Ä–∏—Ç—É–∞–ª—ã: 21:00\n"
            f"‚Ä¢ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ —Ü–µ–ª–∏: –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ\n\n"
            f"üîß <b>–°–∏—Å—Ç–µ–º–∞:</b>\n"
            f"‚Ä¢ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω\n"
            f"‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∞\n"
            f"‚Ä¢ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: ‚úÖ –í–∫–ª—é—á–µ–Ω–æ"
        )
        
        keyboard = [
            [InlineKeyboardButton("ü§ñ –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_system_main")],
            [InlineKeyboardButton("üí≥ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π", callback_data="admin_system_payments")],
            [InlineKeyboardButton("‚è∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á", callback_data="admin_system_schedule")],
            [InlineKeyboardButton("üîß –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", callback_data="admin_system_params")],
            [InlineKeyboardButton("üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", callback_data="admin_system_security")],
            [InlineKeyboardButton("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", callback_data="admin_system_monitoring")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await _safe_edit_message(update, context, settings_text, reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        await _safe_edit_message(update, context, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫")


# –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
async def _handle_user_action(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                             user_service: UserService, action: str, is_callback: bool = False) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏."""
    try:
        if action == "admin_user_add":
            await _handle_add_user_form(update, context, is_callback=True)
            
        elif action == "admin_user_list_all":
            await _handle_list_all_users(update, context, user_service, is_callback=True)
            
        elif action == "admin_user_search":
            await _handle_search_users_form(update, context, is_callback=True)
            
        elif action == "admin_user_stats":
            await _handle_user_detailed_stats(update, context, user_service, is_callback=True)
            
        elif action.startswith("admin_user_view_"):
            user_id = action.replace("admin_user_view_", "")
            await _handle_view_user(update, context, user_service, user_id, is_callback=True)
            
        elif action.startswith("admin_user_edit_"):
            user_id = action.replace("admin_user_edit_", "")
            await _handle_edit_user(update, context, user_service, user_id, is_callback=True)
            
        elif action.startswith("admin_user_delete_confirm_"):
            user_id = action.replace("admin_user_delete_confirm_", "")
            logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: '{user_id}'")
            await _handle_delete_user_final(update, context, user_service, user_id, is_callback=True)
            
        elif action.startswith("admin_user_delete_"):
            user_id = action.replace("admin_user_delete_", "")
            await _handle_delete_user_confirm(update, context, user_service, user_id, is_callback=True)
            
        elif action.startswith("admin_user_status_"):
            # admin_user_status_{user_id}_{status}
            parts = action.split("_")
            if len(parts) >= 5:
                user_id = parts[3]
                status = parts[4]
                await _handle_change_user_status(update, context, user_service, user_id, status, is_callback=True)
            
        else:
            await _safe_edit_message(update, context, f"üîß –§—É–Ω–∫—Ü–∏—è '{action}' –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π {action}: {e}")
        await _safe_edit_message(update, context, "‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è")


async def _handle_add_user_form(update: Update, context: ContextTypes.DEFAULT_TYPE, is_callback: bool = False) -> None:
    """–§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        form_text = (
            f"‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
            f"üìù <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>\n"
            f"1. –ü–æ–ª—É—á–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            f"2. –£–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            f"3. –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å\n\n"
            f"üí° <b>–°–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è Telegram ID:</b>\n"
            f"‚Ä¢ –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ø–∏—Å–∞—Ç—å @userinfobot\n"
            f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ @getidsbot\n"
            f"‚Ä¢ ID –ø–æ—è–≤–∏—Ç—Å—è –≤ –ª–æ–≥–∞—Ö –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏\n\n"
            f"‚ö†Ô∏è <b>–ü–æ–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞</b>"
        )
        
        keyboard = [
            [InlineKeyboardButton("üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ ID", callback_data="admin_user_id_help")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", callback_data="admin_users_manage")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await _safe_edit_message(update, context, form_text, reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await _safe_edit_message(update, context, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ä–º—ã")


async def _handle_list_all_users(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                user_service: UserService, is_callback: bool = False, 
                                page: int = 0) -> None:
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π."""
    try:
        limit = 10
        offset = page * limit
        users = await user_service.get_all_users(offset=offset, limit=limit)
        total_users = await user_service.get_users_count()
        
        if not users:
            await _safe_edit_message(update, context, "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        list_text = (
            f"üìã <b>–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</b> (—Å—Ç—Ä. {page + 1})\n"
            f"üìä –í—Å–µ–≥–æ: {total_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
        )
        
        keyboard = []
        
        for i, user in enumerate(users, 1):
            status_emoji = {
                "active": "‚úÖ",
                "inactive": "‚è∏Ô∏è", 
                "banned": "üö´"
            }.get(user.status, "‚ùì")
            
            group_emoji = "üë•" if user.is_in_group else "üë§"
            subscription_emoji = "üíé" if user.subscription_until and user.subscription_until > datetime.utcnow() else "üÜì"
            
            list_text += (
                f"{offset + i}. {status_emoji}{group_emoji}{subscription_emoji} "
                f"<b>{user.display_name}</b>\n"
                f"   ID: {user.telegram_id} | "
                f"–°–æ–∑–¥–∞–Ω: {user.created_at.strftime('%d.%m.%y')}\n"
            )
            
            keyboard.append([
                InlineKeyboardButton(f"üëÅÔ∏è {user.display_name[:15]}...", 
                                   callback_data=f"admin_user_view_{user.id}"),
                InlineKeyboardButton("‚úèÔ∏è", callback_data=f"admin_user_edit_{user.id}"),
                InlineKeyboardButton("üóëÔ∏è", callback_data=f"admin_user_delete_{user.id}")
            ])
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        pagination_buttons = []
        if page > 0:
            pagination_buttons.append(
                InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–µ", callback_data=f"admin_user_list_page_{page-1}")
            )
        if len(users) == limit:  # –ï—Å—Ç—å –µ—â–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            pagination_buttons.append(
                InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–µ ‚û°Ô∏è", callback_data=f"admin_user_list_page_{page+1}")
            )
        
        if pagination_buttons:
            keyboard.append(pagination_buttons)
        
        keyboard.extend([
            [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫", callback_data="admin_user_search")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_users_manage")]
        ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await _safe_edit_message(update, context, list_text, reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        await _safe_edit_message(update, context, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")


async def _handle_search_users_form(update: Update, context: ContextTypes.DEFAULT_TYPE, is_callback: bool = False) -> None:
    """–§–æ—Ä–º–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    try:
        search_text = (
            f"üîç <b>–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
            f"üìù <b>–ß—Ç–æ –º–æ–∂–Ω–æ –∏—Å–∫–∞—Ç—å:</b>\n"
            f"‚Ä¢ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            f"‚Ä¢ Username (@username)\n"
            f"‚Ä¢ Telegram ID\n\n"
            f"üí° <b>–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:</b>\n"
            f"‚Ä¢ <code>–ò–≤–∞–Ω</code> - –ø–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏\n"
            f"‚Ä¢ <code>@ivan_petrov</code> - –ø–æ–∏—Å–∫ –ø–æ username\n"
            f"‚Ä¢ <code>123456789</code> - –ø–æ–∏—Å–∫ –ø–æ ID\n\n"
            f"‚ö†Ô∏è <b>–ü–æ–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞</b>"
        )
        
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="admin_user_list_all")],
            [InlineKeyboardButton("üîô –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é", callback_data="admin_users_manage")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await _safe_edit_message(update, context, search_text, reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º—ã –ø–æ–∏—Å–∫–∞: {e}")
        await _safe_edit_message(update, context, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ä–º—ã –ø–æ–∏—Å–∫–∞")


async def _handle_user_detailed_stats(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                     user_service: UserService, is_callback: bool = False) -> None:
    """–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    try:
        stats = await user_service.get_user_statistics()
        
        stats_text = (
            f"üìä <b>–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
            f"üë• <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total']}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active']} ({stats['activity_rate']}%)\n"
            f"‚Ä¢ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {stats['inactive']}\n"
            f"‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {stats['banned']}\n\n"
            f"üìà <b>–ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
            f"‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {stats['new_today']}\n"
            f"‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: {stats['new_week']}\n"
            f"‚Ä¢ –ó–∞ –º–µ—Å—è—Ü: {stats['new_month']}\n\n"
            f"üéØ <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>\n"
            f"‚Ä¢ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {stats['activity_rate']}%\n"
            f"‚Ä¢ –£–¥–µ—Ä–∂–∞–Ω–∏–µ: {100 - stats['activity_rate']:.1f}% –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö\n\n"
            f"üìã <b>–°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:</b>\n"
            f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ: {stats['active']}\n"
            f"‚è∏Ô∏è –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ: {stats['inactive']}\n"
            f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ: {stats['banned']}"
        )
        
        keyboard = [
            [InlineKeyboardButton("üìä –≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", callback_data="admin_user_stats_export")],
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_user_stats")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_users_manage")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await _safe_edit_message(update, context, stats_text, reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await _safe_edit_message(update, context, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


async def _handle_view_user(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                           user_service: UserService, user_id: str, is_callback: bool = False) -> None:
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ."""
    try:
        user = await user_service.get_user_by_id(user_id)
        if not user:
            await _safe_edit_message(update, context, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        status_emoji = {
            "active": "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω",
            "inactive": "‚è∏Ô∏è –ù–µ–∞–∫—Ç–∏–≤–µ–Ω", 
            "banned": "üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
        }.get(user.status, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        
        subscription_status = "üíé –ê–∫—Ç–∏–≤–Ω–∞" if (
            user.subscription_until and user.subscription_until > datetime.utcnow()
        ) else "üÜì –ò—Å—Ç–µ–∫–ª–∞/–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        
        user_text = (
            f"üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>\n\n"
            f"üìã <b>–û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>\n"
            f"‚Ä¢ –ò–º—è: <b>{user.display_name}</b>\n"
            f"‚Ä¢ Username: @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"‚Ä¢ Telegram ID: <code>{user.telegram_id}</code>\n"
            f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {status_emoji}\n\n"
            f"üë• <b>–£—á–∞—Å—Ç–∏–µ:</b>\n"
            f"‚Ä¢ –í –≥—Ä—É–ø–ø–µ: {'‚úÖ –î–∞' if user.is_in_group else '‚ùå –ù–µ—Ç'}\n"
            f"‚Ä¢ –ü–æ–¥–ø–∏—Å–∫–∞: {subscription_status}\n"
        )
        
        if user.subscription_until:
            user_text += f"‚Ä¢ –î–æ: {user.subscription_until.strftime('%d.%m.%Y %H:%M')}\n"
        
        user_text += (
            f"\nüìÖ <b>–í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏:</b>\n"
            f"‚Ä¢ –°–æ–∑–¥–∞–Ω: {user.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            f"‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω: {user.updated_at.strftime('%d.%m.%Y %H:%M')}\n"
        )
        
        if user.last_activity_at:
            user_text += f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user.last_activity_at.strftime('%d.%m.%Y %H:%M')}\n"
        
        keyboard = [
            [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"admin_user_edit_{user_id}")],
            [
                InlineKeyboardButton("‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"admin_user_status_{user_id}_active"),
                InlineKeyboardButton("‚è∏Ô∏è –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"admin_user_status_{user_id}_inactive")
            ],
            [InlineKeyboardButton("üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"admin_user_status_{user_id}_banned")],
            [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"admin_user_delete_{user_id}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="admin_user_list_all")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await _safe_edit_message(update, context, user_text, reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await _safe_edit_message(update, context, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")


async def _handle_edit_user(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                           user_service: UserService, user_id: str, is_callback: bool = False) -> None:
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        user = await user_service.get_user_by_id(user_id)
        if not user:
            await _safe_edit_message(update, context, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        edit_text = (
            f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
            f"üë§ <b>{user.display_name}</b>\n"
            f"ID: {user.telegram_id}\n\n"
            f"üìù <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>\n"
            f"‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å\n"
            f"‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–æ–π\n"
            f"‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π\n\n"
            f"‚ö†Ô∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>"
        )
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"admin_user_change_status_{user_id}")],
            [
                InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É", callback_data=f"admin_user_add_group_{user_id}"),
                InlineKeyboardButton("‚ûñ –£–±—Ä–∞—Ç—å –∏–∑ –≥—Ä—É–ø–ø—ã", callback_data=f"admin_user_remove_group_{user_id}")
            ],
            [InlineKeyboardButton("üíé –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π", callback_data=f"admin_user_subscription_{user_id}")],
            [InlineKeyboardButton("üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä", callback_data=f"admin_user_view_{user_id}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_users_manage")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await _safe_edit_message(update, context, edit_text, reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await _safe_edit_message(update, context, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")


async def _handle_change_user_status(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                    user_service: UserService, user_id: str, status: str, 
                                    is_callback: bool = False) -> None:
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        user = await user_service.get_user_by_id(user_id)
        if not user:
            await _safe_edit_message(update, context, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        success = await user_service.update_user_status(user_id, status)
        
        status_names = {
            "active": "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω",
            "inactive": "–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω",
            "banned": "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
        }
        
        if success:
            result_text = (
                f"‚úÖ <b>–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω</b>\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{user.display_name}</b>\n"
                f"üîÑ –°—Ç–∞—Ç—É—Å: {status_names.get(status, status)}\n"
                f"üìÖ –í—Ä–µ–º—è: {datetime.utcnow().strftime('%d.%m.%Y %H:%M')}"
            )
        else:
            result_text = (
                f"‚ùå <b>–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞</b>\n\n"
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.display_name}"
            )
        
        keyboard = [
            [InlineKeyboardButton("üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data=f"admin_user_view_{user_id}")],
            [InlineKeyboardButton("üîô –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é", callback_data="admin_users_manage")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await _safe_edit_message(update, context, result_text, reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await _safe_edit_message(update, context, "‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")


async def _handle_delete_user_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                     user_service: UserService, user_id: str, is_callback: bool = False) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        user = await user_service.get_user_by_id(user_id)
        if not user:
            await _safe_edit_message(update, context, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        confirm_text = (
            f"‚ö†Ô∏è <b>–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –£–î–ê–õ–ï–ù–ò–Ø</b>\n\n"
            f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?\n\n"
            f"üë§ <b>{user.display_name}</b>\n"
            f"ID: {user.telegram_id}\n"
            f"–°—Ç–∞—Ç—É—Å: {user.status}\n"
            f"–°–æ–∑–¥–∞–Ω: {user.created_at.strftime('%d.%m.%Y')}\n\n"
            f"üö® <b>–í–ù–ò–ú–ê–ù–ò–ï!</b>\n"
            f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω –Ω–∞–≤—Å–µ–≥–¥–∞\n"
            f"‚Ä¢ –í—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã\n"
            f"‚Ä¢ –î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ\n\n"
            f"‚ùì –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ?"
        )
        
        keyboard = [
            [
                InlineKeyboardButton("üóëÔ∏è –î–ê, –£–î–ê–õ–ò–¢–¨", callback_data=f"admin_user_delete_confirm_{user_id}"),
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"admin_user_view_{user_id}")
            ],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="admin_users_manage")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await _safe_edit_message(update, context, confirm_text, reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è {user_id}: {e}")
        await _safe_edit_message(update, context, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è")


async def _handle_delete_user_final(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                   user_service: UserService, user_id: str, is_callback: bool = False) -> None:
    """–§–∏–Ω–∞–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        logger.info(f"üîç _handle_delete_user_final –ø–æ–ª—É—á–∏–ª user_id: '{user_id}'")
        user = await user_service.get_user_by_id(user_id)
        if not user:
            await _safe_edit_message(update, context, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        user_name = user.display_name
        success = await user_service.delete_user(user_id)
        
        if success:
            result_text = (
                f"‚úÖ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω</b>\n\n"
                f"üë§ <b>{user_name}</b> –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã\n"
                f"üìÖ –í—Ä–µ–º—è —É–¥–∞–ª–µ–Ω–∏—è: {datetime.utcnow().strftime('%d.%m.%Y %H:%M')}\n\n"
                f"üóÇÔ∏è –í—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã"
            )
        else:
            result_text = (
                f"‚ùå <b>–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n"
                f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name}\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É"
            )
        
        keyboard = [
            [InlineKeyboardButton("üìã –ö —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_user_list_all")],
            [InlineKeyboardButton("üîô –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é", callback_data="admin_users_manage")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await _safe_edit_message(update, context, result_text, reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è {user_id}: {e}")
        await _safe_edit_message(update, context, "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è")


async def _handle_payment_action(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                payment_service: PaymentService, action: str, is_callback: bool = False) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏."""
    await _safe_edit_message(update, context, f"üîß –§—É–Ω–∫—Ü–∏—è '{action}' –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")


async def _handle_content_action(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                action: str, is_callback: bool = False) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º."""
    await _safe_edit_message(update, context, f"üîß –§—É–Ω–∫—Ü–∏—è '{action}' –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")


# === –£–ü–†–ê–í–õ–ï–ù–ò–ï –¢–†–ò–ü–í–ê–ô–ï–†–ê–ú–ò ===

async def _handle_tripwire_management(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                     product_service: ProductService, is_callback: bool = False) -> None:
    """–ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∏–ø–≤–∞–π–µ—Ä–∞–º–∏."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await product_service.get_tripwire_statistics()
        
        management_text = (
            f"üéØ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∏–ø–≤–∞–π–µ—Ä–∞–º–∏</b>\n\n"
            f"üìä <b>–ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"‚Ä¢ üì¶ –ü—Ä–æ–¥—É–∫—Ç–æ–≤: {stats['products']['total']} ({stats['products']['active']} –∞–∫—Ç–∏–≤–Ω—ã—Ö)\n"
            f"‚Ä¢ üìã –û—Ñ—Ñ–µ—Ä–æ–≤: {stats['offers']['total']} ({stats['offers']['active']} –∞–∫—Ç–∏–≤–Ω—ã—Ö)\n"
            f"‚Ä¢ üìà –ö–æ–Ω–≤–µ—Ä—Å–∏—è: {stats['user_offers']['conversion_rate']}%\n\n"
            f"üéØ <b>–¢—Ä–∏–ø–≤–∞–π–µ—Ä—ã:</b> {stats['products']['tripwire']} –ø—Ä–æ–¥—É–∫—Ç–æ–≤\n\n"
            f"üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n"
            f"‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏\n"
            f"‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞–º–∏\n"
            f"‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            f"‚Ä¢ –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–≤–µ—Ä—Å–∏–π"
        )
        
        keyboard = [
            [
                InlineKeyboardButton("üì¶ –ü—Ä–æ–¥—É–∫—Ç—ã", callback_data="admin_tripwire_products"),
                InlineKeyboardButton("üìã –û—Ñ—Ñ–µ—Ä—ã", callback_data="admin_tripwire_offers")
            ],
            [InlineKeyboardButton("üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_tripwire_stats")],
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç", callback_data="admin_tripwire_add_product")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await _safe_edit_message(update, context, management_text, reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∏–ø–≤–∞–π–µ—Ä–∞–º–∏: {e}")
        await _safe_edit_message(update, context, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∏–ø–≤–∞–π–µ—Ä–∞–º–∏")


async def _handle_tripwire_action(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                  product_service: ProductService, action: str, is_callback: bool = False) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å —Ç—Ä–∏–ø–≤–∞–π–µ—Ä–∞–º–∏."""
    try:
        logger.info(f"üöÄ _handle_tripwire_action –ø–æ–ª—É—á–∏–ª –¥–µ–π—Å—Ç–≤–∏–µ: {action}")
        if action == "admin_tripwire_products":
            await _handle_tripwire_products_list(update, context, product_service, is_callback=True)
            
        elif action == "admin_tripwire_offers":
            await _handle_tripwire_offers_list(update, context, product_service, is_callback=True)
            
        elif action == "admin_tripwire_stats":
            await _handle_tripwire_detailed_stats(update, context, product_service, is_callback=True)
            
        elif action == "admin_tripwire_add_product":
            await _handle_add_product_form(update, context, is_callback=True)
            
        elif action == "admin_create_tripwire":
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∏–ø–≤–∞–π–µ—Ä–∞")
            await _handle_create_product_dialog(update, context, "tripwire", is_callback=True)
            
        elif action == "admin_create_course":
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫—É—Ä—Å–∞")
            await _handle_create_product_dialog(update, context, "course", is_callback=True)
            
        elif action == "admin_create_consultation":
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏")
            await _handle_create_product_dialog(update, context, "consultation", is_callback=True)
            
        # –ù–æ–≤—ã–µ –∫–æ—Ä–æ—Ç–∫–∏–µ callback'–∏ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        elif action.startswith("admin_tp_view_"):
            short_id = action.replace("admin_tp_view_", "")
            product_id = await _restore_uuid(short_id, product_service)
            if product_id:
                await _handle_view_product(update, context, product_service, product_id, is_callback=True)
            else:
                await _safe_edit_message(update, context, "‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
        elif action.startswith("admin_tp_toggle_"):
            short_id = action.replace("admin_tp_toggle_", "")
            product_id = await _restore_uuid(short_id, product_service)
            if product_id:
                await _handle_toggle_product_status(update, context, product_service, product_id, is_callback=True)
            else:
                await _safe_edit_message(update, context, "‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
        elif action.startswith("admin_tp_delete_"):
            short_id = action.replace("admin_tp_delete_", "")
            product_id = await _restore_uuid(short_id, product_service)
            if product_id:
                await _handle_delete_product_confirm(update, context, product_service, product_id, is_callback=True)
            else:
                await _safe_edit_message(update, context, "‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
        elif action.startswith("admin_tp_confirm_"):
            short_id = action.replace("admin_tp_confirm_", "")
            product_id = await _restore_uuid(short_id, product_service)
            if product_id:
                await _handle_delete_product_final(update, context, product_service, product_id, is_callback=True)
            else:
                await _safe_edit_message(update, context, "‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
        # –ù–æ–≤—ã–µ –∫–æ—Ä–æ—Ç–∫–∏–µ callback'–∏ –¥–ª—è –æ—Ñ—Ñ–µ—Ä–æ–≤
        elif action.startswith("admin_to_view_"):
            short_id = action.replace("admin_to_view_", "")
            offer_id = await _restore_uuid(short_id, product_service)
            if offer_id:
                await _handle_view_offer(update, context, product_service, offer_id, is_callback=True)
            else:
                await _safe_edit_message(update, context, "‚ùå –û—Ñ—Ñ–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
        elif action.startswith("admin_to_toggle_"):
            short_id = action.replace("admin_to_toggle_", "")
            offer_id = await _restore_uuid(short_id, product_service)
            if offer_id:
                await _handle_toggle_offer_status(update, context, product_service, offer_id, is_callback=True)
            else:
                await _safe_edit_message(update, context, "‚ùå –û—Ñ—Ñ–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
        elif action.startswith("admin_to_delete_"):
            short_id = action.replace("admin_to_delete_", "")
            offer_id = await _restore_uuid(short_id, product_service)
            if offer_id:
                await _handle_delete_offer_confirm(update, context, product_service, offer_id, is_callback=True)
            else:
                await _safe_edit_message(update, context, "‚ùå –û—Ñ—Ñ–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
        elif action.startswith("admin_to_confirm_"):
            short_id = action.replace("admin_to_confirm_", "")
            offer_id = await _restore_uuid(short_id, product_service)
            if offer_id:
                await _handle_delete_offer_final(update, context, product_service, offer_id, is_callback=True)
            else:
                await _safe_edit_message(update, context, "‚ùå –û—Ñ—Ñ–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
        # –°—Ç–∞—Ä—ã–µ –¥–ª–∏–Ω–Ω—ã–µ callback'–∏ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
        elif action.startswith("admin_tripwire_product_view_"):
            product_id = action.replace("admin_tripwire_product_view_", "")
            await _handle_view_product(update, context, product_service, product_id, is_callback=True)
            
        elif action.startswith("admin_tripwire_product_toggle_"):
            product_id = action.replace("admin_tripwire_product_toggle_", "")
            await _handle_toggle_product_status(update, context, product_service, product_id, is_callback=True)
            
        elif action.startswith("admin_tripwire_product_delete_"):
            product_id = action.replace("admin_tripwire_product_delete_", "")
            await _handle_delete_product_confirm(update, context, product_service, product_id, is_callback=True)
            
        elif action.startswith("admin_tripwire_product_delete_confirm_"):
            product_id = action.replace("admin_tripwire_product_delete_confirm_", "")
            await _handle_delete_product_final(update, context, product_service, product_id, is_callback=True)
            
        elif action.startswith("admin_tripwire_offer_view_"):
            offer_id = action.replace("admin_tripwire_offer_view_", "")
            await _handle_view_offer(update, context, product_service, offer_id, is_callback=True)
            
        elif action.startswith("admin_tripwire_offer_toggle_"):
            offer_id = action.replace("admin_tripwire_offer_toggle_", "")
            await _handle_toggle_offer_status(update, context, product_service, offer_id, is_callback=True)
            
        elif action.startswith("admin_tripwire_offer_delete_"):
            offer_id = action.replace("admin_tripwire_offer_delete_", "")
            await _handle_delete_offer_confirm(update, context, product_service, offer_id, is_callback=True)
            
        elif action.startswith("admin_tripwire_offer_delete_confirm_"):
            offer_id = action.replace("admin_tripwire_offer_delete_confirm_", "")
            await _handle_delete_offer_final(update, context, product_service, offer_id, is_callback=True)
            
        else:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ —Ç—Ä–∏–ø–≤–∞–π–µ—Ä–∞: {action}")
            await _safe_edit_message(update, context, f"üîß –§—É–Ω–∫—Ü–∏—è '{action}' –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è —Ç—Ä–∏–ø–≤–∞–π–µ—Ä–æ–≤ {action}: {e}")
        await _safe_edit_message(update, context, "‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è")


async def _handle_tripwire_products_list(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                        product_service: ProductService, is_callback: bool = False) -> None:
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤-—Ç—Ä–∏–ø–≤–∞–π–µ—Ä–æ–≤."""
    try:
        products = await product_service.get_all_products()
        
        if not products:
            empty_text = (
                f"üì¶ <b>–ü—Ä–æ–¥—É–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>\n\n"
                f"–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤.\n\n"
                f"üí° <b>–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç:</b>\n"
                f"‚Ä¢ –ù–∞–∂–º–∏—Ç–µ '‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç'\n"
                f"‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø (—Ç—Ä–∏–ø–≤–∞–π–µ—Ä/–∫—É—Ä—Å/–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è)\n"
                f"‚Ä¢ –ó–∞–ø–æ–ª–Ω–∏—Ç–µ 5 –ø—Ä–æ—Å—Ç—ã—Ö —à–∞–≥–æ–≤\n\n"
                f"üöÄ –°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç!"
            )
            
            keyboard = [
                [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç", callback_data="admin_tripwire_add_product")],
                [InlineKeyboardButton("üîô –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é", callback_data="admin_tripwire_manage")]
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            await _safe_edit_message(update, context, empty_text, reply_markup)
            return
        
        list_text = (
            f"üì¶ <b>–í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã</b>\n"
            f"üìä –í—Å–µ–≥–æ: {len(products)} –ø—Ä–æ–¥—É–∫—Ç–æ–≤\n\n"
        )
        
        keyboard = []
        
        for i, product in enumerate(products, 1):
            status_emoji = "‚úÖ" if product.is_active else "‚è∏Ô∏è"
            type_emoji = {
                "tripwire": "üéØ",
                "course": "üìö",
                "consultation": "üí¨"
            }.get(product.type, "üì¶")
            
            price_text = f"{product.price}‚ÇΩ" if product.price else "–ë–µ—Å–ø–ª–∞—Ç–Ω–æ"
            offers_count = len(product.offers) if product.offers else 0
            
            list_text += (
                f"{i}. {status_emoji}{type_emoji} <b>{product.name}</b>\n"
                f"   üí∞ {price_text} | üìã {offers_count} –æ—Ñ—Ñ–µ—Ä–æ–≤\n"
                f"   üìÖ {product.created_at.strftime('%d.%m.%y')}\n"
            )
            
            # –°–æ–∫—Ä–∞—â–∞–µ–º UUID –¥–ª—è callback_data
            short_id = str(product.id).replace('-', '')[:16]
            keyboard.append([
                InlineKeyboardButton(f"üëÅÔ∏è {product.name[:20]}...", 
                                   callback_data=f"admin_tp_view_{short_id}"),
                InlineKeyboardButton("üîÑ", callback_data=f"admin_tp_toggle_{short_id}"),
                InlineKeyboardButton("üóëÔ∏è", callback_data=f"admin_tp_delete_{short_id}")
            ])
        
        keyboard.extend([
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç", callback_data="admin_tripwire_add_product")],
            [InlineKeyboardButton("üìã –û—Ñ—Ñ–µ—Ä—ã", callback_data="admin_tripwire_offers")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_tripwire_manage")]
        ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await _safe_edit_message(update, context, list_text, reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {e}")
        await _safe_edit_message(update, context, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤")


async def _handle_tripwire_offers_list(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                      product_service: ProductService, is_callback: bool = False) -> None:
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ—Ñ—Ñ–µ—Ä–æ–≤."""
    try:
        offers = await product_service.get_all_offers()
        
        if not offers:
            empty_text = (
                f"üìã <b>–û—Ñ—Ñ–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>\n\n"
                f"–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ—Ñ—Ñ–µ—Ä–æ–≤.\n\n"
                f"üí° <b>–û—Ñ—Ñ–µ—Ä—ã —Å–æ–∑–¥–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</b> –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤.\n\n"
                f"üöÄ –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–¥—É–∫—Ç, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ—Ñ—Ñ–µ—Ä—ã!"
            )
            
            keyboard = [
                [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç", callback_data="admin_tripwire_add_product")],
                [InlineKeyboardButton("üì¶ –ü—Ä–æ–¥—É–∫—Ç—ã", callback_data="admin_tripwire_products")],
                [InlineKeyboardButton("üîô –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é", callback_data="admin_tripwire_manage")]
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            await _safe_edit_message(update, context, empty_text, reply_markup)
            return
        
        list_text = (
            f"üìã <b>–í—Å–µ –æ—Ñ—Ñ–µ—Ä—ã</b>\n"
            f"üìä –í—Å–µ–≥–æ: {len(offers)} –æ—Ñ—Ñ–µ—Ä–æ–≤\n\n"
        )
        
        keyboard = []
        
        for i, offer in enumerate(offers, 1):
            status_emoji = "‚úÖ" if offer.is_active else "‚è∏Ô∏è"
            product_name = offer.product.name if offer.product else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç"
            
            list_text += (
                f"{i}. {status_emoji} <b>–û—Ñ—Ñ–µ—Ä #{i}</b>\n"
                f"   üì¶ –ü—Ä–æ–¥—É–∫—Ç: {product_name}\n"
                f"   üìÖ –°–æ–∑–¥–∞–Ω: {offer.created_at.strftime('%d.%m.%y')}\n"
            )
            
            # –°–æ–∫—Ä–∞—â–∞–µ–º UUID –¥–ª—è callback_data
            short_id = str(offer.id).replace('-', '')[:16]
            keyboard.append([
                InlineKeyboardButton(f"üëÅÔ∏è –û—Ñ—Ñ–µ—Ä #{i}", 
                                   callback_data=f"admin_to_view_{short_id}"),
                InlineKeyboardButton("üîÑ", callback_data=f"admin_to_toggle_{short_id}"),
                InlineKeyboardButton("üóëÔ∏è", callback_data=f"admin_to_delete_{short_id}")
            ])
        
        keyboard.extend([
            [InlineKeyboardButton("üì¶ –ü—Ä–æ–¥—É–∫—Ç—ã", callback_data="admin_tripwire_products")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_tripwire_manage")]
        ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await _safe_edit_message(update, context, list_text, reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–ø–∏—Å–∫–∞ –æ—Ñ—Ñ–µ—Ä–æ–≤: {e}")
        await _safe_edit_message(update, context, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –æ—Ñ—Ñ–µ—Ä–æ–≤")


async def _handle_tripwire_detailed_stats(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                         product_service: ProductService, is_callback: bool = False) -> None:
    """–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∏–ø–≤–∞–π–µ—Ä–æ–≤."""
    try:
        stats = await product_service.get_tripwire_statistics()
        top_offers = await product_service.get_top_performing_offers()
        
        stats_text = (
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∏–ø–≤–∞–π–µ—Ä–æ–≤</b>\n\n"
            f"üì¶ <b>–ü—Ä–æ–¥—É–∫—Ç—ã:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ: {stats['products']['total']}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['products']['active']}\n"
            f"‚Ä¢ –¢—Ä–∏–ø–≤–∞–π–µ—Ä–æ–≤: {stats['products']['tripwire']}\n\n"
            f"üìã <b>–û—Ñ—Ñ–µ—Ä—ã:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ: {stats['offers']['total']}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['offers']['active']}\n\n"
            f"üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –æ—Ñ—Ñ–µ—Ä—ã:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö: {stats['user_offers']['total']}\n"
            f"‚Ä¢ –ü–æ–∫–∞–∑–∞–Ω–æ: {stats['user_offers']['shown']}\n"
            f"‚Ä¢ –ö–ª–∏–∫–Ω—É—Ç–æ: {stats['user_offers']['clicked']}\n"
            f"‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è: {stats['user_offers']['conversion_rate']}%\n"
        )
        
        if top_offers:
            stats_text += f"\nüèÜ <b>–¢–æ–ø-–æ—Ñ—Ñ–µ—Ä—ã:</b>\n"
            for i, offer in enumerate(top_offers, 1):
                stats_text += (
                    f"{i}. {offer['product_name']}\n"
                    f"   üëÅÔ∏è {offer['shows']} –ø–æ–∫–∞–∑–æ–≤ | "
                    f"üëÜ {offer['clicks']} –∫–ª–∏–∫–æ–≤ | "
                    f"üìà {offer['conversion']}%\n"
                )
        
        keyboard = [
            [InlineKeyboardButton("üì¶ –ü—Ä–æ–¥—É–∫—Ç—ã", callback_data="admin_tripwire_products")],
            [InlineKeyboardButton("üìã –û—Ñ—Ñ–µ—Ä—ã", callback_data="admin_tripwire_offers")],
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_tripwire_stats")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_tripwire_manage")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await _safe_edit_message(update, context, stats_text, reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—Ä–∏–ø–≤–∞–π–µ—Ä–æ–≤: {e}")
        await _safe_edit_message(update, context, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


async def _handle_add_product_form(update: Update, context: ContextTypes.DEFAULT_TYPE, is_callback: bool = False) -> None:
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Ñ–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞."""
    try:
        form_text = (
            f"‚ûï <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞</b>\n\n"
            f"üéØ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è:</b>\n\n"
            f"üìà <b>–¢—Ä–∏–ø–≤–∞–π–µ—Ä</b> - –ù–µ–¥–æ—Ä–æ–≥–æ–π –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞\n"
            f"üí∞ –¶–µ–Ω–∞: 300-2000 —Ä—É–±–ª–µ–π\n"
            f"üéØ –¶–µ–ª—å: –ü—Ä–∏–≤–ª–µ—á—å –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤\n\n"
            f"üìö <b>–ö—É—Ä—Å</b> - –ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –æ–±—É—á–∞—é—â–∏–π –∫—É—Ä—Å\n"
            f"üí∞ –¶–µ–Ω–∞: 5000-50000 —Ä—É–±–ª–µ–π\n"
            f"üéØ –¶–µ–ª—å: –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ç\n\n"
            f"üë• <b>–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è</b> - –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞\n"
            f"üí∞ –¶–µ–Ω–∞: 3000-30000 —Ä—É–±–ª–µ–π\n"
            f"üéØ –¶–µ–ª—å: –ü—Ä–µ–º–∏—É–º —É—Å–ª—É–≥–∏"
        )
        
        keyboard = [
            [InlineKeyboardButton("üìà –°–æ–∑–¥–∞—Ç—å —Ç—Ä–∏–ø–≤–∞–π–µ—Ä", callback_data="admin_create_tripwire")],
            [InlineKeyboardButton("üìö –°–æ–∑–¥–∞—Ç—å –∫—É—Ä—Å", callback_data="admin_create_course")],
            [InlineKeyboardButton("üë• –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", callback_data="admin_create_consultation")],
            [InlineKeyboardButton("üîô –ö –ø—Ä–æ–¥—É–∫—Ç–∞–º", callback_data="admin_tripwire_products")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await _safe_edit_message(update, context, form_text, reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞: {e}")
        await _safe_edit_message(update, context, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ä–º—ã")


async def _handle_create_product_dialog(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                       product_type: str, is_callback: bool = False) -> None:
    """–î–∏–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞."""
    try:
        logger.info(f"üéØ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Ç–∏–ø–∞: {product_type}")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ context.user_data
        if not hasattr(context, 'user_data') or context.user_data is None:
            context.user_data = {}
        context.user_data['product_creation'] = {'type': product_type, 'step': 'name'}
        
        type_names = {
            'tripwire': 'üìà –¢—Ä–∏–ø–≤–∞–π–µ—Ä',
            'course': 'üìö –ö—É—Ä—Å', 
            'consultation': 'üë• –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è'
        }
        
        examples = {
            'tripwire': '30 –¥–Ω–µ–π –ø–æ –∫–Ω–∏–≥–µ –•–∏–ª–ª–∞',
            'course': '–ü–æ–ª–Ω—ã–π –∫—É—Ä—Å –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –±–∏–∑–Ω–µ—Å–∞',
            'consultation': '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏'
        }
        
        dialog_text = (
            f"‚úçÔ∏è <b>–°–æ–∑–¥–∞–Ω–∏–µ: {type_names.get(product_type, product_type.title())}</b>\n\n"
            f"üìù <b>–®–∞–≥ 1/5: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞</b>\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞:\n\n"
            f"üí° <b>–ü—Ä–∏–º–µ—Ä:</b> <i>{examples.get(product_type, '–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞')}</i>\n\n"
            f"‚ö†Ô∏è <b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:</b>\n"
            f"‚Ä¢ –î–ª–∏–Ω–∞: 3-100 —Å–∏–º–≤–æ–ª–æ–≤\n"
            f"‚Ä¢ –ü–æ–Ω—è—Ç–Ω–æ–µ –∏ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ\n"
            f"‚Ä¢ –ë–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤\n\n"
            f"üì® <b>–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>"
        )
        
        keyboard = [
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="admin_tripwire_add_product")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await _safe_edit_message(update, context, dialog_text, reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–∏–∞–ª–æ–≥–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ {product_type}: {e}")
        await _safe_edit_message(update, context, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞")


async def handle_product_creation_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞."""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
        if (not hasattr(context, 'user_data') or 
            context.user_data is None or 
            'product_creation' not in context.user_data):
            return
            
        creation_data = context.user_data['product_creation']
        text = update.message.text.strip()
        
        if creation_data['step'] == 'name':
            await _handle_product_name_step(update, context, text)
        elif creation_data['step'] == 'description':
            await _handle_product_description_step(update, context, text)
        elif creation_data['step'] == 'price':
            await _handle_product_price_step(update, context, text)
        elif creation_data['step'] == 'payment_url':
            await _handle_product_payment_url_step(update, context, text)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö")


async def _handle_product_name_step(update: Update, context: ContextTypes.DEFAULT_TYPE, name: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞."""
    try:
        if len(name) < 3 or len(name) > 100:
            await update.message.reply_text(
                "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 3 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:"
            )
            return
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–ø–∏—Å–∞–Ω–∏—é
        context.user_data['product_creation']['name'] = name
        context.user_data['product_creation']['step'] = 'description'
        
        product_type = context.user_data['product_creation']['type']
        type_names = {
            'tripwire': 'üìà –¢—Ä–∏–ø–≤–∞–π–µ—Ä',
            'course': 'üìö –ö—É—Ä—Å', 
            'consultation': 'üë• –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è'
        }
        
        examples = {
            'tripwire': '–ú–∏–Ω–∏-–∫—É—Ä—Å –∏–∑ 5 —É—Ä–æ–∫–æ–≤ –ø–æ –æ—Å–Ω–æ–≤–∞–º –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–æ–º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —É–∂–µ —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é.',
            'course': '–ü–æ–ª–Ω—ã–π –∫—É—Ä—Å –∏–∑ 20 –º–æ–¥—É–ª–µ–π –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –±–∏–∑–Ω–µ—Å–∞ —Å –Ω—É–ª—è –¥–æ –ø–µ—Ä–≤–æ–π –ø—Ä–∏–±—ã–ª–∏ –∑–∞ 3 –º–µ—Å—è—Ü–∞.',
            'consultation': '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è 2-—á–∞—Å–æ–≤–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ä–∞–∑–≤–∏—Ç–∏—è –±–∏–∑–Ω–µ—Å–∞ —Å –ø–ª–∞–Ω–æ–º –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤.'
        }
        
        dialog_text = (
            f"‚úÖ <b>–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:</b> {name}\n\n"
            f"‚úçÔ∏è <b>–°–æ–∑–¥–∞–Ω–∏–µ: {type_names.get(product_type, product_type.title())}</b>\n\n"
            f"üìù <b>–®–∞–≥ 2/5: –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞</b>\n\n"
            f"–ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:\n\n"
            f"üí° <b>–ü—Ä–∏–º–µ—Ä:</b>\n<i>{examples.get(product_type, '–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞')}</i>\n\n"
            f"‚ö†Ô∏è <b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:</b>\n"
            f"‚Ä¢ –î–ª–∏–Ω–∞: 10-500 —Å–∏–º–≤–æ–ª–æ–≤\n"
            f"‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ —á—Ç–æ –ø–æ–ª—É—á–∏—Ç –∫–ª–∏–µ–Ω—Ç\n"
            f"‚Ä¢ –£–∫–∞–∂–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –≤—Ä–µ–º—è\n\n"
            f"üì® <b>–ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>"
        )
        
        keyboard = [
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="admin_tripwire_add_product")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(dialog_text, reply_markup=reply_markup, parse_mode='HTML')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —à–∞–≥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è")


async def _handle_product_description_step(update: Update, context: ContextTypes.DEFAULT_TYPE, description: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞."""
    try:
        if len(description) < 10 or len(description) > 500:
            await update.message.reply_text(
                "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 10 –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:"
            )
            return
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ü–µ–Ω–µ
        context.user_data['product_creation']['description'] = description
        context.user_data['product_creation']['step'] = 'price'
        
        product_type = context.user_data['product_creation']['type']
        type_names = {
            'tripwire': 'üìà –¢—Ä–∏–ø–≤–∞–π–µ—Ä',
            'course': 'üìö –ö—É—Ä—Å', 
            'consultation': 'üë• –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è'
        }
        
        price_ranges = {
            'tripwire': '300-2000 —Ä—É–±–ª–µ–π',
            'course': '5000-50000 —Ä—É–±–ª–µ–π',
            'consultation': '3000-30000 —Ä—É–±–ª–µ–π'
        }
        
        dialog_text = (
            f"‚úÖ <b>–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ</b>\n\n"
            f"‚úçÔ∏è <b>–°–æ–∑–¥–∞–Ω–∏–µ: {type_names.get(product_type, product_type.title())}</b>\n\n"
            f"üìù <b>–®–∞–≥ 3/5: –¶–µ–Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∞</b>\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ —Ä—É–±–ª—è—Ö (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):\n\n"
            f"üí∞ <b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω:</b> {price_ranges.get(product_type, '1000-10000 —Ä—É–±–ª–µ–π')}\n\n"
            f"‚ö†Ô∏è <b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:</b>\n"
            f"‚Ä¢ –¢–æ–ª—å–∫–æ —á–∏—Å–ª–æ (–±–µ–∑ —Å–ª–æ–≤ –∏ —Å–∏–º–≤–æ–ª–æ–≤)\n"
            f"‚Ä¢ –û—Ç 100 –¥–æ 500000 —Ä—É–±–ª–µ–π\n"
            f"‚Ä¢ –ù–∞–ø—Ä–∏–º–µ—Ä: 990 –∏–ª–∏ 5000\n\n"
            f"üì® <b>–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>"
        )
        
        keyboard = [
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="admin_tripwire_add_product")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(dialog_text, reply_markup=reply_markup, parse_mode='HTML')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —à–∞–≥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è")


async def _handle_product_price_step(update: Update, context: ContextTypes.DEFAULT_TYPE, price_text: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–∞ –≤–≤–æ–¥–∞ —Ü–µ–Ω—ã –ø—Ä–æ–¥—É–∫—Ç–∞."""
    try:
        try:
            price = int(price_text)
        except ValueError:
            await update.message.reply_text(
                "‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ù–∞–ø—Ä–∏–º–µ—Ä: 990\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:"
            )
            return
            
        if price < 100 or price > 500000:
            await update.message.reply_text(
                "‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 100 –¥–æ 500000 —Ä—É–±–ª–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:"
            )
            return
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–Ω—É –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å—Å—ã–ª–∫–µ –Ω–∞ –æ–ø–ª–∞—Ç—É
        context.user_data['product_creation']['price'] = price
        context.user_data['product_creation']['step'] = 'payment_url'
        
        product_type = context.user_data['product_creation']['type']
        type_names = {
            'tripwire': 'üìà –¢—Ä–∏–ø–≤–∞–π–µ—Ä',
            'course': 'üìö –ö—É—Ä—Å', 
            'consultation': 'üë• –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è'
        }
        
        dialog_text = (
            f"‚úÖ <b>–¶–µ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:</b> {price:,} ‚ÇΩ\n\n"
            f"‚úçÔ∏è <b>–°–æ–∑–¥–∞–Ω–∏–µ: {type_names.get(product_type, product_type.title())}</b>\n\n"
            f"üìù <b>–®–∞–≥ 4/5: –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É</b>\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã:\n\n"
            f"üí° <b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
            f"‚Ä¢ https://pay.cloudpayments.ru/...\n"
            f"‚Ä¢ https://yookassa.ru/...\n"
            f"‚Ä¢ https://t.me/CryptoBot?start=...\n\n"
            f"‚ö†Ô∏è <b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:</b>\n"
            f"‚Ä¢ –î–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å https://\n"
            f"‚Ä¢ –†–∞–±–æ—á–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–ª–∞—Ç—ë–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É\n\n"
            f"üì® <b>–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>"
        )
        
        keyboard = [
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="admin_tripwire_add_product")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(dialog_text, reply_markup=reply_markup, parse_mode='HTML')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —à–∞–≥–∞ —Ü–µ–Ω—ã –ø—Ä–æ–¥—É–∫—Ç–∞: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã")


async def _handle_product_payment_url_step(update: Update, context: ContextTypes.DEFAULT_TYPE, payment_url: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–∞ –≤–≤–æ–¥–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É –∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞."""
    try:
        if not payment_url.startswith('https://'):
            await update.message.reply_text(
                "‚ùå –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å https://\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:"
            )
            return
            
        if len(payment_url) < 10 or len(payment_url) > 500:
            await update.message.reply_text(
                "‚ùå –°—Å—ã–ª–∫–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è –∏–ª–∏ –¥–ª–∏–Ω–Ω–∞—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:"
            )
            return
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –∏ —Å–æ–∑–¥–∞—ë–º –ø—Ä–æ–¥—É–∫—Ç
        creation_data = context.user_data['product_creation']
        
        # –°–æ–∑–¥–∞—ë–º –ø—Ä–æ–¥—É–∫—Ç —á–µ—Ä–µ–∑ ProductService
        async for session in get_database():
            product_service = ProductService(session)
            
            from app.schemas.product import ProductCreate
            from app.models.product import ProductType, Currency
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ enum
            product_type_enum = ProductType.TRIPWIRE
            if creation_data['type'] == 'course':
                product_type_enum = ProductType.COURSE
            elif creation_data['type'] == 'consultation':
                product_type_enum = ProductType.CONSULTATION
                
            product_data = ProductCreate(
                name=creation_data['name'],
                description=creation_data['description'],
                type=product_type_enum,
                price=creation_data['price'],
                currency=Currency.RUB,
                payment_url=payment_url,
                offer_text=f"üéØ {creation_data['name']}\n\n{creation_data['description']}\n\nüí∞ –¶–µ–Ω–∞: {creation_data['price']:,} ‚ÇΩ",
                is_active=True
            )
            
            product = await product_service.create_product(product_data)
            
            if product:
                type_names = {
                    'tripwire': 'üìà –¢—Ä–∏–ø–≤–∞–π–µ—Ä',
                    'course': 'üìö –ö—É—Ä—Å', 
                    'consultation': 'üë• –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è'
                }
                
                success_text = (
                    f"üéâ <b>–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</b>\n\n"
                    f"üì¶ <b>–¢–∏–ø:</b> {type_names.get(creation_data['type'], creation_data['type'].title())}\n"
                    f"üè∑Ô∏è <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {creation_data['name']}\n"
                    f"üí∞ <b>–¶–µ–Ω–∞:</b> {creation_data['price']:,} ‚ÇΩ\n"
                    f"üîó <b>–°—Å—ã–ª–∫–∞:</b> {payment_url[:50]}...\n\n"
                    f"‚úÖ <b>–°—Ç–∞—Ç—É—Å:</b> –ê–∫—Ç–∏–≤–µ–Ω\n"
                    f"üÜî <b>ID:</b> <code>{product.id}</code>\n\n"
                    f"üöÄ <b>–ü—Ä–æ–¥—É–∫—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!</b>"
                )
                
                keyboard = [
                    [InlineKeyboardButton("üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–¥—É–∫—Ç–∞", callback_data=f"admin_tp_view_{str(product.id).replace('-', '')[:16]}")],
                    [InlineKeyboardButton("üì¶ –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã", callback_data="admin_tripwire_products")],
                    [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –µ—â—ë", callback_data="admin_tripwire_add_product")]
                ]
                
                reply_markup = InlineKeyboardMarkup(keyboard)
                await update.message.reply_text(success_text, reply_markup=reply_markup, parse_mode='HTML')
                
                # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–∏—è
                del context.user_data['product_creation']
                
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞")


async def _handle_view_product(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                              product_service: ProductService, product_id: str, is_callback: bool = False) -> None:
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥—É–∫—Ç–µ."""
    try:
        product = await product_service.get_product_by_id(product_id)
        if not product:
            await _safe_edit_message(update, context, "‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        status_emoji = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if product.is_active else "‚è∏Ô∏è –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
        type_emoji = {
            "tripwire": "üéØ –¢—Ä–∏–ø–≤–∞–π–µ—Ä",
            "course": "üìö –ö—É—Ä—Å", 
            "consultation": "üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"
        }.get(product.type, "üì¶ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        
        offers_count = len(product.offers) if product.offers else 0
        active_offers = sum(1 for offer in (product.offers or []) if offer.is_active)
        
        product_text = (
            f"üì¶ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥—É–∫—Ç–µ</b>\n\n"
            f"üìã <b>–û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>\n"
            f"‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{product.name}</b>\n"
            f"‚Ä¢ –¢–∏–ø: {type_emoji}\n"
            f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {status_emoji}\n"
            f"‚Ä¢ –¶–µ–Ω–∞: <b>{product.price}‚ÇΩ</b>\n\n"
            f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n"
            f"{product.description or '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n\n"
            f"üìã <b>–û—Ñ—Ñ–µ—Ä—ã:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ: {offers_count}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_offers}\n\n"
            f"üîó <b>–°—Å—ã–ª–∫–∏:</b>\n"
            f"‚Ä¢ –û–ø–ª–∞—Ç–∞: {product.payment_url or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n\n"
            f"üìÖ <b>–í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏:</b>\n"
            f"‚Ä¢ –°–æ–∑–¥–∞–Ω: {product.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            f"‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω: {product.updated_at.strftime('%d.%m.%Y %H:%M')}\n"
        )
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ callback'–∏
        short_id = str(product_id).replace('-', '')[:16]
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å" if not product.is_active else "‚è∏Ô∏è –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", 
                                   callback_data=f"admin_tp_toggle_{short_id}"),
                InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"admin_tp_delete_{short_id}")
            ],
            [InlineKeyboardButton("üìã –û—Ñ—Ñ–µ—Ä—ã –ø—Ä–æ–¥—É–∫—Ç–∞", callback_data="admin_tripwire_offers")],
            [InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É", callback_data="admin_tripwire_products")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await _safe_edit_message(update, context, product_text, reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id}: {e}")
        await _safe_edit_message(update, context, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥—É–∫—Ç–µ")


async def _handle_toggle_product_status(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                       product_service: ProductService, product_id: str, is_callback: bool = False) -> None:
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–¥—É–∫—Ç–∞."""
    try:
        product = await product_service.get_product_by_id(product_id)
        if not product:
            await _safe_edit_message(update, context, "‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        success = await product_service.toggle_product_status(product_id)
        
        if success:
            new_status = "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω" if not product.is_active else "–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
            result_text = (
                f"‚úÖ <b>–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω</b>\n\n"
                f"üì¶ –ü—Ä–æ–¥—É–∫—Ç <b>{product.name}</b>\n"
                f"üîÑ –°—Ç–∞—Ç—É—Å: {new_status}\n"
                f"üìÖ –í—Ä–µ–º—è: {datetime.utcnow().strftime('%d.%m.%Y %H:%M')}"
            )
        else:
            result_text = (
                f"‚ùå <b>–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞</b>\n\n"
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–¥—É–∫—Ç–∞ {product.name}"
            )
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ callback'–∏
        short_id = str(product_id).replace('-', '')[:16]
        keyboard = [
            [InlineKeyboardButton("üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–¥—É–∫—Ç–∞", callback_data=f"admin_tp_view_{short_id}")],
            [InlineKeyboardButton("üîô –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é", callback_data="admin_tripwire_manage")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await _safe_edit_message(update, context, result_text, reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id}: {e}")
        await _safe_edit_message(update, context, "‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")


async def _handle_delete_product_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                        product_service: ProductService, product_id: str, is_callback: bool = False) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞."""
    try:
        product = await product_service.get_product_by_id(product_id)
        if not product:
            await _safe_edit_message(update, context, "‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        offers_count = len(product.offers) if product.offers else 0
        
        confirm_text = (
            f"‚ö†Ô∏è <b>–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –£–î–ê–õ–ï–ù–ò–Ø</b>\n\n"
            f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç?\n\n"
            f"üì¶ <b>{product.name}</b>\n"
            f"üí∞ –¶–µ–Ω–∞: {product.price}‚ÇΩ\n"
            f"üìã –û—Ñ—Ñ–µ—Ä–æ–≤: {offers_count}\n"
            f"üìÖ –°–æ–∑–¥–∞–Ω: {product.created_at.strftime('%d.%m.%Y')}\n\n"
            f"üö® <b>–í–ù–ò–ú–ê–ù–ò–ï!</b>\n"
            f"‚Ä¢ –ü—Ä–æ–¥—É–∫—Ç –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω –Ω–∞–≤—Å–µ–≥–¥–∞\n"
            f"‚Ä¢ –í—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –æ—Ñ—Ñ–µ—Ä—ã –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã\n"
            f"‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ—Ç –æ—á–∏—â–µ–Ω–∞\n"
            f"‚Ä¢ –î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ\n\n"
            f"‚ùì –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ?"
        )
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ callback'–∏
        short_id = str(product_id).replace('-', '')[:16]
        keyboard = [
            [
                InlineKeyboardButton("üóëÔ∏è –î–ê, –£–î–ê–õ–ò–¢–¨", callback_data=f"admin_tp_confirm_{short_id}"),
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"admin_tp_view_{short_id}")
            ],
            [InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É", callback_data="admin_tripwire_products")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await _safe_edit_message(update, context, confirm_text, reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id}: {e}")
        await _safe_edit_message(update, context, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è")


async def _handle_delete_product_final(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                      product_service: ProductService, product_id: str, is_callback: bool = False) -> None:
    """–§–∏–Ω–∞–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞."""
    try:
        product = await product_service.get_product_by_id(product_id)
        if not product:
            await _safe_edit_message(update, context, "‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        product_name = product.name
        success = await product_service.delete_product(product_id)
        
        if success:
            result_text = (
                f"‚úÖ <b>–ü—Ä–æ–¥—É–∫—Ç —É–¥–∞–ª–µ–Ω</b>\n\n"
                f"üì¶ <b>{product_name}</b> –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã\n"
                f"üìÖ –í—Ä–µ–º—è —É–¥–∞–ª–µ–Ω–∏—è: {datetime.utcnow().strftime('%d.%m.%Y %H:%M')}\n\n"
                f"üóÇÔ∏è –í—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã"
            )
        else:
            result_text = (
                f"‚ùå <b>–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n"
                f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç {product_name}\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É"
            )
        
        keyboard = [
            [InlineKeyboardButton("üì¶ –ö —Å–ø–∏—Å–∫—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤", callback_data="admin_tripwire_products")],
            [InlineKeyboardButton("üîô –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é", callback_data="admin_tripwire_manage")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await _safe_edit_message(update, context, result_text, reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id}: {e}")
        await _safe_edit_message(update, context, "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è")


async def _handle_view_offer(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                            product_service: ProductService, offer_id: str, is_callback: bool = False) -> None:
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ñ—Ñ–µ—Ä–µ."""
    try:
        offer = await product_service.get_offer_by_id(offer_id)
        if not offer:
            await _safe_edit_message(update, context, "‚ùå –û—Ñ—Ñ–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        status_emoji = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if offer.is_active else "‚è∏Ô∏è –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
        product_name = offer.product.name if offer.product else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç"
        
        offer_text = (
            f"üìã <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ñ—Ñ–µ—Ä–µ</b>\n\n"
            f"üì¶ <b>–ü—Ä–æ–¥—É–∫—Ç:</b> {product_name}\n"
            f"üîÑ <b>–°—Ç–∞—Ç—É—Å:</b> {status_emoji}\n\n"
            f"üìÖ <b>–í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏:</b>\n"
            f"‚Ä¢ –°–æ–∑–¥–∞–Ω: {offer.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            f"‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω: {offer.updated_at.strftime('%d.%m.%Y %H:%M')}\n\n"
            f"üîß <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n"
            f"‚Ä¢ ID –æ—Ñ—Ñ–µ—Ä–∞: <code>{offer.id}</code>\n"
            f"‚Ä¢ ID –ø—Ä–æ–¥—É–∫—Ç–∞: <code>{offer.product_id}</code>"
        )
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ callback'–∏
        short_offer_id = str(offer_id).replace('-', '')[:16]
        short_product_id = str(offer.product_id).replace('-', '')[:16]
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å" if not offer.is_active else "‚è∏Ô∏è –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", 
                                   callback_data=f"admin_to_toggle_{short_offer_id}"),
                InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"admin_to_delete_{short_offer_id}")
            ],
            [InlineKeyboardButton("üì¶ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–¥—É–∫—Ç–∞", callback_data=f"admin_tp_view_{short_product_id}")],
            [InlineKeyboardButton("üîô –ö –æ—Ñ—Ñ–µ—Ä–∞–º", callback_data="admin_tripwire_offers")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await _safe_edit_message(update, context, offer_text, reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ñ—Ñ–µ—Ä–∞ {offer_id}: {e}")
        await _safe_edit_message(update, context, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ñ—Ñ–µ—Ä–µ")


async def _handle_toggle_offer_status(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                     product_service: ProductService, offer_id: str, is_callback: bool = False) -> None:
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ñ—Ñ–µ—Ä–∞."""
    try:
        offer = await product_service.get_offer_by_id(offer_id)
        if not offer:
            await _safe_edit_message(update, context, "‚ùå –û—Ñ—Ñ–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        success = await product_service.toggle_offer_status(offer_id)
        
        if success:
            new_status = "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω" if not offer.is_active else "–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
            product_name = offer.product.name if offer.product else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç"
            result_text = (
                f"‚úÖ <b>–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω</b>\n\n"
                f"üìã –û—Ñ—Ñ–µ—Ä –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ <b>{product_name}</b>\n"
                f"üîÑ –°—Ç–∞—Ç—É—Å: {new_status}\n"
                f"üìÖ –í—Ä–µ–º—è: {datetime.utcnow().strftime('%d.%m.%Y %H:%M')}"
            )
        else:
            result_text = (
                f"‚ùå <b>–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞</b>\n\n"
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ—Ñ—Ñ–µ—Ä–∞"
            )
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ callback'–∏
        short_id = str(offer_id).replace('-', '')[:16]
        keyboard = [
            [InlineKeyboardButton("üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ñ—Ñ–µ—Ä–∞", callback_data=f"admin_to_view_{short_id}")],
            [InlineKeyboardButton("üîô –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é", callback_data="admin_tripwire_manage")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await _safe_edit_message(update, context, result_text, reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ—Ñ—Ñ–µ—Ä–∞ {offer_id}: {e}")
        await _safe_edit_message(update, context, "‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")


async def _handle_delete_offer_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                      product_service: ProductService, offer_id: str, is_callback: bool = False) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–∞."""
    try:
        offer = await product_service.get_offer_by_id(offer_id)
        if not offer:
            await _safe_edit_message(update, context, "‚ùå –û—Ñ—Ñ–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        product_name = offer.product.name if offer.product else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç"
        
        confirm_text = (
            f"‚ö†Ô∏è <b>–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –£–î–ê–õ–ï–ù–ò–Ø</b>\n\n"
            f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –æ—Ñ—Ñ–µ—Ä?\n\n"
            f"üìã <b>–û—Ñ—Ñ–µ—Ä</b>\n"
            f"üì¶ –ü—Ä–æ–¥—É–∫—Ç: {product_name}\n"
            f"üìÖ –°–æ–∑–¥–∞–Ω: {offer.created_at.strftime('%d.%m.%Y')}\n\n"
            f"üö® <b>–í–ù–ò–ú–ê–ù–ò–ï!</b>\n"
            f"‚Ä¢ –û—Ñ—Ñ–µ—Ä –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω –Ω–∞–≤—Å–µ–≥–¥–∞\n"
            f"‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ñ—Ñ–µ—Ä—É –±—É–¥–µ—Ç –ø–æ—Ç–µ—Ä—è–Ω–∞\n"
            f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ —Å–º–æ–≥—É—Ç –ø–æ–ª—É—á–∏—Ç—å —ç—Ç–æ—Ç –æ—Ñ—Ñ–µ—Ä\n"
            f"‚Ä¢ –î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ\n\n"
            f"‚ùì –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ?"
        )
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ callback'–∏  
        short_id = str(offer_id).replace('-', '')[:16]
        keyboard = [
            [
                InlineKeyboardButton("üóëÔ∏è –î–ê, –£–î–ê–õ–ò–¢–¨", callback_data=f"admin_to_confirm_{short_id}"),
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"admin_to_view_{short_id}")
            ],
            [InlineKeyboardButton("üîô –ö –æ—Ñ—Ñ–µ—Ä–∞–º", callback_data="admin_tripwire_offers")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await _safe_edit_message(update, context, confirm_text, reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–∞ {offer_id}: {e}")
        await _safe_edit_message(update, context, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è")


async def _handle_delete_offer_final(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                    product_service: ProductService, offer_id: str, is_callback: bool = False) -> None:
    """–§–∏–Ω–∞–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞."""
    try:
        offer = await product_service.get_offer_by_id(offer_id)
        if not offer:
            await _safe_edit_message(update, context, "‚ùå –û—Ñ—Ñ–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        product_name = offer.product.name if offer.product else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç"
        success = await product_service.delete_offer(offer_id)
        
        if success:
            result_text = (
                f"‚úÖ <b>–û—Ñ—Ñ–µ—Ä —É–¥–∞–ª–µ–Ω</b>\n\n"
                f"üìã –û—Ñ—Ñ–µ—Ä –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ <b>{product_name}</b> –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω\n"
                f"üìÖ –í—Ä–µ–º—è —É–¥–∞–ª–µ–Ω–∏—è: {datetime.utcnow().strftime('%d.%m.%Y %H:%M')}\n\n"
                f"üóÇÔ∏è –í—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã"
            )
        else:
            result_text = (
                f"‚ùå <b>–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n"
                f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –æ—Ñ—Ñ–µ—Ä\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É"
            )
        
        keyboard = [
            [InlineKeyboardButton("üìã –ö —Å–ø–∏—Å–∫—É –æ—Ñ—Ñ–µ—Ä–æ–≤", callback_data="admin_tripwire_offers")],
            [InlineKeyboardButton("üîô –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é", callback_data="admin_tripwire_manage")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await _safe_edit_message(update, context, result_text, reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–∞ {offer_id}: {e}")
        await _safe_edit_message(update, context, "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è")


async def _handle_ritual_action(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                               action: str, is_callback: bool = False) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å —Ä–∏—Ç—É–∞–ª–∞–º–∏."""
    try:
        async for session in get_database():
            ritual_service = RitualService(session)
            user_service = UserService(session)
            
            if action == "admin_ritual_morning":
                await _handle_ritual_type_management(update, context, ritual_service, "morning", is_callback=True)
            elif action == "admin_ritual_evening":
                await _handle_ritual_type_management(update, context, ritual_service, "evening", is_callback=True)
            elif action == "admin_ritual_weekly_goals":
                await _handle_ritual_type_management(update, context, ritual_service, "weekly_goals", is_callback=True)
            elif action == "admin_ritual_challenges":
                await _handle_ritual_type_management(update, context, ritual_service, "weekly_challenge", is_callback=True)
            elif action == "admin_ritual_cycles":
                await _handle_ritual_type_management(update, context, ritual_service, "friday_cycle", is_callback=True)
            elif action == "admin_ritual_schedule":
                await _handle_ritual_schedule(update, context, ritual_service, is_callback=True)
            elif action == "admin_ritual_stats":
                await _handle_ritual_statistics(update, context, ritual_service, is_callback=True)
            elif action == "admin_ritual_global":
                await _handle_ritual_global_settings(update, context, ritual_service, is_callback=True)
            else:
                await _safe_edit_message(update, context, f"üîß –§—É–Ω–∫—Ü–∏—è '{action}' –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π —Å —Ä–∏—Ç—É–∞–ª–∞–º–∏ {action}: {e}")
        await _safe_edit_message(update, context, "‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è —Å —Ä–∏—Ç—É–∞–ª–∞–º–∏")


async def _handle_ritual_type_management(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                      ritual_service: "RitualService", ritual_type: str, is_callback: bool = False) -> None:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —Ç–∏–ø–æ–º —Ä–∏—Ç—É–∞–ª–æ–≤."""
    try:
        from app.models.ritual import RitualType
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ enum
        type_mapping = {
            "morning": RitualType.MORNING,
            "evening": RitualType.EVENING,
            "weekly_goals": RitualType.WEEKLY_GOALS,
            "weekly_challenge": RitualType.WEEKLY_CHALLENGE,
            "friday_cycle": RitualType.FRIDAY_CYCLE
        }
        
        ritual_type_enum = type_mapping.get(ritual_type)
        if not ritual_type_enum:
            await _safe_edit_message(update, context, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ä–∏—Ç—É–∞–ª–∞")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∏—Ç—É–∞–ª—ã —ç—Ç–æ–≥–æ —Ç–∏–ø–∞
        rituals = await ritual_service.get_active_rituals(ritual_type_enum)
        
        type_names = {
            "morning": "üåÖ –£—Ç—Ä–µ–Ω–Ω–∏–µ —Ä–∏—Ç—É–∞–ª—ã",
            "evening": "üåô –í–µ—á–µ—Ä–Ω–∏–µ —Ä–∏—Ç—É–∞–ª—ã", 
            "weekly_goals": "üéØ –¶–µ–ª–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é",
            "weekly_challenge": "üí™ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –≤—ã–∑–æ–≤—ã",
            "friday_cycle": "üîÑ –ü—è—Ç–Ω–∏—á–Ω—ã–µ —Ü–∏–∫–ª—ã"
        }
        
        message_text = f"{type_names[ritual_type]}\n\n"
        
        if rituals:
            for ritual in rituals[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                status = "üü¢" if ritual.is_active else "üî¥"
                time_str = f"{ritual.send_hour:02d}:{ritual.send_minute:02d}"
                weekday_str = ""
                if ritual.weekday is not None:
                    days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
                    weekday_str = f" ({days[ritual.weekday]})"
                
                message_text += f"{status} {ritual.name}\n"
                message_text += f"   ‚è∞ {time_str}{weekday_str}\n"
                message_text += f"   üìù {ritual.description or '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}\n\n"
        else:
            message_text += "üì≠ –†–∏—Ç—É–∞–ª—ã —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n\n"
        
        message_text += f"üìä –í—Å–µ–≥–æ —Ä–∏—Ç—É–∞–ª–æ–≤: {len(rituals)}"
        
        keyboard = [
            [InlineKeyboardButton("üü¢ –í–∫–ª—é—á–∏—Ç—å –≤—Å–µ", callback_data=f"admin_ritual_enable_{ritual_type}")],
            [InlineKeyboardButton("üî¥ –í—ã–∫–ª—é—á–∏—Ç—å –≤—Å–µ", callback_data=f"admin_ritual_disable_{ritual_type}")],
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä–µ–º—è", callback_data=f"admin_ritual_time_{ritual_type}")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"admin_ritual_stats_{ritual_type}")],
            [InlineKeyboardButton("üîô –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ä–∏—Ç—É–∞–ª–∞–º–∏", callback_data="admin_rituals_manage")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await _safe_edit_message(update, context, message_text, reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Ç—É–∞–ª–∞–º–∏ —Ç–∏–ø–∞ {ritual_type}: {e}")
        await _safe_edit_message(update, context, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∏—Ç—É–∞–ª–æ–≤")


async def _handle_ritual_statistics(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                  ritual_service: "RitualService", is_callback: bool = False) -> None:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∏—Ç—É–∞–ª–æ–≤."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–∏—Ç—É–∞–ª—ã
        rituals = await ritual_service.get_active_rituals()
        
        total_rituals = len(rituals)
        total_participants = 0
        total_sent = 0
        total_responses = 0
        
        message_text = "üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –†–ò–¢–£–ê–õ–û–í\n\n"
        
        for ritual in rituals:
            try:
                # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–µ–∑ get_ritual_stats
                message_text += f"üìå {ritual.name}\n"
                message_text += f"   üìÖ {ritual.type.value}\n"
                message_text += f"   ‚è∞ {ritual.send_hour:02d}:{ritual.send_minute:02d}\n"
                if ritual.weekday is not None:
                    days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
                    message_text += f"   üìÜ {days[ritual.weekday]}\n"
                message_text += f"   üü¢ –ê–∫—Ç–∏–≤–µ–Ω: {'–î–∞' if ritual.is_active else '–ù–µ—Ç'}\n\n"
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∏—Ç—É–∞–ª–∞ {ritual.name}: {e}")
        
        message_text += f"üìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n"
        message_text += f"üîÆ –í—Å–µ–≥–æ —Ä–∏—Ç—É–∞–ª–æ–≤: {total_rituals}\n"
        message_text += f"üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {sum(1 for r in rituals if r.is_active)}\n"
        message_text += f"üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {sum(1 for r in rituals if not r.is_active)}\n"
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_ritual_stats")],
            [InlineKeyboardButton("üìã –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data="admin_ritual_export")],
            [InlineKeyboardButton("üîô –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ä–∏—Ç—É–∞–ª–∞–º–∏", callback_data="admin_rituals_manage")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await _safe_edit_message(update, context, message_text, reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∏—Ç—É–∞–ª–æ–≤: {e}")
        await _safe_edit_message(update, context, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


async def _handle_ritual_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                ritual_service: "RitualService", is_callback: bool = False) -> None:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Ä–∏—Ç—É–∞–ª–æ–≤."""
    try:
        rituals = await ritual_service.get_active_rituals()
        
        message_text = "‚è∞ –†–ê–°–ü–ò–°–ê–ù–ò–ï –†–ò–¢–£–ê–õ–û–í\n\n"
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        schedule_map = {}
        for ritual in rituals:
            time_key = f"{ritual.send_hour:02d}:{ritual.send_minute:02d}"
            if time_key not in schedule_map:
                schedule_map[time_key] = []
            schedule_map[time_key].append(ritual)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        for time_str in sorted(schedule_map.keys()):
            message_text += f"üïê {time_str}\n"
            for ritual in schedule_map[time_str]:
                weekday_str = ""
                if ritual.weekday is not None:
                    days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
                    weekday_str = f" ({days[ritual.weekday]})"
                message_text += f"   ‚Ä¢ {ritual.name}{weekday_str}\n"
            message_text += "\n"
        
        keyboard = [
            [InlineKeyboardButton("‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è", callback_data="admin_ritual_change_time")],
            [InlineKeyboardButton("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è", callback_data="admin_ritual_sync")],
            [InlineKeyboardButton("üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å", callback_data="admin_ritual_calendar")],
            [InlineKeyboardButton("üîô –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ä–∏—Ç—É–∞–ª–∞–º–∏", callback_data="admin_rituals_manage")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await _safe_edit_message(update, context, message_text, reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Ä–∏—Ç—É–∞–ª–æ–≤: {e}")
        await _safe_edit_message(update, context, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")


async def _handle_ritual_global_settings(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                       ritual_service: "RitualService", is_callback: bool = False) -> None:
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∏—Ç—É–∞–ª–æ–≤."""
    try:
        rituals = await ritual_service.get_active_rituals()
        active_count = sum(1 for r in rituals if r.is_active)
        inactive_count = len(rituals) - active_count
        
        message_text = "üîß –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò –†–ò–¢–£–ê–õ–û–í\n\n"
        message_text += f"üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã:\n"
        message_text += f"üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∏—Ç—É–∞–ª–æ–≤: {active_count}\n"
        message_text += f"üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∏—Ç—É–∞–ª–æ–≤: {inactive_count}\n"
        message_text += f"üîÆ –í—Å–µ–≥–æ —Ä–∏—Ç—É–∞–ª–æ–≤: {len(rituals)}\n\n"
        
        message_text += "‚öôÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:\n"
        message_text += "‚Ä¢ –ú–∞—Å—Å–æ–≤–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ\n"
        message_text += "‚Ä¢ –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n"
        message_text += "‚Ä¢ –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∏—Ç—É–∞–ª–æ–≤\n"
        message_text += "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º\n"
        
        keyboard = [
            [InlineKeyboardButton("üü¢ –í–∫–ª—é—á–∏—Ç—å –≤—Å–µ —Ä–∏—Ç—É–∞–ª—ã", callback_data="admin_ritual_enable_all")],
            [InlineKeyboardButton("üî¥ –í—ã–∫–ª—é—á–∏—Ç—å –≤—Å–µ —Ä–∏—Ç—É–∞–ª—ã", callback_data="admin_ritual_disable_all")],
            [InlineKeyboardButton("üìä –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", callback_data="admin_ritual_reset_stats")],
            [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞", callback_data="admin_ritual_restart_scheduler")],
            [InlineKeyboardButton("üÜï –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –±–∞–∑–æ–≤—ã–µ —Ä–∏—Ç—É–∞–ª—ã", callback_data="admin_ritual_recreate")],
            [InlineKeyboardButton("üîô –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ä–∏—Ç—É–∞–ª–∞–º–∏", callback_data="admin_rituals_manage")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await _safe_edit_message(update, context, message_text, reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–∏—Ç—É–∞–ª–æ–≤: {e}")
        await _safe_edit_message(update, context, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")


async def _handle_restart_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE, is_callback: bool = False) -> None:
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∑–∞–¥–∞—á –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""
    await _safe_edit_message(update, context, "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∑–∞–¥–∞—á –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")


async def _handle_lead_magnet_create_form(update: Update, context: ContextTypes.DEFAULT_TYPE, lead_magnet_service: "LeadMagnetService", is_callback: bool = False) -> None:
    """–§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏–¥ –º–∞–≥–Ω–∏—Ç–∞."""
    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–∏—è
    context.user_data.pop('creating_lead_magnet', None)
    
    message_text = (
        "‚ûï <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ª–∏–¥ –º–∞–≥–Ω–∏—Ç–∞</b>\n\n"
        "üìù <b>–ß—Ç–æ –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å:</b>\n"
        "‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ –ª–∏–¥ –º–∞–≥–Ω–∏—Ç–∞\n"
        "‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ\n"
        "‚Ä¢ –¢–∏–ø (PDF, Google Sheet, —Å—Å—ã–ª–∫–∞, —Ç–µ–∫—Å—Ç)\n"
        "‚Ä¢ –°—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª (–µ—Å–ª–∏ –µ—Å—Ç—å)\n"
        "‚Ä¢ –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –≤—ã–¥–∞—á–µ\n\n"
        "üí° <b>–ü—Ä–∏–º–µ—Ä—ã —É—Å–ø–µ—à–Ω—ã—Ö –ª–∏–¥ –º–∞–≥–Ω–∏—Ç–æ–≤:</b>\n"
        "‚Ä¢ –ß–µ–∫-–ª–∏—Å—Ç—ã –∏ —Ç—Ä–µ–∫–µ—Ä—ã\n"
        "‚Ä¢ –ì–∞–π–¥—ã –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏\n"
        "‚Ä¢ –®–∞–±–ª–æ–Ω—ã –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã\n"
        "‚Ä¢ –ú–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã\n\n"
        "üéØ <b>–ù–∞—á–Ω–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ!</b>\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ª–∏–¥ –º–∞–≥–Ω–∏—Ç–∞:"
    )
    
    keyboard = [
        [InlineKeyboardButton("üìÑ PDF –¥–æ–∫—É–º–µ–Ω—Ç", callback_data="admin_lead_magnet_create_type_pdf")],
        [InlineKeyboardButton("üìä Google Sheet", callback_data="admin_lead_magnet_create_type_google_sheet")],
        [InlineKeyboardButton("üîó –°—Å—ã–ª–∫–∞", callback_data="admin_lead_magnet_create_type_link")],
        [InlineKeyboardButton("üìù –¢–µ–∫—Å—Ç", callback_data="admin_lead_magnet_create_type_text")],
        [InlineKeyboardButton("üîô –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ª–∏–¥ –º–∞–≥–Ω–∏—Ç–∞–º–∏", callback_data="admin_content_leadmagnets")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await _safe_edit_message(update, context, message_text, reply_markup)


async def _handle_lead_magnet_list(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                  lead_magnet_service: "LeadMagnetService", is_callback: bool = False) -> None:
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ª–∏–¥ –º–∞–≥–Ω–∏—Ç–æ–≤."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ª–∏–¥ –º–∞–≥–Ω–∏—Ç—ã
        all_magnets = await lead_magnet_service.get_all_lead_magnets()
        
        if not all_magnets:
            message_text = "üì≠ –õ–∏–¥ –º–∞–≥–Ω–∏—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n\n–ù–∞–∂–º–∏—Ç–µ '–°–æ–∑–¥–∞—Ç—å –ª–∏–¥ –º–∞–≥–Ω–∏—Ç' –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ."
            keyboard = [
                [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –ª–∏–¥ –º–∞–≥–Ω–∏—Ç", callback_data="admin_lead_magnet_create")],
                [InlineKeyboardButton("üîô –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ª–∏–¥ –º–∞–≥–Ω–∏—Ç–∞–º–∏", callback_data="admin_content_leadmagnets")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await _safe_edit_message(update, context, message_text, reply_markup)
            return
        
        message_text = "üìã <b>–í—Å–µ –ª–∏–¥ –º–∞–≥–Ω–∏—Ç—ã</b>\n\n"
        
        for i, magnet in enumerate(all_magnets, 1):
            status = "üü¢" if magnet.is_active else "üî¥"
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º —Ç–∏–ø –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if hasattr(magnet.type, 'value'):
                type_value = magnet.type.value
            else:
                type_value = str(magnet.type)
            
            type_icon = {
                "pdf": "üìÑ",
                "google_sheet": "üìä", 
                "link": "üîó",
                "text": "üìù"
            }.get(type_value, "üìÅ")
            
            message_text += f"{i}. {status} {type_icon} <b>{magnet.name}</b>\n"
            message_text += f"   üìù {magnet.description[:60]}...\n"
            message_text += f"   üìä –¢–∏–ø: {type_value}\n"
            message_text += f"   üéØ –ü–æ—Ä—è–¥–æ–∫: {magnet.sort_order}\n\n"
        
        keyboard = [
            [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π", callback_data="admin_lead_magnet_create")],
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_lead_magnet_list")],
            [InlineKeyboardButton("üîô –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ª–∏–¥ –º–∞–≥–Ω–∏—Ç–∞–º–∏", callback_data="admin_content_leadmagnets")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await _safe_edit_message(update, context, message_text, reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –ª–∏–¥ –º–∞–≥–Ω–∏—Ç–æ–≤: {e}")
        await _safe_edit_message(update, context, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –ª–∏–¥ –º–∞–≥–Ω–∏—Ç–æ–≤")


async def _handle_lead_magnet_detailed_stats(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                           lead_magnet_service: "LeadMagnetService", is_callback: bool = False) -> None:
    """–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–∏–¥ –º–∞–≥–Ω–∏—Ç–æ–≤."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await lead_magnet_service.get_lead_magnet_stats()
        
        message_text = "üìä <b>–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–∏–¥ –º–∞–≥–Ω–∏—Ç–æ–≤</b>\n\n"
        
        message_text += f"üìà <b>–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>\n"
        message_text += f"‚Ä¢ –í—Å–µ–≥–æ –≤—ã–¥–∞–Ω–æ: {stats.get('total_issued', 0)}\n"
        message_text += f"‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('unique_users', 0)}\n"
        message_text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ª–∏–¥ –º–∞–≥–Ω–∏—Ç–æ–≤: {stats.get('active_lead_magnets', 0)}\n\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º
        type_stats = stats.get('type_stats', {})
        if type_stats:
            message_text += f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ª–∏–¥ –º–∞–≥–Ω–∏—Ç–∞–º:</b>\n"
            for magnet_name, issued_count in type_stats.items():
                message_text += f"‚Ä¢ {magnet_name}: {issued_count} –≤—ã–¥–∞—á\n"
            message_text += "\n"
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ª–∏–¥ –º–∞–≥–Ω–∏—Ç—ã –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        active_magnets = await lead_magnet_service.get_active_lead_magnets()
        if active_magnets:
            message_text += f"üéÅ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ª–∏–¥ –º–∞–≥–Ω–∏—Ç—ã:</b>\n"
            for magnet in active_magnets:
                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º —Ç–∏–ø –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                if hasattr(magnet.type, 'value'):
                    type_display = magnet.type.value
                else:
                    type_display = str(magnet.type)
                message_text += f"‚Ä¢ {magnet.name} ({type_display})\n"
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_lead_magnet_stats")],
            [InlineKeyboardButton("üìã –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data="admin_lead_magnet_export")],
            [InlineKeyboardButton("üîô –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ª–∏–¥ –º–∞–≥–Ω–∏—Ç–∞–º–∏", callback_data="admin_content_leadmagnets")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await _safe_edit_message(update, context, message_text, reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ª–∏–¥ –º–∞–≥–Ω–∏—Ç–æ–≤: {e}")
        await _safe_edit_message(update, context, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


async def _handle_lead_magnet_settings(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                     lead_magnet_service: "LeadMagnetService", is_callback: bool = False) -> None:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–∏–¥ –º–∞–≥–Ω–∏—Ç–æ–≤."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ª–∏–¥ –º–∞–≥–Ω–∏—Ç—ã
        all_magnets = await lead_magnet_service.get_all_lead_magnets()
        active_count = sum(1 for m in all_magnets if m.is_active)
        inactive_count = len(all_magnets) - active_count
        
        message_text = "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–∏–¥ –º–∞–≥–Ω–∏—Ç–æ–≤</b>\n\n"
        message_text += f"üìä <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã:</b>\n"
        message_text += f"‚Ä¢ –í—Å–µ–≥–æ –ª–∏–¥ –º–∞–≥–Ω–∏—Ç–æ–≤: {len(all_magnets)}\n"
        message_text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_count}\n"
        message_text += f"‚Ä¢ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {inactive_count}\n\n"
        
        message_text += "üîß <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>\n"
        message_text += "‚Ä¢ –ú–∞—Å—Å–æ–≤–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ\n"
        message_text += "‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏\n"
        message_text += "‚Ä¢ –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n"
        message_text += "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞–º–∏\n"
        
        keyboard = [
            [InlineKeyboardButton("üü¢ –í–∫–ª—é—á–∏—Ç—å –≤—Å–µ", callback_data="admin_lead_magnet_enable_all")],
            [InlineKeyboardButton("üî¥ –í—ã–∫–ª—é—á–∏—Ç—å –≤—Å–µ", callback_data="admin_lead_magnet_disable_all")],
            [InlineKeyboardButton("üìä –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", callback_data="admin_lead_magnet_reset_stats")],
            [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –±–∞–∑–æ–≤—ã–µ", callback_data="admin_lead_magnet_recreate")],
            [InlineKeyboardButton("üîô –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ª–∏–¥ –º–∞–≥–Ω–∏—Ç–∞–º–∏", callback_data="admin_content_leadmagnets")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await _safe_edit_message(update, context, message_text, reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ª–∏–¥ –º–∞–≥–Ω–∏—Ç–æ–≤: {e}")
        await _safe_edit_message(update, context, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")


async def _handle_logs_view(update: Update, context: ContextTypes.DEFAULT_TYPE, is_callback: bool = False) -> None:
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤."""
    try:
        import os
        log_file = "logs/bot.log"
        if os.path.exists(log_file):
            with open(log_file, 'r', encoding='utf-8') as f:
                lines = f.readlines()
                last_lines = ''.join(lines[-10:])  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Ç—Ä–æ–∫
                
            logs_text = f"üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏:</b>\n\n<code>{last_lines}</code>"
        else:
            logs_text = "üìã <b>–õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>"
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await _safe_edit_message(update, context, logs_text, reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤: {e}")
        await _safe_edit_message(update, context, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ–≤")


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–Ω–æ–≥–æ—à–∞–≥–æ–≤–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏–¥ –º–∞–≥–Ω–∏—Ç–æ–≤

async def _handle_lead_magnet_create_type_selection(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                                  action: str, lead_magnet_service: "LeadMagnetService", 
                                                  is_callback: bool = False) -> None:
    """–í—ã–±–æ—Ä —Ç–∏–ø–∞ –ª–∏–¥ –º–∞–≥–Ω–∏—Ç–∞."""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø –∏–∑ callback data
        magnet_type = action.replace("admin_lead_magnet_create_type_", "")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–∏—è
        context.user_data['creating_lead_magnet'] = {
            'type': magnet_type,
            'step': 'name'
        }
        
        type_names = {
            'pdf': 'üìÑ PDF –¥–æ–∫—É–º–µ–Ω—Ç',
            'google_sheet': 'üìä Google Sheet',
            'link': 'üîó –°—Å—ã–ª–∫–∞',
            'text': 'üìù –¢–µ–∫—Å—Ç'
        }
        
        message_text = (
            f"‚úÖ <b>–í—ã–±—Ä–∞–Ω —Ç–∏–ø: {type_names.get(magnet_type, magnet_type)}</b>\n\n"
            "üìù <b>–®–∞–≥ 1: –ù–∞–∑–≤–∞–Ω–∏–µ –ª–∏–¥ –º–∞–≥–Ω–∏—Ç–∞</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–∏–¥ –º–∞–≥–Ω–∏—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '7-–¥–Ω–µ–≤–Ω—ã–π —Ç—Ä–µ–∫–µ—Ä –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã')\n\n"
            "üí° <b>–°–æ–≤–µ—Ç—ã:</b>\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–µ—Ç–∫–∏–µ, –ø–æ–Ω—è—Ç–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è\n"
            "‚Ä¢ –£–∫–∞–∑—ã–≤–∞–π—Ç–µ —Ü–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            "‚Ä¢ –î–µ—Ä–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 50 —Å–∏–º–≤–æ–ª–æ–≤"
        )
        
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞", callback_data="admin_lead_magnet_create")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="admin_content_leadmagnets")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await _safe_edit_message(update, context, message_text, reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ª–∏–¥ –º–∞–≥–Ω–∏—Ç–∞: {e}")
        await _safe_edit_message(update, context, "‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ª–∏–¥ –º–∞–≥–Ω–∏—Ç–∞")


async def _handle_lead_magnet_create_name_step(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                             lead_magnet_service: "LeadMagnetService", 
                                             is_callback: bool = False) -> None:
    """–®–∞–≥ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ª–∏–¥ –º–∞–≥–Ω–∏—Ç–∞."""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–∏—è
        if 'creating_lead_magnet' not in context.user_data:
            await _safe_edit_message(update, context, "‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        message_text = (
            "üìù <b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–∏–¥ –º–∞–≥–Ω–∏—Ç–∞</b>\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ª–∏–¥ –º–∞–≥–Ω–∏—Ç–∞.\n\n"
            "üí° <b>–ü—Ä–∏–º–µ—Ä—ã —Ö–æ—Ä–æ—à–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π:</b>\n"
            "‚Ä¢ 7-–¥–Ω–µ–≤–Ω—ã–π —Ç—Ä–µ–∫–µ—Ä –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã\n"
            "‚Ä¢ –£—Ç—Ä–µ–Ω–Ω—è—è —Ä—É—Ç–∏–Ω–∞ —á–µ–º–ø–∏–æ–Ω–∞\n"
            "‚Ä¢ –ö–∞–∫ —Å—Ç–∞–≤–∏—Ç—å –∏ –¥–æ—Å—Ç–∏–≥–∞—Ç—å —Ü–µ–ª–∏\n"
            "‚Ä¢ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π\n"
            "‚Ä¢ 50 –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏—Ö —Ü–∏—Ç–∞—Ç"
        )
        
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞", callback_data="admin_lead_magnet_create")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="admin_content_leadmagnets")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await _safe_edit_message(update, context, message_text, reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —à–∞–≥–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è: {e}")
        await _safe_edit_message(update, context, "‚ùå –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è")


async def _handle_lead_magnet_create_description_step(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                                    lead_magnet_service: "LeadMagnetService", 
                                                    is_callback: bool = False) -> None:
    """–®–∞–≥ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ª–∏–¥ –º–∞–≥–Ω–∏—Ç–∞."""
    try:
        message_text = (
            "üìù <b>–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ª–∏–¥ –º–∞–≥–Ω–∏—Ç–∞</b>\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º.\n\n"
            "üí° <b>–ß—Ç–æ –≤–∫–ª—é—á–∏—Ç—å –≤ –æ–ø–∏—Å–∞–Ω–∏–µ:</b>\n"
            "‚Ä¢ –ß—Ç–æ –ø–æ–ª—É—á–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å\n"
            "‚Ä¢ –ö–∞–∫ —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –≤ —Ä–∞–∑–≤–∏—Ç–∏–∏\n"
            "‚Ä¢ –§–æ—Ä–º–∞—Ç –∏ –æ–±—ä–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞\n"
            "‚Ä¢ –í—Ä–µ–º—è –Ω–∞ –∏–∑—É—á–µ–Ω–∏–µ\n\n"
            "üí° <b>–ü—Ä–∏–º–µ—Ä –æ–ø–∏—Å–∞–Ω–∏—è:</b>\n"
            "–ß–µ–∫-–ª–∏—Å—Ç –∏–∑ 21 –ø—É–Ω–∫—Ç–∞ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —É—Ç—Ä–µ–Ω–Ω–µ–π —Ä—É—Ç–∏–Ω—ã. "
            "–ü–æ–º–æ–∂–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞—Ç—å —É—Ç—Ä–æ –∏ –ø–æ–≤—ã—Å–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–Ω—è."
        )
        
        keyboard = [
            [InlineKeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="admin_lead_magnet_create_file_url")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞–∑–≤–∞–Ω–∏—é", callback_data="admin_lead_magnet_create_name")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="admin_content_leadmagnets")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await _safe_edit_message(update, context, message_text, reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —à–∞–≥–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è: {e}")
        await _safe_edit_message(update, context, "‚ùå –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è")


async def _handle_lead_magnet_create_file_url_step(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                                 lead_magnet_service: "LeadMagnetService", 
                                                 is_callback: bool = False) -> None:
    """–®–∞–≥ –≤–≤–æ–¥–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–∞–π–ª."""
    try:
        magnet_type = context.user_data.get('creating_lead_magnet', {}).get('type', 'text')
        
        if magnet_type == 'text':
            # –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ª–∏–¥ –º–∞–≥–Ω–∏—Ç–æ–≤ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç —à–∞–≥
            await _handle_lead_magnet_create_message_step(update, context, lead_magnet_service, is_callback=True)
            return
        
        type_info = {
            'pdf': 'PDF –¥–æ–∫—É–º–µ–Ω—Ç (Google Drive, Dropbox, –ø—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞)',
            'google_sheet': 'Google Sheet (—Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç–∞–±–ª–∏—Ü—É)',
            'link': '–í–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–ª–∏ —Ä–µ—Å—É—Ä—Å'
        }
        
        message_text = (
            f"üîó <b>–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ {type_info.get(magnet_type, '—Ñ–∞–π–ª')}</b>\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Å—ã–ª–∫–æ–π.\n\n"
            "üí° <b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å—Å—ã–ª–∫–∞–º:</b>\n"
            "‚Ä¢ –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—É–±–ª–∏—á–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ–π\n"
            "‚Ä¢ –î–ª—è Google Drive: –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –¥–æ—Å—Ç—É–ø '–ö—Ç–æ —É–≥–æ–¥–Ω–æ —Å —Å—Å—ã–ª–∫–æ–π'\n"
            "‚Ä¢ –î–ª—è PDF: —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏\n\n"
            "üí° <b>–ü—Ä–∏–º–µ—Ä—ã —Å—Å—ã–ª–æ–∫:</b>\n"
            "‚Ä¢ https://drive.google.com/file/d/...\n"
            "‚Ä¢ https://docs.google.com/spreadsheets/d/...\n"
            "‚Ä¢ https://example.com/guide.pdf"
        )
        
        keyboard = [
            [InlineKeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data="admin_lead_magnet_create_message")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –æ–ø–∏—Å–∞–Ω–∏—é", callback_data="admin_lead_magnet_create_description")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="admin_content_leadmagnets")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await _safe_edit_message(update, context, message_text, reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —à–∞–≥–∞ –≤–≤–æ–¥–∞ —Å—Å—ã–ª–∫–∏: {e}")
        await _safe_edit_message(update, context, "‚ùå –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ —Å—Å—ã–ª–∫–∏")


async def _handle_lead_magnet_create_message_step(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                                lead_magnet_service: "LeadMagnetService", 
                                                is_callback: bool = False) -> None:
    """–®–∞–≥ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –≤—ã–¥–∞—á–µ."""
    try:
        message_text = (
            "üí¨ <b>–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –≤—ã–¥–∞—á–µ</b>\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–∏ –≤—ã–¥–∞—á–µ –ª–∏–¥ –º–∞–≥–Ω–∏—Ç–∞.\n\n"
            "üí° <b>–ß—Ç–æ –≤–∫–ª—é—á–∏—Ç—å –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>\n"
            "‚Ä¢ –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å\n"
            "‚Ä¢ –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏\n"
            "‚Ä¢ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é\n"
            "‚Ä¢ –ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é\n\n"
            "üí° <b>–ü—Ä–∏–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è:</b>\n"
            "üéÅ –°–ø–∞—Å–∏–±–æ! –í–æ—Ç –≤–∞—à —Ç—Ä–µ–∫–µ—Ä –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã.\n\n"
            "üìã –†–∞—Å–ø–µ—á–∞—Ç–∞–π—Ç–µ –∏ –∑–∞–ø–æ–ª–Ω—è–π—Ç–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å. "
            "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏.\n\n"
            "üí™ –£–¥–∞—á–∏ –≤ —Ä–∞–∑–≤–∏—Ç–∏–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã!"
        )
        
        keyboard = [
            [InlineKeyboardButton("‚è≠Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω", callback_data="admin_lead_magnet_create_confirm")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å—Å—ã–ª–∫–µ", callback_data="admin_lead_magnet_create_file_url")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="admin_content_leadmagnets")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await _safe_edit_message(update, context, message_text, reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —à–∞–≥–∞ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await _safe_edit_message(update, context, "‚ùå –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è")


async def _handle_lead_magnet_create_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                           lead_magnet_service: "LeadMagnetService", 
                                           is_callback: bool = False) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏–¥ –º–∞–≥–Ω–∏—Ç–∞."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–∏—è
        creating_data = context.user_data.get('creating_lead_magnet', {})
        
        if not creating_data:
            await _safe_edit_message(update, context, "‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
        type_names = {
            'pdf': 'üìÑ PDF',
            'google_sheet': 'üìä Google Sheet',
            'link': 'üîó –°—Å—ã–ª–∫–∞',
            'text': 'üìù –¢–µ–∫—Å—Ç'
        }
        
        message_text = (
            "‚úÖ <b>–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –ª–∏–¥ –º–∞–≥–Ω–∏—Ç–∞</b>\n\n"
            f"üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {creating_data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"üìÑ <b>–¢–∏–ø:</b> {type_names.get(creating_data.get('type'), creating_data.get('type'))}\n"
            f"üìã <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {creating_data.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')[:100]}...\n"
            f"üîó <b>–°—Å—ã–ª–∫–∞:</b> {'–£–∫–∞–∑–∞–Ω–∞' if creating_data.get('file_url') else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
            f"üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> {creating_data.get('message_text', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')[:100]}...\n\n"
            "üéØ <b>–°–æ–∑–¥–∞—Ç—å –ª–∏–¥ –º–∞–≥–Ω–∏—Ç?</b>"
        )
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –°–æ–∑–¥–∞—Ç—å –ª–∏–¥ –º–∞–≥–Ω–∏—Ç", callback_data="admin_lead_magnet_create_final")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é", callback_data="admin_lead_magnet_create_message")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="admin_content_leadmagnets")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await _safe_edit_message(update, context, message_text, reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è: {e}")
        await _safe_edit_message(update, context, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è")


async def _handle_lead_magnet_create_final(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                         lead_magnet_service: "LeadMagnetService", 
                                         is_callback: bool = False) -> None:
    """–§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ª–∏–¥ –º–∞–≥–Ω–∏—Ç–∞."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–∏—è
        creating_data = context.user_data.get('creating_lead_magnet', {})
        
        if not creating_data:
            await _safe_edit_message(update, context, "‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        if not creating_data.get('name'):
            await _safe_edit_message(update, context, "‚ùå –û—à–∏–±–∫–∞: –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è")
            return
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ö–µ–º—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏–¥ –º–∞–≥–Ω–∏—Ç–∞
        from app.schemas.lead_magnet import LeadMagnetCreate
        
        lead_magnet_data = LeadMagnetCreate(
            name=creating_data['name'],
            description=creating_data.get('description'),
            type=creating_data['type'],
            file_url=creating_data.get('file_url'),
            message_text=creating_data.get('message_text') or f"üéÅ –í–æ—Ç –≤–∞—à {creating_data['name']}!",
            is_active=True,
            sort_order=0
        )
        
        # –°–æ–∑–¥–∞–µ–º –ª–∏–¥ –º–∞–≥–Ω–∏—Ç
        new_lead_magnet = await lead_magnet_service.create_lead_magnet(lead_magnet_data)
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–∏—è
        context.user_data.pop('creating_lead_magnet', None)
        
        # –ü–æ–ª—É—á–∞–µ–º —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞
        type_names = {
            'pdf': 'üìÑ PDF',
            'google_sheet': 'üìä Google Sheet',
            'link': 'üîó –°—Å—ã–ª–∫–∞',
            'text': 'üìù –¢–µ–∫—Å—Ç'
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ type enum –æ–±—ä–µ–∫—Ç–æ–º –∏–ª–∏ —Å—Ç—Ä–æ–∫–æ–π
        if hasattr(new_lead_magnet.type, 'value'):
            type_display = type_names.get(new_lead_magnet.type.value, new_lead_magnet.type.value)
        else:
            type_display = type_names.get(str(new_lead_magnet.type), str(new_lead_magnet.type))
        
        message_text = (
            "‚úÖ <b>–õ–∏–¥ –º–∞–≥–Ω–∏—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</b>\n\n"
            f"üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {new_lead_magnet.name}\n"
            f"üìÑ <b>–¢–∏–ø:</b> {type_display}\n"
            f"üÜî <b>ID:</b> {new_lead_magnet.id}\n\n"
            "üéØ <b>–ß—Ç–æ –¥–∞–ª—å—à–µ:</b>\n"
            "‚Ä¢ –õ–∏–¥ –º–∞–≥–Ω–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–∫—Ç–∏–≤–µ–Ω\n"
            "‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π /gift\n"
            "‚Ä¢ –í—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –∏–º –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"
        )
        
        keyboard = [
            [InlineKeyboardButton("üìã –ö —Å–ø–∏—Å–∫—É –ª–∏–¥ –º–∞–≥–Ω–∏—Ç–æ–≤", callback_data="admin_lead_magnet_list")],
            [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω", callback_data="admin_lead_magnet_create")],
            [InlineKeyboardButton("üîô –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ª–∏–¥ –º–∞–≥–Ω–∏—Ç–∞–º–∏", callback_data="admin_content_leadmagnets")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await _safe_edit_message(update, context, message_text, reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏–¥ –º–∞–≥–Ω–∏—Ç–∞: {e}")
        await _safe_edit_message(update, context, f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏–¥ –º–∞–≥–Ω–∏—Ç–∞: {str(e)}")


async def _handle_messages_management(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                    is_callback: bool = False) -> None:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ —à–∞–±–ª–æ–Ω–∞–º–∏ —Å–æ–æ–±—â–µ–Ω–∏–π."""
    try:
        message_text = (
            "üìù <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ —à–∞–±–ª–æ–Ω–∞–º–∏</b>\n\n"
            "üéØ <b>–ß—Ç–æ –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:</b>\n"
            "‚Ä¢ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
            "‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö\n"
            "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
            "‚Ä¢ –®–∞–±–ª–æ–Ω—ã –¥–ª—è –ª–∏–¥ –º–∞–≥–Ω–∏—Ç–æ–≤\n"
            "‚Ä¢ –¢–µ–∫—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≥—Ä–µ–≤–∞\n"
            "‚Ä¢ –°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n\n"
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            "‚Ä¢ –í—Å–µ–≥–æ —à–∞–±–ª–æ–Ω–æ–≤: 0\n"
            "‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤: 0\n"
            "‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –°–µ–≥–æ–¥–Ω—è\n\n"
            "üîß <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>"
        )
        
        keyboard = [
            [InlineKeyboardButton("üìã –í—Å–µ —à–∞–±–ª–æ–Ω—ã", callback_data="admin_messages_list")],
            [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω", callback_data="admin_messages_create")],
            [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ —à–∞–±–ª–æ–Ω–∞", callback_data="admin_messages_search")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_messages_stats")],
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_messages_settings")],
            [InlineKeyboardButton("üîô –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º", callback_data="admin_content_manage")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if is_callback:
            await _safe_edit_message(update, context, message_text, reply_markup)
        else:
            await update.message.reply_text(message_text, reply_markup=reply_markup, parse_mode='HTML')
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ —à–∞–±–ª–æ–Ω–∞–º–∏: {e}")
        error_message = "‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ —à–∞–±–ª–æ–Ω–∞–º–∏"
        if is_callback:
            await _safe_edit_message(update, context, error_message)
        else:
            await update.message.reply_text(error_message)


async def _handle_messages_action(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                action: str, is_callback: bool = False) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ —à–∞–±–ª–æ–Ω–∞–º–∏."""
    try:
        query = update.callback_query
        
        if action == "admin_messages_list":
            await _handle_messages_list(update, context, is_callback=True)
        elif action == "admin_messages_create":
            await _handle_messages_create_form(update, context, is_callback=True)
        elif action == "admin_messages_search":
            await _handle_messages_search_form(update, context, is_callback=True)
        elif action == "admin_messages_stats":
            await _handle_messages_stats(update, context, is_callback=True)
        elif action == "admin_messages_settings":
            await _handle_messages_settings(update, context, is_callback=True)
        elif action.startswith("admin_messages_category_"):
            await _handle_messages_category_selection(update, context, action, is_callback=True)
        elif action == "admin_messages_create_final":
            await _handle_messages_create_final(update, context, is_callback=True)
        elif action == "admin_messages_create_confirm":
            await _handle_messages_create_confirm(update, context, is_callback=True)
        elif action == "admin_messages_html_examples":
            await _handle_messages_html_examples(update, context, is_callback=True)
        else:
            await _safe_edit_message(update, context, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è —Å —à–∞–±–ª–æ–Ω–∞–º–∏: {e}")
        await _safe_edit_message(update, context, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è")


async def _handle_messages_list(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                               is_callback: bool = False) -> None:
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤."""
    try:
        message_text = (
            "üìã <b>–í—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã</b>\n\n"
            "üì≠ –®–∞–±–ª–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n\n"
            "üí° <b>–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π —à–∞–±–ª–æ–Ω:</b>\n"
            "‚Ä¢ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
            "‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ\n"
            "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        )
        
        keyboard = [
            [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω", callback_data="admin_messages_create")],
            [InlineKeyboardButton("üîô –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —à–∞–±–ª–æ–Ω–∞–º–∏", callback_data="admin_content_messages")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await _safe_edit_message(update, context, message_text, reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤: {e}")
        await _safe_edit_message(update, context, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤")


async def _handle_messages_create_form(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                     is_callback: bool = False) -> None:
    """–§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞."""
    try:
        message_text = (
            "‚ûï <b>–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞</b>\n\n"
            "üìù <b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞:</b>\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ', '–û—à–∏–±–∫–∞ 404', '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ'"
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞
        context.user_data['creating_message_template'] = {
            'step': 'name',
            'name': '',
            'category': '',
            'content': ''
        }
        
        keyboard = [
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="admin_content_messages")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await _safe_edit_message(update, context, message_text, reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–æ—Ä–º—ã —à–∞–±–ª–æ–Ω–∞: {e}")
        await _safe_edit_message(update, context, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–æ—Ä–º—ã")


async def _handle_messages_search_form(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                     is_callback: bool = False) -> None:
    """–§–æ—Ä–º–∞ –ø–æ–∏—Å–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞."""
    try:
        message_text = (
            "üîç <b>–ü–æ–∏—Å–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞</b>\n\n"
            "üìù <b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ —á–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:</b>\n"
            "–ü–æ–∏—Å–∫ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É —à–∞–±–ª–æ–Ω–∞"
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞
        context.user_data['searching_message_template'] = {
            'step': 'search'
        }
        
        keyboard = [
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫", callback_data="admin_content_messages")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await _safe_edit_message(update, context, message_text, reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–æ—Ä–º—ã –ø–æ–∏—Å–∫–∞: {e}")
        await _safe_edit_message(update, context, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–æ—Ä–º—ã –ø–æ–∏—Å–∫–∞")


async def _handle_messages_stats(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                is_callback: bool = False) -> None:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤."""
    try:
        message_text = (
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤</b>\n\n"
            "üìà <b>–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>\n"
            "‚Ä¢ –í—Å–µ–≥–æ —à–∞–±–ª–æ–Ω–æ–≤: 0\n"
            "‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤: 0\n"
            "‚Ä¢ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤: 0\n\n"
            "üìä <b>–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:</b>\n"
            "‚Ä¢ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: 0\n"
            "‚Ä¢ –û—à–∏–±–∫–∏: 0\n"
            "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: 0\n"
            "‚Ä¢ –°–∏—Å—Ç–µ–º–Ω—ã–µ: 0\n\n"
            "üìÖ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:</b>\n"
            "‚Ä¢ –°–æ–∑–¥–∞–Ω–æ: 0\n"
            "‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–æ: 0\n"
            "‚Ä¢ –£–¥–∞–ª–µ–Ω–æ: 0"
        )
        
        keyboard = [
            [InlineKeyboardButton("üìã –ö —Å–ø–∏—Å–∫—É —à–∞–±–ª–æ–Ω–æ–≤", callback_data="admin_messages_list")],
            [InlineKeyboardButton("üîô –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —à–∞–±–ª–æ–Ω–∞–º–∏", callback_data="admin_content_messages")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await _safe_edit_message(update, context, message_text, reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await _safe_edit_message(update, context, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


async def _handle_messages_settings(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                  is_callback: bool = False) -> None:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤."""
    try:
        message_text = (
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤</b>\n\n"
            "üîß <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
            "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π\n"
            "‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç/–∏–º–ø–æ—Ä—Ç —à–∞–±–ª–æ–Ω–æ–≤\n"
            "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö\n"
            "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞\n\n"
            "üìù <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>"
        )
        
        keyboard = [
            [InlineKeyboardButton("üíæ –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é", callback_data="admin_messages_backup")],
            [InlineKeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç —à–∞–±–ª–æ–Ω–æ–≤", callback_data="admin_messages_export")],
            [InlineKeyboardButton("üì• –ò–º–ø–æ—Ä—Ç —à–∞–±–ª–æ–Ω–æ–≤", callback_data="admin_messages_import")],
            [InlineKeyboardButton("üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data="admin_messages_notifications")],
            [InlineKeyboardButton("üîê –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞", callback_data="admin_messages_permissions")],
            [InlineKeyboardButton("üîô –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —à–∞–±–ª–æ–Ω–∞–º–∏", callback_data="admin_content_messages")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await _safe_edit_message(update, context, message_text, reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        await _safe_edit_message(update, context, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")


async def _handle_messages_category_selection(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                            action: str, is_callback: bool = False) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞."""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ action
        category = action.replace("admin_messages_category_", "")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á–∏—Ç–∞–µ–º—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        category_names = {
            'welcome': '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ',
            'error': '–û—à–∏–±–∫–∞',
            'notification': '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
            'system': '–°–∏—Å—Ç–µ–º–Ω–æ–µ'
        }
        
        category_name = category_names.get(category, category)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        if 'creating_message_template' in context.user_data:
            context.user_data['creating_message_template']['category'] = category
            context.user_data['creating_message_template']['step'] = 'content'
        
        message_text = (
            f"‚úÖ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤—ã–±—Ä–∞–Ω–∞:</b> {category_name}\n\n"
            "üìù <b>–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —à–∞–±–ª–æ–Ω–∞</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞. –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML-—Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."
        )
        
        keyboard = [
            [InlineKeyboardButton("üí° –ü—Ä–∏–º–µ—Ä—ã HTML", callback_data="admin_messages_html_examples")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="admin_messages_create")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="admin_content_messages")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await _safe_edit_message(update, context, message_text, reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
        await _safe_edit_message(update, context, "‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")


async def _handle_messages_html_examples(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                       is_callback: bool = False) -> None:
    """–ü–æ–∫–∞–∑ –ø—Ä–∏–º–µ—Ä–æ–≤ HTML-—Ä–∞–∑–º–µ—Ç–∫–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤."""
    try:
        message_text = (
            "üí° <b>–ü—Ä–∏–º–µ—Ä—ã HTML-—Ä–∞–∑–º–µ—Ç–∫–∏</b>\n\n"
            "üìù <b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–≥–∏:</b>\n"
            "‚Ä¢ <b>–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç</b> - <code>&lt;b&gt;—Ç–µ–∫—Å—Ç&lt;/b&gt;</code>\n"
            "‚Ä¢ <i>–ö—É—Ä—Å–∏–≤</i> - <code>&lt;i&gt;—Ç–µ–∫—Å—Ç&lt;/i&gt;</code>\n"
            "‚Ä¢ <code>–ú–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π</code> - <code>&lt;code&gt;—Ç–µ–∫—Å—Ç&lt;/code&gt;</code>\n"
            "‚Ä¢ <pre>–ë–ª–æ–∫ –∫–æ–¥–∞</pre> - <code>&lt;pre&gt;—Ç–µ–∫—Å—Ç&lt;/pre&gt;</code>\n"
            "‚Ä¢ <a href='https://example.com'>–°—Å—ã–ª–∫–∞</a> - <code>&lt;a href='URL'&gt;—Ç–µ–∫—Å—Ç&lt;/a&gt;</code>\n\n"
            "üé® <b>–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:</b>\n"
            "‚Ä¢ <b>–í–∞–∂–Ω–æ!</b> –≠—Ç–æ –≤–∞–∂–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
            "‚Ä¢ <i>–ü–æ–¥—Å–∫–∞–∑–∫–∞:</i> –≠—Ç–æ –ø–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            "‚Ä¢ <code>–ö–æ–º–∞–Ω–¥–∞:</code> /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã\n\n"
            "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –ù–µ –≤—Å–µ HTML-—Ç–µ–≥–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è Telegram"
        )
        
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–æ–∑–¥–∞–Ω–∏—é", callback_data="admin_messages_create")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="admin_content_messages")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await _safe_edit_message(update, context, message_text, reply_markup, parse_mode='HTML')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ HTML-–ø—Ä–∏–º–µ—Ä–æ–≤: {e}")
        await _safe_edit_message(update, context, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ HTML-–ø—Ä–∏–º–µ—Ä–æ–≤")


async def _handle_messages_create_final(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                      is_callback: bool = False) -> None:
    """–§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–∏—è
        creating_data = context.user_data.get('creating_message_template', {})
        
        if not creating_data:
            await _safe_edit_message(update, context, "‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        if not creating_data.get('name') or not creating_data.get('content'):
            await _safe_edit_message(update, context, "‚ùå –û—à–∏–±–∫–∞: –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
        message_text = (
            "üìã <b>–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —à–∞–±–ª–æ–Ω–∞</b>\n\n"
            f"üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {creating_data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"üè∑Ô∏è <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {creating_data.get('category', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
            f"üìÑ <b>–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:</b>\n{creating_data.get('content', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
            "üéØ <b>–°–æ–∑–¥–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π —à–∞–±–ª–æ–Ω?</b>"
        )
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –°–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω", callback_data="admin_messages_create_confirm")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é", callback_data="admin_messages_create")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="admin_content_messages")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await _safe_edit_message(update, context, message_text, reply_markup, parse_mode='HTML')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è: {e}")
        await _safe_edit_message(update, context, "‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è")


async def _handle_messages_create_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                        is_callback: bool = False) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–∏—è
        creating_data = context.user_data.get('creating_message_template', {})
        
        if not creating_data:
            await _safe_edit_message(update, context, "‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        
        message_text = (
            "‚úÖ <b>–¢–µ–∫—Å—Ç–æ–≤—ã–π —à–∞–±–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</b>\n\n"
            f"üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {creating_data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"üè∑Ô∏è <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {creating_data.get('category', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
            f"üìÑ <b>–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:</b> {creating_data.get('content', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')[:100]}...\n\n"
            "üéØ <b>–ß—Ç–æ –¥–∞–ª—å—à–µ:</b>\n"
            "‚Ä¢ –®–∞–±–ª–æ–Ω –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é\n"
            "‚Ä¢ –í—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –∏–º –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏\n"
            "‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ –µ—â–µ –æ–¥–∏–Ω —à–∞–±–ª–æ–Ω –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é"
        )
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–∏—è
        context.user_data.pop('creating_message_template', None)
        
        keyboard = [
            [InlineKeyboardButton("üìã –ö —Å–ø–∏—Å–∫—É —à–∞–±–ª–æ–Ω–æ–≤", callback_data="admin_messages_list")],
            [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω", callback_data="admin_messages_create")],
            [InlineKeyboardButton("üîô –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —à–∞–±–ª–æ–Ω–∞–º–∏", callback_data="admin_content_messages")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await _safe_edit_message(update, context, message_text, reply_markup, parse_mode='HTML')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞: {e}")
        await _safe_edit_message(update, context, f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞: {str(e)}")


async def _handle_warmup_edit_action(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                    warmup_service: "WarmupService", action: str, 
                                    is_callback: bool = False) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è –ø—Ä–æ–≥—Ä–µ–≤–∞."""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ ID
        parts = action.split("_")
        if len(parts) < 4:
            await _safe_edit_message(update, context, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–µ–π—Å—Ç–≤–∏—è")
            return
        
        edit_type = parts[3]  # name, desc, messages
        short_id = parts[4] if len(parts) > 4 else ""
        
        if edit_type == "name":
            await _handle_warmup_edit_name_form(update, context, warmup_service, short_id, is_callback=True)
        elif edit_type == "desc":
            await _handle_warmup_edit_desc_form(update, context, warmup_service, short_id, is_callback=True)
        elif edit_type == "messages":
            await _handle_warmup_edit_messages(update, context, warmup_service, short_id, is_callback=True)
        else:
            await _safe_edit_message(update, context, f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {edit_type}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        await _safe_edit_message(update, context, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")


async def _handle_warmup_edit_name_form(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                       warmup_service: "WarmupService", short_id: str, 
                                       is_callback: bool = False) -> None:
    """–§–æ—Ä–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è."""
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        context.user_data['editing_warmup_scenario'] = {
            'type': 'name',
            'short_id': short_id,
            'step': 'input'
        }
        
        message_text = (
            "‚úèÔ∏è <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è</b>\n\n"
            "üìù <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:</b>\n\n"
            "üí° <b>–°–æ–≤–µ—Ç—ã:</b>\n"
            "‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–Ω—è—Ç–Ω—ã–º –∏ –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω—ã–º\n"
            "‚Ä¢ –ù–∞–ø—Ä–∏–º–µ—Ä: '–ë–∞–∑–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ–≤', '–ü—Ä–æ–≥—Ä–µ–≤ –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤'\n"
            "‚Ä¢ –ü–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–µ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ"
        )
        
        keyboard = [
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ", callback_data=f"admin_warmup_scenario_{short_id}")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await _safe_edit_message(update, context, message_text, reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–æ—Ä–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è: {e}")
        await _safe_edit_message(update, context, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–æ—Ä–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")


async def _handle_warmup_edit_desc_form(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                       warmup_service: "WarmupService", short_id: str, 
                                       is_callback: bool = False) -> None:
    """–§–æ—Ä–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è."""
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        context.user_data['editing_warmup_scenario'] = {
            'type': 'description',
            'short_id': short_id,
            'step': 'input'
        }
        
        message_text = (
            "üìù <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è</b>\n\n"
            "üìù <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:</b>\n\n"
            "üí° <b>–°–æ–≤–µ—Ç—ã:</b>\n"
            "‚Ä¢ –û–ø–∏—à–∏—Ç–µ —Ü–µ–ª—å –∏ –∑–∞–¥–∞—á–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è\n"
            "‚Ä¢ –£–∫–∞–∂–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é\n"
            "‚Ä¢ –û–ø–∏—à–∏—Ç–µ –æ–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n"
            "‚Ä¢ –ü–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏–µ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ"
        )
        
        keyboard = [
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ", callback_data=f"admin_warmup_scenario_{short_id}")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await _safe_edit_message(update, context, message_text, reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–æ—Ä–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è: {e}")
        await _safe_edit_message(update, context, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–æ—Ä–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")


async def _handle_warmup_edit_messages(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                      warmup_service: "WarmupService", short_id: str, 
                                      is_callback: bool = False) -> None:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è."""
    try:
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–Ω—ã–π UUID
        scenario_id = await _restore_warmup_scenario_uuid(short_id, warmup_service)
        
        if not scenario_id:
            await _safe_edit_message(update, context, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID —Å—Ü–µ–Ω–∞—Ä–∏—è")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π
        scenario = await warmup_service.get_scenario_by_id(scenario_id)
        
        if not scenario:
            await _safe_edit_message(update, context, "‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è
        message_text = (
            f"üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è: {scenario.name}</b>\n\n"
            f"üìä <b>–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(scenario.messages)}</b>\n\n"
        )
        
        if scenario.messages:
            for i, msg in enumerate(scenario.messages, 1):
                message_text += f"{i}. <b>{msg.type.value}</b>\n"
                message_text += f"   üìù {msg.content[:50]}...\n"
                message_text += f"   ‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞: {msg.delay_hours}—á\n\n"
        else:
            message_text += "üì≠ –°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n\n"
        
        message_text += "üîß <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>"
        
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data=f"admin_warmup_add_message_{short_id}")],
            [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data=f"admin_warmup_edit_message_{short_id}")],
            [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data=f"admin_warmup_delete_message_{short_id}")],
            [InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫", callback_data=f"admin_warmup_reorder_messages_{short_id}")],
            [InlineKeyboardButton("üîô –ö —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —Å—Ü–µ–Ω–∞—Ä–∏—è", callback_data=f"admin_warmup_scenario_{short_id}")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await _safe_edit_message(update, context, message_text, reply_markup, parse_mode='HTML')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏: {e}")
        await _safe_edit_message(update, context, "‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏")


async def _handle_warmup_toggle_status(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                     warmup_service: "WarmupService", action: str, 
                                     is_callback: bool = False) -> None:
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è –ø—Ä–æ–≥—Ä–µ–≤–∞."""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Å—Ü–µ–Ω–∞—Ä–∏—è
        short_id = action.replace("admin_warmup_toggle_status_", "")
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–Ω—ã–π UUID
        scenario_id = await _restore_warmup_scenario_uuid(short_id, warmup_service)
        
        if not scenario_id:
            await _safe_edit_message(update, context, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID —Å—Ü–µ–Ω–∞—Ä–∏—è")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π
        scenario = await warmup_service.get_scenario_by_id(scenario_id)
        
        if not scenario:
            await _safe_edit_message(update, context, "‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å
        new_status = not scenario.is_active
        scenario.is_active = new_status
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        await warmup_service.session.commit()
        
        status_text = "üü¢ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω" if new_status else "üî¥ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
        message_text = (
            f"‚úÖ <b>–°—Ç–∞—Ç—É—Å —Å—Ü–µ–Ω–∞—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω!</b>\n\n"
            f"üéØ <b>–°—Ü–µ–Ω–∞—Ä–∏–π:</b> {scenario.name}\n"
            f"üìä <b>–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:</b> {status_text}\n\n"
            f"üéØ <b>–ß—Ç–æ –¥–∞–ª—å—à–µ:</b>\n"
            "‚Ä¢ –°—Ü–µ–Ω–∞—Ä–∏–π –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é" if new_status else "‚Ä¢ –°—Ü–µ–Ω–∞—Ä–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω"
        )
        
        keyboard = [
            [InlineKeyboardButton("üîô –ö —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —Å—Ü–µ–Ω–∞—Ä–∏—è", callback_data=f"admin_warmup_scenario_{short_id}")],
            [InlineKeyboardButton("üìã –ö —Å–ø–∏—Å–∫—É —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤", callback_data="admin_warmup_list_scenarios")]
            ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await _safe_edit_message(update, context, message_text, reply_markup, parse_mode='HTML')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
        await _safe_edit_message(update, context, "‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")


async def _handle_warmup_delete_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                      warmup_service: "WarmupService", action: str, 
                                      is_callback: bool = False) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è –ø—Ä–æ–≥—Ä–µ–≤–∞."""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Å—Ü–µ–Ω–∞—Ä–∏—è
        short_id = action.replace("admin_warmup_delete_confirm_", "")
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–Ω—ã–π UUID
        scenario_id = await _restore_warmup_scenario_uuid(short_id, warmup_service)
        
        if not scenario_id:
            await _safe_edit_message(update, context, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID —Å—Ü–µ–Ω–∞—Ä–∏—è")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π
        scenario = await warmup_service.get_scenario_by_id(scenario_id)
        
        if not scenario:
            await _safe_edit_message(update, context, "‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        message_text = (
            "‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n"
            f"üéØ <b>–°—Ü–µ–Ω–∞—Ä–∏–π:</b> {scenario.name}\n"
            f"üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–π:</b> {len(scenario.messages)}\n"
            f"üìÖ <b>–°–æ–∑–¥–∞–Ω:</b> {scenario.created_at.strftime('%d.%m.%Y')}\n\n"
            "üö® <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!\n"
            "–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.\n\n"
            "‚ùì <b>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π?</b>"
        )
        
        keyboard = [
            [InlineKeyboardButton("üóëÔ∏è –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"admin_warmup_delete_final_{short_id}")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"admin_warmup_scenario_{short_id}")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await _safe_edit_message(update, context, message_text, reply_markup, parse_mode='HTML')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        await _safe_edit_message(update, context, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è")


async def _handle_warmup_edit_name_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                         warmup_service: "WarmupService", action: str, 
                                         is_callback: bool = False) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è."""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Å—Ü–µ–Ω–∞—Ä–∏—è
        short_id = action.replace("admin_warmup_edit_name_confirm_", "")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        editing_data = context.user_data.get('editing_warmup_scenario', {})
        new_name = editing_data.get('new_name', '')
        
        if not new_name:
            await _safe_edit_message(update, context, "‚ùå –û—à–∏–±–∫–∞: –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–Ω—ã–π UUID
        scenario_id = await _restore_warmup_scenario_uuid(short_id, warmup_service)
        
        if not scenario_id:
            await _safe_edit_message(update, context, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID —Å—Ü–µ–Ω–∞—Ä–∏—è")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π
        scenario = await warmup_service.get_scenario_by_id(scenario_id)
        
        if not scenario:
            await _safe_edit_message(update, context, "‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        old_name = scenario.name
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
        scenario.name = new_name
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        await warmup_service.session.commit()
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        context.user_data.pop('editing_warmup_scenario', None)
        
        message_text = (
            "‚úÖ <b>–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–æ!</b>\n\n"
            f"üéØ <b>–°—Ç–∞—Ä–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:</b> {old_name}\n"
            f"üéØ <b>–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:</b> {new_name}\n\n"
            f"üéØ <b>–ß—Ç–æ –¥–∞–ª—å—à–µ:</b>\n"
            "‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ\n"
            "‚Ä¢ –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã\n"
            "‚Ä¢ –°—Ü–µ–Ω–∞—Ä–∏–π –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"
        )
        
        keyboard = [
            [InlineKeyboardButton("üîô –ö —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —Å—Ü–µ–Ω–∞—Ä–∏—è", callback_data=f"admin_warmup_scenario_{short_id}")],
            [InlineKeyboardButton("üìã –ö —Å–ø–∏—Å–∫—É —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤", callback_data="admin_warmup_list_scenarios")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await _safe_edit_message(update, context, message_text, reply_markup, parse_mode='HTML')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è: {e}")
        await _safe_edit_message(update, context, "‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è")


async def _handle_warmup_edit_desc_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                         warmup_service: "WarmupService", action: str, 
                                         is_callback: bool = False) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è."""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Å—Ü–µ–Ω–∞—Ä–∏—è
        short_id = action.replace("admin_warmup_edit_desc_confirm_", "")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        editing_data = context.user_data.get('editing_warmup_scenario', {})
        new_description = editing_data.get('new_description', '')
        
        if not new_description:
            await _safe_edit_message(update, context, "‚ùå –û—à–∏–±–∫–∞: –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–Ω—ã–π UUID
        scenario_id = await _restore_warmup_scenario_uuid(short_id, warmup_service)
        
        if not scenario_id:
            await _safe_edit_message(update, context, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID —Å—Ü–µ–Ω–∞—Ä–∏—è")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π
        scenario = await warmup_service.get_scenario_by_id(scenario_id)
        
        if not scenario:
            await _safe_edit_message(update, context, "‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        old_description = scenario.description or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        scenario.description = new_description
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        await warmup_service.session.commit()
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        context.user_data.pop('editing_warmup_scenario', None)
        
        message_text = (
            "‚úÖ <b>–û–ø–∏—Å–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–æ!</b>\n\n"
            f"üéØ <b>–°—Ü–µ–Ω–∞—Ä–∏–π:</b> {scenario.name}\n"
            f"üìù <b>–°—Ç–∞—Ä–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:</b> {old_description}\n"
            f"üìù <b>–ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:</b> {new_description}\n\n"
            f"üéØ <b>–ß—Ç–æ –¥–∞–ª—å—à–µ:</b>\n"
            "‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ\n"
            "‚Ä¢ –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã\n"
            "‚Ä¢ –°—Ü–µ–Ω–∞—Ä–∏–π –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"
        )
        
        keyboard = [
            [InlineKeyboardButton("üîô –ö —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —Å—Ü–µ–Ω–∞—Ä–∏—è", callback_data=f"admin_warmup_scenario_{short_id}")],
            [InlineKeyboardButton("üìã –ö —Å–ø–∏—Å–∫—É —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤", callback_data="admin_warmup_list_scenarios")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await _safe_edit_message(update, context, message_text, reply_markup, parse_mode='HTML')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è: {e}")
        await _safe_edit_message(update, context, "‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è")


async def _handle_warmup_scenario_edit(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                      warmup_service: "WarmupService", action: str, 
                                      is_callback: bool = False) -> None:
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è –ø—Ä–æ–≥—Ä–µ–≤–∞."""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Å—Ü–µ–Ω–∞—Ä–∏—è –∏–∑ action
        short_id = action.replace("admin_warmup_scenario_", "")
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–Ω—ã–π UUID
        scenario_id = await _restore_warmup_scenario_uuid(short_id, warmup_service)
        
        if not scenario_id:
            await _safe_edit_message(update, context, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID —Å—Ü–µ–Ω–∞—Ä–∏—è")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π
        scenario = await warmup_service.get_scenario_by_id(scenario_id)
        
        if not scenario:
            await _safe_edit_message(update, context, "‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if scenario.is_active else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
        message_text = (
            f"üìù <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è –ø—Ä–æ–≥—Ä–µ–≤–∞</b>\n\n"
            f"üéØ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {scenario.name}\n"
            f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {scenario.description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–π:</b> {len(scenario.messages)}\n"
            f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status}\n"
            f"üìÖ <b>–°–æ–∑–¥–∞–Ω:</b> {scenario.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            f"üîÑ <b>–û–±–Ω–æ–≤–ª–µ–Ω:</b> {scenario.updated_at.strftime('%d.%m.%Y %H:%M')}\n\n"
            f"üîß <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>"
        )
        
        keyboard = [
            [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"admin_warmup_edit_name_{short_id}")],
            [InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"admin_warmup_edit_desc_{short_id}")],
            [InlineKeyboardButton("üí¨ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏", callback_data=f"admin_warmup_edit_messages_{short_id}")],
            [InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"admin_warmup_toggle_status_{short_id}")],
            [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π", callback_data=f"admin_warmup_delete_confirm_{short_id}")],
            [InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤", callback_data="admin_warmup_list_scenarios")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await _safe_edit_message(update, context, message_text, reply_markup, parse_mode='HTML')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è: {e}")
        await _safe_edit_message(update, context, "‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è")


# –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ callback'–æ–≤ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
admin_callback = CallbackQueryHandler(admin_callback_handler, pattern="^admin_")
