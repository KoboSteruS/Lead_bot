"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞–º–∏.

–°–æ–¥–µ—Ä–∂–∏—Ç –ª–æ–≥–∏–∫—É –≤—ã–¥–∞—á–∏ –ø–æ–¥–∞—Ä–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
"""

from typing import Optional, List
from datetime import datetime
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, and_, String
from loguru import logger

from app.models import LeadMagnet, UserLeadMagnet, User
from app.schemas import LeadMagnetCreate


class LeadMagnetService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞–º–∏."""
    
    def __init__(self, session: AsyncSession):
        self.session = session
    
    async def get_active_lead_magnets(self) -> List[LeadMagnet]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–æ–≤."""
        try:
            result = await self.session.execute(
                select(LeadMagnet)
                .where(LeadMagnet.is_active == True)
                .order_by(LeadMagnet.sort_order)
            )
            return result.scalars().all()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–æ–≤: {e}")
            return []
    
    async def get_lead_magnet_by_id(self, lead_magnet_id: str) -> Optional[LeadMagnet]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞ –ø–æ ID."""
        try:
            # –ï—Å–ª–∏ ID –∫–æ—Ä–æ—Ç–∫–∏–π (8 —Å–∏–º–≤–æ–ª–æ–≤), –∏—â–µ–º –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
            if len(lead_magnet_id) == 8:
                result = await self.session.execute(
                    select(LeadMagnet).where(LeadMagnet.id.cast(String).like(f"{lead_magnet_id}%"))
                )
                return result.scalar_one_or_none()
            else:
                # –ü–æ–ª–Ω—ã–π UUID
                result = await self.session.execute(
                    select(LeadMagnet).where(LeadMagnet.id == lead_magnet_id)
                )
                return result.scalar_one_or_none()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞ {lead_magnet_id}: {e}")
            return None
    
    async def create_lead_magnet(self, lead_magnet_data: LeadMagnetCreate) -> Optional[LeadMagnet]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞."""
        try:
            lead_magnet = LeadMagnet(**lead_magnet_data.model_dump() if hasattr(lead_magnet_data, 'model_dump') else lead_magnet_data)
            self.session.add(lead_magnet)
            await self.session.commit()
            await self.session.refresh(lead_magnet)
            
            logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ª–∏–¥-–º–∞–≥–Ω–∏—Ç: {lead_magnet.name}")
            return lead_magnet
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞: {e}")
            await self.session.rollback()
            return None
    
    async def user_has_lead_magnet(self, user_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –ø–æ–ª—É—á–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ª–∏–¥-–º–∞–≥–Ω–∏—Ç."""
        try:
            result = await self.session.execute(
                select(UserLeadMagnet).where(UserLeadMagnet.user_id == user_id)
            )
            return result.scalar_one_or_none() is not None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return False
    
    async def give_lead_magnet_to_user(self, user_id: str) -> Optional[LeadMagnet]:
        """–í—ã–¥–∞—á–∞ –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª—É—á–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ª–∏–¥-–º–∞–≥–Ω–∏—Ç
            if await self.user_has_lead_magnet(user_id):
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –ø–æ–ª—É—á–∞–ª –ª–∏–¥-–º–∞–≥–Ω–∏—Ç")
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ª–∏–¥-–º–∞–≥–Ω–∏—Ç
            lead_magnets = await self.get_active_lead_magnets()
            if not lead_magnets:
                logger.warning("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–æ–≤")
                return None
            
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –ª–∏–¥-–º–∞–≥–Ω–∏—Ç
            lead_magnet = lead_magnets[0]
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –≤—ã–¥–∞—á–µ –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞
            user_lead_magnet = UserLeadMagnet(
                user_id=user_id,
                lead_magnet_id=str(lead_magnet.id)
            )
            self.session.add(user_lead_magnet)
            await self.session.commit()
            
            logger.info(f"–í—ã–¥–∞–Ω –ª–∏–¥-–º–∞–≥–Ω–∏—Ç {lead_magnet.name} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            return lead_magnet
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            await self.session.rollback()
            return None
    
    async def get_user_lead_magnets(self, user_id: str) -> List[UserLeadMagnet]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        try:
            result = await self.session.execute(
                select(UserLeadMagnet)
                .where(UserLeadMagnet.user_id == user_id)
                .order_by(UserLeadMagnet.issued_at.desc())
            )
            return result.scalars().all()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return []
    
    async def get_lead_magnet_stats(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞–º."""
        try:
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–¥–∞–Ω–Ω—ã—Ö –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–æ–≤
            total_result = await self.session.execute(select(UserLeadMagnet))
            total_issued = len(total_result.scalars().all())
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            unique_users_result = await self.session.execute(
                select(UserLeadMagnet.user_id).distinct()
            )
            unique_users = len(unique_users_result.scalars().all())
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–æ–≤
            lead_magnets = await self.get_active_lead_magnets()
            type_stats = {}
            for lm in lead_magnets:
                result = await self.session.execute(
                    select(UserLeadMagnet).where(UserLeadMagnet.lead_magnet_id == str(lm.id))
                )
                type_stats[lm.name] = len(result.scalars().all())
            
            return {
                "total_issued": total_issued,
                "unique_users": unique_users,
                "type_stats": type_stats,
                "active_lead_magnets": len(lead_magnets)
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–æ–≤: {e}")
            return {
                "total_issued": 0,
                "unique_users": 0,
                "type_stats": {},
                "active_lead_magnets": 0
            }
    
    async def create_default_lead_magnet(self) -> Optional[LeadMagnet]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (7-–¥–Ω–µ–≤–Ω—ã–π —Ç—Ä–µ–∫–µ—Ä)."""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ª–∏–¥-–º–∞–≥–Ω–∏—Ç —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
            result = await self.session.execute(
                select(LeadMagnet).where(LeadMagnet.name == "7-–¥–Ω–µ–≤–Ω—ã–π —Ç—Ä–µ–∫–µ—Ä –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –∏ —Å–∏–ª—ã")
            )
            if result.scalar_one_or_none():
                logger.info("–õ–∏–¥-–º–∞–≥–Ω–∏—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return None
            
            # –°–æ–∑–¥–∞–µ–º –ª–∏–¥-–º–∞–≥–Ω–∏—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            default_lead_magnet = LeadMagnet(
                name="7-–¥–Ω–µ–≤–Ω—ã–π —Ç—Ä–µ–∫–µ—Ä –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –∏ —Å–∏–ª—ã",
                description="–¢—Ä–µ–∫–µ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ –∏ —Å–∏–ª–µ –≤–æ–ª–∏",
                type="google_sheet",
                file_url="https://docs.google.com/spreadsheets/d/example",  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
                message_text=(
                    "üéØ –≠—Ç–æ—Ç —Ç—Ä–µ–∫–µ—Ä –ø–æ–º–æ–∂–µ—Ç –≤–∞–º:\n"
                    "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏\n"
                    "‚Ä¢ –ò–∑–º–µ—Ä—è—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ\n"
                    "‚Ä¢ –í–∏–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞ –Ω–µ–¥–µ–ª—é\n"
                    "‚Ä¢ –ú–æ—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–µ–±—è –Ω–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ\n\n"
                    "üìä –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞!"
                ),
                is_active=True,
                sort_order=1
            )
            
            self.session.add(default_lead_magnet)
            await self.session.commit()
            await self.session.refresh(default_lead_magnet)
            
            logger.info("–°–æ–∑–¥–∞–Ω –ª–∏–¥-–º–∞–≥–Ω–∏—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            return default_lead_magnet
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {e}")
            await self.session.rollback()
            return None
    
    async def update_lead_magnet(self, lead_magnet_id: str, update_data: dict) -> Optional[LeadMagnet]:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞."""
        try:
            lead_magnet = await self.get_lead_magnet_by_id(lead_magnet_id)
            if not lead_magnet:
                return None
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è
            for field, value in update_data.items():
                if hasattr(lead_magnet, field) and value is not None:
                    setattr(lead_magnet, field, value)
            
            await self.session.commit()
            await self.session.refresh(lead_magnet)
            
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω –ª–∏–¥-–º–∞–≥–Ω–∏—Ç: {lead_magnet.name}")
            return lead_magnet
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞ {lead_magnet_id}: {e}")
            await self.session.rollback()
            return None
    
    async def delete_lead_magnet(self, lead_magnet_id: str) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞."""
        try:
            lead_magnet = await self.get_lead_magnet_by_id(lead_magnet_id)
            if not lead_magnet:
                return False
            
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –æ –≤—ã–¥–∞—á–µ —ç—Ç–æ–≥–æ –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞
            await self.session.execute(
                select(UserLeadMagnet).where(UserLeadMagnet.lead_magnet_id == str(lead_magnet.id))
            )
            issued_records = await self.session.execute(
                select(UserLeadMagnet).where(UserLeadMagnet.lead_magnet_id == str(lead_magnet.id))
            )
            for record in issued_records.scalars().all():
                await self.session.delete(record)
            
            # –£–¥–∞–ª—è–µ–º —Å–∞–º –ª–∏–¥-–º–∞–≥–Ω–∏—Ç
            await self.session.delete(lead_magnet)
            await self.session.commit()
            
            logger.info(f"–£–¥–∞–ª–µ–Ω –ª–∏–¥-–º–∞–≥–Ω–∏—Ç: {lead_magnet.name}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞ {lead_magnet_id}: {e}")
            await self.session.rollback()
            return False
    
    async def toggle_lead_magnet_status(self, lead_magnet_id: str) -> Optional[LeadMagnet]:
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞ (–∞–∫—Ç–∏–≤–µ–Ω/–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω)."""
        try:
            lead_magnet = await self.get_lead_magnet_by_id(lead_magnet_id)
            if not lead_magnet:
                return None
            
            lead_magnet.is_active = not lead_magnet.is_active
            await self.session.commit()
            await self.session.refresh(lead_magnet)
            
            status = "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω" if lead_magnet.is_active else "–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
            logger.info(f"–õ–∏–¥-–º–∞–≥–Ω–∏—Ç {lead_magnet.name} {status}")
            return lead_magnet
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞ {lead_magnet_id}: {e}")
            await self.session.rollback()
            return None
    
    async def get_all_lead_magnets(self) -> List[LeadMagnet]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–æ–≤ (–≤–∫–ª—é—á–∞—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ)."""
        try:
            result = await self.session.execute(
                select(LeadMagnet)
                .order_by(LeadMagnet.sort_order.asc(), LeadMagnet.created_at.asc())
            )
            return result.scalars().all()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–æ–≤: {e}")
            return []
    
    async def get_lead_magnets_by_type(self, magnet_type: str) -> List[LeadMagnet]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–æ–≤ –ø–æ —Ç–∏–ø—É."""
        try:
            result = await self.session.execute(
                select(LeadMagnet)
                .where(LeadMagnet.type == magnet_type)
                .order_by(LeadMagnet.sort_order.asc())
            )
            return result.scalars().all()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–æ–≤ —Ç–∏–ø–∞ {magnet_type}: {e}")
            return []
    
    async def get_lead_magnets_issued_in_period(self, start_date: datetime, end_date: datetime, magnet_type: str = None) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–¥–∞–Ω–Ω—ã—Ö –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥."""
        try:
            from app.models.user_lead_magnet import UserLeadMagnet
            
            query = select(UserLeadMagnet).where(
                and_(
                    UserLeadMagnet.issued_at >= start_date,
                    UserLeadMagnet.issued_at <= end_date
                )
            )
            
            if magnet_type:
                # –ü–æ–¥–∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–æ–≤ –Ω—É–∂–Ω–æ–≥–æ —Ç–∏–ø–∞
                magnet_ids = select(LeadMagnet.id).where(LeadMagnet.type == magnet_type)
                query = query.where(UserLeadMagnet.lead_magnet_id.in_(magnet_ids))
            
            result = await self.session.execute(query)
            return len(result.scalars().all())
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–¥–∞–Ω–Ω—ã—Ö –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥: {e}")
            return 0
