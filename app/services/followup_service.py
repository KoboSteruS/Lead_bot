"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –¥–æ–∂–∏–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.

–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –∫—É–ø–∏–ª–∏ —Ç—Ä–∏–ø–≤–∞–π–µ—Ä, –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–º –¥–æ–∂–∏–º.
"""

from datetime import datetime, timedelta
from typing import List, Dict, Any, Optional
from sqlalchemy import select, and_, or_
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.orm import selectinload
from loguru import logger

from app.models import User, ProductOffer, UserProductOffer, Product, ProductType, UserFollowUp
from app.services.telegram_service import TelegramService
from app.services.product_service import ProductService


class FollowUpService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –¥–æ–∂–∏–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    
    def __init__(self, session: AsyncSession):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞."""
        self.session = session
    
    async def get_users_for_followup(self, hours_since_offer: int = 48) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –¥–æ–∂–∏–º–∞.
        
        Args:
            hours_since_offer: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ–∫–∞–∑–∞ –æ—Ñ—Ñ–µ—Ä–∞
            
        Returns:
            List[Dict[str, Any]]: –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –¥–æ–∂–∏–º–∞
        """
        try:
            cutoff_time = datetime.utcnow() - timedelta(hours=hours_since_offer)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º –ø–æ–∫–∞–∑—ã–≤–∞–ª–∏ –æ—Ñ—Ñ–µ—Ä, –Ω–æ –æ–Ω–∏ –Ω–µ –∫—É–ø–∏–ª–∏
            stmt = (
                select(User, ProductOffer, UserProductOffer)
                .join(UserProductOffer, User.id == UserProductOffer.user_id)
                .join(ProductOffer, UserProductOffer.offer_id == ProductOffer.id)
                .join(Product, ProductOffer.product_id == Product.id)
                .where(
                    and_(
                        Product.type == ProductType.TRIPWIRE,
                        UserProductOffer.shown_at <= cutoff_time,
                        UserProductOffer.clicked == False,  # –ù–µ –∫–ª–∏–∫–∞–ª–∏ –Ω–∞ –æ—Ñ—Ñ–µ—Ä
                        User.status == "active"  # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
                    )
                )
                .options(
                    selectinload(User.product_offers)
                )
            )
            
            result = await self.session.execute(stmt)
            users_for_followup = []
            
            for user, offer, user_offer in result.all():
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ –¥–æ–∂–∏–º
                followup_sent = await self._check_followup_sent(str(user.id), str(offer.id))
                if not followup_sent:
                    users_for_followup.append({
                        'user': user,
                        'offer': offer,
                        'user_offer': user_offer
                    })
            
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(users_for_followup)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –¥–æ–∂–∏–º–∞")
            return users_for_followup
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –¥–æ–∂–∏–º–∞: {e}")
            return []
    
    async def send_followup_to_user(
        self, 
        user: User, 
        offer: ProductOffer, 
        telegram_service: TelegramService
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
        
        Args:
            user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            offer: –û—Ñ—Ñ–µ—Ä
            telegram_service: –°–µ—Ä–≤–∏—Å Telegram
            
        Returns:
            bool: True –µ—Å–ª–∏ –¥–æ–∂–∏–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ
        """
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–æ–∂–∏–º–∞
            followup_text = (
                "‚òï <b>9‚Ç¨ ‚Äî –º–µ–Ω—å—à–µ, —á–µ–º —á–∞—à–∫–∞ –∫–æ—Ñ–µ –≤ –¥–µ–Ω—å</b>\n\n"
                "–ü–æ–¥—É–º–∞–π –æ–± —ç—Ç–æ–º:\n"
                "‚Ä¢ –ß–∞—à–∫–∞ –∫–æ—Ñ–µ –¥–∞—ë—Ç –±–æ–¥—Ä–æ—Å—Ç—å –Ω–∞ 2 —á–∞—Å–∞\n"
                "‚Ä¢ –≠—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–∞—Å—Ç —Ç–µ–±–µ —Å–∏—Å—Ç–µ–º—É –Ω–∞ –≤—Å—é –∂–∏–∑–Ω—å\n\n"
                "üéØ <b>–ó–∞ 30 –¥–Ω–µ–π —Ç—ã:</b>\n"
                "‚Ä¢ –°–æ–∑–¥–∞—à—å —á—ë—Ç–∫–∏–π –ø–ª–∞–Ω –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–π\n"
                "‚Ä¢ –†–∞–∑–æ–≤—å—ë—à—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É –∏ —Å–∏–ª—É –≤–æ–ª–∏\n"
                "‚Ä¢ –ò–∑–º–µ–Ω–∏—à—å –º—ã—à–ª–µ–Ω–∏–µ –Ω–∞ —É—Å–ø–µ—Ö\n\n"
                "–†–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å —Ç–≤–æ—é –∂–∏–∑–Ω—å.\n\n"
                "–≠—Ç–æ —Ç–≤–æ–π –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–Ω—Å –≤–æ–π—Ç–∏ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É –ø–æ —ç—Ç–æ–π —Ü–µ–Ω–µ."
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            from telegram import InlineKeyboardButton, InlineKeyboardMarkup
            keyboard = [
                [InlineKeyboardButton("üöÄ –í–æ–π—Ç–∏ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É", callback_data="warmup_offer")],
                [InlineKeyboardButton("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="stop_followup")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∂–∏–º
            success = await telegram_service.send_follow_up_message(
                chat_id=user.telegram_id,
                follow_up_text=followup_text,
                reply_markup=reply_markup
            )
            
            if success:
                # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –¥–æ–∂–∏–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
                await self._mark_followup_sent(str(user.id), str(offer.id))
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–æ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}")
            
            return success
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∂–∏–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}")
            return False
    
    async def send_followup_to_all_users(
        self, 
        telegram_service: TelegramService,
        hours_since_offer: int = 48
    ) -> int:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∂–∏–º –≤—Å–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
        
        Args:
            telegram_service: –°–µ—Ä–≤–∏—Å Telegram
            hours_since_offer: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ–∫–∞–∑–∞ –æ—Ñ—Ñ–µ—Ä–∞
            
        Returns:
            int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–æ–∂–∏–º–æ–≤
        """
        try:
            users_for_followup = await self.get_users_for_followup(hours_since_offer)
            sent_count = 0
            
            for user_data in users_for_followup:
                user = user_data['user']
                offer = user_data['offer']
                
                success = await self.send_followup_to_user(user, offer, telegram_service)
                if success:
                    sent_count += 1
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                await asyncio.sleep(1)
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –¥–æ–∂–∏–º–æ–≤ –∏–∑ {len(users_for_followup)}")
            return sent_count
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∂–∏–º–æ–≤: {e}")
            return 0
    
    async def _check_followup_sent(self, user_id: str, offer_id: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–ª—Å—è –ª–∏ —É–∂–µ –¥–æ–∂–∏–º.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            offer_id: ID –æ—Ñ—Ñ–µ—Ä–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ –¥–æ–∂–∏–º —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª—Å—è
        """
        try:
            result = await self.session.execute(
                select(UserFollowUp).where(
                    and_(
                        UserFollowUp.user_id == user_id,
                        UserFollowUp.offer_id == offer_id
                    )
                )
            )
            followup = result.scalar_one_or_none()
            return followup is not None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∂–∏–º–∞: {e}")
            return False
    
    async def _mark_followup_sent(self, user_id: str, offer_id: str) -> None:
        """
        –û—Ç–º–µ—Ç–∏—Ç—å, —á—Ç–æ –¥–æ–∂–∏–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            offer_id: ID –æ—Ñ—Ñ–µ—Ä–∞
        """
        try:
            followup = UserFollowUp(
                user_id=user_id,
                offer_id=offer_id,
                sent_at=datetime.utcnow()
            )
            self.session.add(followup)
            await self.session.commit()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∂–∏–º–∞: {e}")
            await self.session.rollback()
    
    async def stop_followup_for_user(self, user_id: str) -> bool:
        """
        –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–æ–∂–∏–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            bool: True –µ—Å–ª–∏ –¥–æ–∂–∏–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        """
        try:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–æ–∂–∏–º–æ–≤
            # –ù–∞–ø—Ä–∏–º–µ—Ä, –¥–æ–±–∞–≤–∏—Ç—å —Ñ–ª–∞–≥ –≤ —Ç–∞–±–ª–∏—Ü—É User
            logger.info(f"–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–æ–∂–∏–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–æ–∂–∏–º–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return False
