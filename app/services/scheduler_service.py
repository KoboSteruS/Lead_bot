"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–æ–≥—Ä–µ–≤–∞.

–£–ø—Ä–∞–≤–ª—è–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–æ–≥—Ä–µ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
"""

import asyncio
from datetime import datetime, timedelta
from typing import List, Dict, Any
from telegram import Bot, InlineKeyboardButton, InlineKeyboardMarkup
from loguru import logger

from app.core.database import get_db_session
from app.services.warmup_service import WarmupService
from app.services.telegram_service import TelegramService
from app.services.product_service import ProductService
from app.services.followup_service import FollowUpService
from app.models.warmup import WarmupMessageType
from app.models.product import ProductType


class SchedulerService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á."""
    
    def __init__(self, bot: Bot):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞.
        
        Args:
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram –±–æ—Ç–∞
        """
        self.bot = bot
        self.is_running = False
        self.task = None
    
    def start(self) -> None:
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""
        if not self.is_running:
            self.is_running = True
            self.task = asyncio.create_task(self._run_scheduler())
            logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –∑–∞–ø—É—â–µ–Ω")
    
    def stop(self) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""
        if self.is_running:
            self.is_running = False
            if self.task:
                self.task.cancel()
            logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def _run_scheduler(self) -> None:
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""
        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π (–¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î)
        await asyncio.sleep(5)
        
        while self.is_running:
            try:
                await self._process_warmup_messages()
                await self._process_followup_messages()
                await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            except asyncio.CancelledError:
                logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –æ—Ç–º–µ–Ω–µ–Ω")
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}")
                await asyncio.sleep(60)
    
    async def _process_warmup_messages(self) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–æ–≥—Ä–µ–≤–∞."""
        try:
            async with get_db_session() as session:
                warmup_service = WarmupService(session)
                telegram_service = TelegramService(self.bot)
                product_service = ProductService(session)
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –≥–æ—Ç–æ–≤—ã—Ö –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
                ready_users = await warmup_service.get_users_ready_for_next_message()
                
                for user_data in ready_users:
                    user = user_data['user']
                    message = user_data['message']
                    user_warmup = user_data['user_warmup']
                    
                    try:
                        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                        reply_markup = await self._create_message_keyboard(
                            message, product_service, user.id
                        )
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                        success = await telegram_service.send_warmup_message(
                            chat_id=user.telegram_id,
                            title=message.title or "",
                            text=message.text,
                            reply_markup=reply_markup
                        )
                        
                        # –û—Ç–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
                        await warmup_service.mark_message_sent(
                            user_id=str(user.id),
                            warmup_message_id=str(message.id),
                            success=success
                        )
                        
                        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {message.title}")
                        
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}")
                        
                        # –û—Ç–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –Ω–µ—É–¥–∞—á–Ω–æ–µ
                        await warmup_service.mark_message_sent(
                            user_id=str(user.id),
                            warmup_message_id=str(message.id),
                            success=False,
                            error_message=str(e)
                        )
                
                if ready_users:
                    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(ready_users)} —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–æ–≥—Ä–µ–≤–∞")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–æ–≥—Ä–µ–≤–∞: {e}")
    
    async def _process_followup_messages(self) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∂–∏–º–æ–≤."""
        try:
            async with get_db_session() as session:
                followup_service = FollowUpService(session)
                telegram_service = TelegramService(self.bot)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –∫—É–ø–∏–ª–∏ —Ç—Ä–∏–ø–≤–∞–π–µ—Ä
                sent_count = await followup_service.send_followup_to_all_users(
                    telegram_service=telegram_service,
                    hours_since_offer=48  # –ß–µ—Ä–µ–∑ 2 –¥–Ω—è
                )
                
                if sent_count > 0:
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –¥–æ–∂–∏–º–æ–≤")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∂–∏–º–æ–≤: {e}")
    
    async def _create_message_keyboard(
        self, 
        message, 
        product_service: ProductService, 
        user_id: int
    ) -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ–≤–∞.
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ–≤–∞
            product_service: –°–µ—Ä–≤–∏—Å –ø—Ä–æ–¥—É–∫—Ç–æ–≤
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        keyboard = []
        
        if message.message_type == WarmupMessageType.OFFER:
            # –î–ª—è –æ—Ñ—Ñ–µ—Ä–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í–æ–π—Ç–∏ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É"
            keyboard.append([
                InlineKeyboardButton("üöÄ –í–æ–π—Ç–∏ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É", callback_data="warmup_offer")
            ])
            
        elif message.message_type == WarmupMessageType.FOLLOW_UP:
            # –î–ª—è –¥–æ–∂–∏–º–∞ —Ç–æ–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í–æ–π—Ç–∏ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É"
            keyboard.append([
                InlineKeyboardButton("üöÄ –í–æ–π—Ç–∏ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É", callback_data="warmup_offer")
            ])
            
        elif message.message_type in [WarmupMessageType.PAIN_POINT, WarmupMessageType.SOLUTION, WarmupMessageType.SOCIAL_PROOF]:
            # –î–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ"
            keyboard.append([
                InlineKeyboardButton("‚ÑπÔ∏è –£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ", callback_data="warmup_info")
            ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ–≥—Ä–µ–≤–∞
        keyboard.append([
            InlineKeyboardButton("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ–≤", callback_data="warmup_stop")
        ])
        
        return InlineKeyboardMarkup(keyboard) if keyboard else None
    
    async def send_immediate_warmup_message(
        self, 
        user_id: int, 
        message_type: WarmupMessageType
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ–≤–∞ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            message_type: –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
            
        Returns:
            bool: True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            async with get_db_session() as session:
                warmup_service = WarmupService(session)
                telegram_service = TelegramService(self.bot)
                product_service = ProductService(session)
                
                # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–≥—Ä–µ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_warmup = await warmup_service.get_user_active_warmup(str(user_id))
                if not user_warmup:
                    logger.warning(f"–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ–≤–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    return False
                
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π
                scenario = user_warmup.scenario
                if not scenario:
                    logger.warning(f"–ù–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏—è –¥–ª—è –ø—Ä–æ–≥—Ä–µ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    return False
                
                # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω—É–∂–Ω–æ–≥–æ —Ç–∏–ø–∞
                target_message = None
                for message in scenario.messages:
                    if message.message_type == message_type and message.is_active:
                        target_message = message
                        break
                
                if not target_message:
                    logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∏–ø–∞ {message_type} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    return False
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                reply_markup = await self._create_message_keyboard(
                    target_message, product_service, user_id
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                success = await telegram_service.send_warmup_message(
                    chat_id=user_id,
                    title=target_message.title or "",
                    text=target_message.text,
                    reply_markup=reply_markup
                )
                
                if success:
                    # –û—Ç–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
                    await warmup_service.mark_message_sent(
                        user_id=str(user_id),
                        warmup_message_id=str(target_message.id),
                        success=True
                    )
                
                return success
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            return False
