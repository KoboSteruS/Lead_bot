"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram API.

–°–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π, —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞–º–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫.
"""

from typing import Optional, List, Dict, Any
from telegram import Bot, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.error import TelegramError, BadRequest, Forbidden
from loguru import logger

from config.settings import settings


class TelegramService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram API."""
    
    def __init__(self, bot: Bot):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞.
        
        Args:
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram –±–æ—Ç–∞
        """
        self.bot = bot
    
    async def send_welcome_message(
        self, 
        chat_id: int, 
        user_name: str,
        reply_markup: Optional[InlineKeyboardMarkup] = None
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
        
        Args:
            chat_id: ID —á–∞—Ç–∞
            user_name: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            reply_markup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            welcome_text = (
                f"üéØ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ¬´–û–°–ù–û–í–ê P U T –ò¬ª, {user_name}!</b>\n\n"
                f"–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ—é –∂–∏–∑–Ω—å —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –∏ —Å–∏–ª—ã.\n\n"
                f"üéÅ <b>–ü–æ–ª—É—á–∏ –ø–æ–¥–∞—Ä–æ–∫:</b>\n"
                f"¬´7-–¥–Ω–µ–≤–Ω—ã–π —Ç—Ä–µ–∫–µ—Ä –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –∏ —Å–∏–ª—ã¬ª\n\n"
                f"–≠—Ç–æ—Ç —Ç—Ä–µ–∫–µ—Ä –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ:\n"
                f"‚Ä¢ –°–æ–∑–¥–∞—Ç—å —É—Å—Ç–æ–π—á–∏–≤—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏\n"
                f"‚Ä¢ –†–∞–∑–≤–∏—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É\n"
                f"‚Ä¢ –î–æ—Å—Ç–∏—á—å –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π\n"
                f"‚Ä¢ –°—Ç–∞—Ç—å —Å–∏–ª—å–Ω–µ–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å\n\n"
                f"–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞–±—Ä–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫! üéÅ"
            )
            
            await self.bot.send_message(
                chat_id=chat_id,
                text=welcome_text,
                parse_mode="HTML",
                reply_markup=reply_markup
            )
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")
            return False
    
    async def send_lead_magnet_message(
        self,
        chat_id: int,
        lead_magnet_name: str,
        message_text: Optional[str] = None,
        file_url: Optional[str] = None,
        lead_magnet_type: str = "pdf",
        reply_markup: Optional[InlineKeyboardMarkup] = None
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–æ–º.
        
        Args:
            chat_id: ID —á–∞—Ç–∞
            lead_magnet_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞
            message_text: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
            file_url: –°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª
            lead_magnet_type: –¢–∏–ø –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞
            reply_markup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            text = f"üéÅ <b>–í–∞—à –ø–æ–¥–∞—Ä–æ–∫ –≥–æ—Ç–æ–≤!</b>\n\nüìã <b>{lead_magnet_name}</b>\n\n"
            
            if message_text:
                text += f"{message_text}\n\n"
            
            await self.bot.send_message(
                chat_id=chat_id,
                text=text,
                parse_mode="HTML",
                reply_markup=reply_markup
            )
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –ª–∏–¥-–º–∞–≥–Ω–∏—Ç '{lead_magnet_name}' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–∏–¥-–º–∞–≥–Ω–∏—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")
            return False
    
    async def send_warmup_message(
        self,
        chat_id: int,
        title: str,
        text: str,
        reply_markup: Optional[InlineKeyboardMarkup] = None
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ–≤–∞.
        
        Args:
            chat_id: ID —á–∞—Ç–∞
            title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            reply_markup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            full_text = f"üî• <b>{title}</b>\n\n{text}"
            
            await self.bot.send_message(
                chat_id=chat_id,
                text=full_text,
                parse_mode="HTML",
                reply_markup=reply_markup
            )
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ–≤–∞ '{title}' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")
            return False
    
    async def send_offer_message(
        self,
        chat_id: int,
        offer_text: str,
        reply_markup: Optional[InlineKeyboardMarkup] = None
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ñ—Ñ–µ—Ä–∞.
        
        Args:
            chat_id: ID —á–∞—Ç–∞
            offer_text: –¢–µ–∫—Å—Ç –æ—Ñ—Ñ–µ—Ä–∞
            reply_markup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            await self.bot.send_message(
                chat_id=chat_id,
                text=offer_text,
                parse_mode="HTML",
                reply_markup=reply_markup
            )
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ñ—Ñ–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ñ—Ñ–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")
            return False
    
    async def send_follow_up_message(
        self,
        chat_id: int,
        follow_up_text: str,
        reply_markup: Optional[InlineKeyboardMarkup] = None
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∂–∏–º–∞.
        
        Args:
            chat_id: ID —á–∞—Ç–∞
            follow_up_text: –¢–µ–∫—Å—Ç –¥–æ–∂–∏–º–∞
            reply_markup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            await self.bot.send_message(
                chat_id=chat_id,
                text=follow_up_text,
                parse_mode="HTML",
                reply_markup=reply_markup
            )
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–æ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∂–∏–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")
            return False
    
    async def check_channel_subscription(self, user_id: int) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            bool: True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª
        """
        try:
            member = await self.bot.get_chat_member(
                chat_id=settings.CHANNEL_ID,
                user_id=user_id
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
            is_subscribed = member.status in ['member', 'administrator', 'creator']
            
            logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {'–ø–æ–¥–ø–∏—Å–∞–Ω' if is_subscribed else '–Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω'}")
            return is_subscribed
            
        except (BadRequest, Forbidden) as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return False
    
    async def send_subscription_required_message(
        self,
        chat_id: int,
        channel_username: str,
        reply_markup: Optional[InlineKeyboardMarkup] = None
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª.
        
        Args:
            chat_id: ID —á–∞—Ç–∞
            channel_username: Username –∫–∞–Ω–∞–ª–∞
            reply_markup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            text = (
                f"üì∫ <b>–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–∞!</b>\n\n"
                f"–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ª–∏–¥-–º–∞–≥–Ω–∏—Ç, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª –ø—Ä–æ–µ–∫—Ç–∞:\n\n"
                f"üîó @{channel_username}\n\n"
                f"–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª"
            )
            
            await self.bot.send_message(
                chat_id=chat_id,
                text=text,
                parse_mode="HTML",
                reply_markup=reply_markup
            )
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")
            return False
    
    async def send_error_message(
        self,
        chat_id: int,
        error_text: str = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ.
        
        Args:
            chat_id: ID —á–∞—Ç–∞
            error_text: –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            await self.bot.send_message(
                chat_id=chat_id,
                text=f"‚ùå {error_text}",
                parse_mode="HTML"
            )
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")
            return False
    
    async def send_success_message(
        self,
        chat_id: int,
        success_text: str
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ.
        
        Args:
            chat_id: ID —á–∞—Ç–∞
            success_text: –¢–µ–∫—Å—Ç —É—Å–ø–µ—Ö–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            await self.bot.send_message(
                chat_id=chat_id,
                text=f"‚úÖ {success_text}",
                parse_mode="HTML"
            )
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")
            return False
    
    async def get_bot_info(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ.
        
        Returns:
            Dict[str, Any]: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
        """
        try:
            bot_info = await self.bot.get_me()
            return {
                "id": bot_info.id,
                "username": bot_info.username,
                "first_name": bot_info.first_name,
                "can_join_groups": bot_info.can_join_groups,
                "can_read_all_group_messages": bot_info.can_read_all_group_messages,
                "supports_inline_queries": bot_info.supports_inline_queries
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ: {e}")
            return {}
